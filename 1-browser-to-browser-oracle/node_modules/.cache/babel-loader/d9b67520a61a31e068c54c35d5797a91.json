{"ast":null,"code":"import { Observable } from \"./observable\";\nimport unsubscribe from \"./unsubscribe\";\n\nfunction merge() {\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  if (observables.length === 0) {\n    return Observable.from([]);\n  }\n\n  return new Observable(observer => {\n    let completed = 0;\n    const subscriptions = observables.map(input => {\n      return input.subscribe({\n        error(error) {\n          observer.error(error);\n          unsubscribeAll();\n        },\n\n        next(value) {\n          observer.next(value);\n        },\n\n        complete() {\n          if (++completed === observables.length) {\n            observer.complete();\n            unsubscribeAll();\n          }\n        }\n\n      });\n    });\n\n    const unsubscribeAll = () => {\n      subscriptions.forEach(subscription => unsubscribe(subscription));\n    };\n\n    return unsubscribeAll;\n  });\n}\n\nexport default merge;","map":{"version":3,"names":["Observable","unsubscribe","merge","observables","length","from","observer","completed","subscriptions","map","input","subscribe","error","unsubscribeAll","next","value","complete","forEach","subscription"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/observable-fns/dist.esm/merge.js"],"sourcesContent":["import { Observable } from \"./observable\";\nimport unsubscribe from \"./unsubscribe\";\nfunction merge(...observables) {\n    if (observables.length === 0) {\n        return Observable.from([]);\n    }\n    return new Observable(observer => {\n        let completed = 0;\n        const subscriptions = observables.map(input => {\n            return input.subscribe({\n                error(error) {\n                    observer.error(error);\n                    unsubscribeAll();\n                },\n                next(value) {\n                    observer.next(value);\n                },\n                complete() {\n                    if (++completed === observables.length) {\n                        observer.complete();\n                        unsubscribeAll();\n                    }\n                }\n            });\n        });\n        const unsubscribeAll = () => {\n            subscriptions.forEach(subscription => unsubscribe(subscription));\n        };\n        return unsubscribeAll;\n    });\n}\nexport default merge;\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AACA,SAASC,KAAT,GAA+B;EAAA,kCAAbC,WAAa;IAAbA,WAAa;EAAA;;EAC3B,IAAIA,WAAW,CAACC,MAAZ,KAAuB,CAA3B,EAA8B;IAC1B,OAAOJ,UAAU,CAACK,IAAX,CAAgB,EAAhB,CAAP;EACH;;EACD,OAAO,IAAIL,UAAJ,CAAeM,QAAQ,IAAI;IAC9B,IAAIC,SAAS,GAAG,CAAhB;IACA,MAAMC,aAAa,GAAGL,WAAW,CAACM,GAAZ,CAAgBC,KAAK,IAAI;MAC3C,OAAOA,KAAK,CAACC,SAAN,CAAgB;QACnBC,KAAK,CAACA,KAAD,EAAQ;UACTN,QAAQ,CAACM,KAAT,CAAeA,KAAf;UACAC,cAAc;QACjB,CAJkB;;QAKnBC,IAAI,CAACC,KAAD,EAAQ;UACRT,QAAQ,CAACQ,IAAT,CAAcC,KAAd;QACH,CAPkB;;QAQnBC,QAAQ,GAAG;UACP,IAAI,EAAET,SAAF,KAAgBJ,WAAW,CAACC,MAAhC,EAAwC;YACpCE,QAAQ,CAACU,QAAT;YACAH,cAAc;UACjB;QACJ;;MAbkB,CAAhB,CAAP;IAeH,CAhBqB,CAAtB;;IAiBA,MAAMA,cAAc,GAAG,MAAM;MACzBL,aAAa,CAACS,OAAd,CAAsBC,YAAY,IAAIjB,WAAW,CAACiB,YAAD,CAAjD;IACH,CAFD;;IAGA,OAAOL,cAAP;EACH,CAvBM,CAAP;AAwBH;;AACD,eAAeX,KAAf"},"metadata":{},"sourceType":"module"}