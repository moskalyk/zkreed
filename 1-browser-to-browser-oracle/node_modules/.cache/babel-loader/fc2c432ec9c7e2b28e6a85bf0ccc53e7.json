{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scheduleArray = void 0;\n\nvar Observable_1 = require(\"../Observable\");\n\nfunction scheduleArray(input, scheduler) {\n  return new Observable_1.Observable(function (subscriber) {\n    var i = 0;\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n      } else {\n        subscriber.next(input[i++]);\n\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n\nexports.scheduleArray = scheduleArray;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGA,SAAgBA,aAAhB,CAAiCC,KAAjC,EAAsDC,SAAtD,EAA8E;EAC5E,OAAO,IAAIC,uBAAJ,CAAkB,UAACC,UAAD,EAAW;IAElC,IAAIC,CAAC,GAAG,CAAR;IAEA,OAAOH,SAAS,CAACI,QAAV,CAAmB;MACxB,IAAID,CAAC,KAAKJ,KAAK,CAACM,MAAhB,EAAwB;QAGtBH,UAAU,CAACI,QAAX;MACD,CAJD,MAIO;QAGLJ,UAAU,CAACK,IAAX,CAAgBR,KAAK,CAACI,CAAC,EAAF,CAArB;;QAIA,IAAI,CAACD,UAAU,CAACM,MAAhB,EAAwB;UACtB,KAAKJ,QAAL;QACD;MACF;IACF,CAhBM,CAAP;EAiBD,CArBM,CAAP;AAsBD;;AAvBDK","names":["scheduleArray","input","scheduler","Observable_1","subscriber","i","schedule","length","complete","next","closed","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/scheduled/scheduleArray.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}