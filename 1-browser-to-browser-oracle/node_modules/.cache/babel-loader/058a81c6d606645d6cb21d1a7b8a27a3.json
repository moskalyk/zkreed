{"ast":null,"code":"/**\n *\n * This file is auto-generated. Do not edit manually: changes may be erased.\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.\n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\n * Aqua version: 0.7.2-314\n *\n */\nimport { callFunction, registerService } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3'; // Services\n\nexport function registerHelloWorld() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  registerService(args, {\n    \"defaultServiceId\": \"hello-world\",\n    \"functions\": {\n      \"tag\": \"labeledProduct\",\n      \"fields\": {\n        \"getFortune\": {\n          \"tag\": \"arrow\",\n          \"domain\": {\n            \"tag\": \"nil\"\n          },\n          \"codomain\": {\n            \"tag\": \"unlabeledProduct\",\n            \"items\": [{\n              \"tag\": \"scalar\",\n              \"name\": \"string\"\n            }]\n          }\n        },\n        \"hello\": {\n          \"tag\": \"arrow\",\n          \"domain\": {\n            \"tag\": \"labeledProduct\",\n            \"fields\": {\n              \"str\": {\n                \"tag\": \"scalar\",\n                \"name\": \"string\"\n              }\n            }\n          },\n          \"codomain\": {\n            \"tag\": \"nil\"\n          }\n        }\n      }\n    }\n  });\n}\nexport function registerHelloPeer() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  registerService(args, {\n    \"defaultServiceId\": \"HelloPeer\",\n    \"functions\": {\n      \"tag\": \"labeledProduct\",\n      \"fields\": {\n        \"hello\": {\n          \"tag\": \"arrow\",\n          \"domain\": {\n            \"tag\": \"labeledProduct\",\n            \"fields\": {\n              \"from\": {\n                \"tag\": \"scalar\",\n                \"name\": \"string\"\n              }\n            }\n          },\n          \"codomain\": {\n            \"tag\": \"unlabeledProduct\",\n            \"items\": [{\n              \"tag\": \"scalar\",\n              \"name\": \"string\"\n            }]\n          }\n        }\n      }\n    }\n  });\n} // Functions\n\nexport function getRelayTime() {\n  let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (xor\n                        (call -relay- (\"peer\" \"timestamp_ms\") [] ts)\n                        (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                       )\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [ts])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n                    )\n    `;\n\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return callFunction(args, {\n    \"functionName\": \"getRelayTime\",\n    \"arrow\": {\n      \"tag\": \"arrow\",\n      \"domain\": {\n        \"tag\": \"labeledProduct\",\n        \"fields\": {}\n      },\n      \"codomain\": {\n        \"tag\": \"unlabeledProduct\",\n        \"items\": [{\n          \"tag\": \"scalar\",\n          \"name\": \"u64\"\n        }]\n      }\n    },\n    \"names\": {\n      \"relay\": \"-relay-\",\n      \"getDataSrv\": \"getDataSrv\",\n      \"callbackSrv\": \"callbackSrv\",\n      \"responseSrv\": \"callbackSrv\",\n      \"responseFnName\": \"response\",\n      \"errorHandlingSrv\": \"errorHandlingSrv\",\n      \"errorFnName\": \"error\"\n    }\n  }, script);\n}\nexport function tellFortune() {\n  let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (call %init_peer_id% (\"hello-world\" \"getFortune\") [] res)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [res])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `;\n\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  return callFunction(args, {\n    \"functionName\": \"tellFortune\",\n    \"arrow\": {\n      \"tag\": \"arrow\",\n      \"domain\": {\n        \"tag\": \"labeledProduct\",\n        \"fields\": {}\n      },\n      \"codomain\": {\n        \"tag\": \"unlabeledProduct\",\n        \"items\": [{\n          \"tag\": \"scalar\",\n          \"name\": \"string\"\n        }]\n      }\n    },\n    \"names\": {\n      \"relay\": \"-relay-\",\n      \"getDataSrv\": \"getDataSrv\",\n      \"callbackSrv\": \"callbackSrv\",\n      \"responseSrv\": \"callbackSrv\",\n      \"responseFnName\": \"response\",\n      \"errorHandlingSrv\": \"errorHandlingSrv\",\n      \"errorFnName\": \"error\"\n    }\n  }, script);\n}\nexport function sayHello() {\n  let script = `\n                    (xor\n                     (seq\n                      (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                      (call %init_peer_id% (\"hello-world\" \"hello\") [\"Hello, world!\"])\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                    )\n    `;\n\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n\n  return callFunction(args, {\n    \"functionName\": \"sayHello\",\n    \"arrow\": {\n      \"tag\": \"arrow\",\n      \"domain\": {\n        \"tag\": \"labeledProduct\",\n        \"fields\": {}\n      },\n      \"codomain\": {\n        \"tag\": \"nil\"\n      }\n    },\n    \"names\": {\n      \"relay\": \"-relay-\",\n      \"getDataSrv\": \"getDataSrv\",\n      \"callbackSrv\": \"callbackSrv\",\n      \"responseSrv\": \"callbackSrv\",\n      \"responseFnName\": \"response\",\n      \"errorHandlingSrv\": \"errorHandlingSrv\",\n      \"errorFnName\": \"error\"\n    }\n  }, script);\n}","map":{"version":3,"names":["callFunction","registerService","registerHelloWorld","args","registerHelloPeer","getRelayTime","script","tellFortune","sayHello"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/src/_aqua/getting-started.ts"],"sourcesContent":["/**\n *\n * This file is auto-generated. Do not edit manually: changes may be erased.\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.\n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\n * Aqua version: 0.7.2-314\n *\n */\nimport { Fluence, FluencePeer } from '@fluencelabs/fluence';\nimport {\n    CallParams,\n    callFunction,\n    registerService,\n} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';\n\n\n// Services\n\nexport interface HelloWorldDef {\n    getFortune: (callParams: CallParams<null>) => string | Promise<string>;\n    hello: (str: string, callParams: CallParams<'str'>) => void | Promise<void>;\n}\nexport function registerHelloWorld(service: HelloWorldDef): void;\nexport function registerHelloWorld(serviceId: string, service: HelloWorldDef): void;\nexport function registerHelloWorld(peer: FluencePeer, service: HelloWorldDef): void;\nexport function registerHelloWorld(peer: FluencePeer, serviceId: string, service: HelloWorldDef): void;\n       \n\nexport function registerHelloWorld(...args: any) {\n    registerService(\n        args,\n        {\n    \"defaultServiceId\" : \"hello-world\",\n    \"functions\" : {\n        \"tag\" : \"labeledProduct\",\n        \"fields\" : {\n            \"getFortune\" : {\n                \"tag\" : \"arrow\",\n                \"domain\" : {\n                    \"tag\" : \"nil\"\n                },\n                \"codomain\" : {\n                    \"tag\" : \"unlabeledProduct\",\n                    \"items\" : [\n                        {\n                            \"tag\" : \"scalar\",\n                            \"name\" : \"string\"\n                        }\n                    ]\n                }\n            },\n            \"hello\" : {\n                \"tag\" : \"arrow\",\n                \"domain\" : {\n                    \"tag\" : \"labeledProduct\",\n                    \"fields\" : {\n                        \"str\" : {\n                            \"tag\" : \"scalar\",\n                            \"name\" : \"string\"\n                        }\n                    }\n                },\n                \"codomain\" : {\n                    \"tag\" : \"nil\"\n                }\n            }\n        }\n    }\n}\n    );\n}\n      \n\n\nexport interface HelloPeerDef {\n    hello: (from: string, callParams: CallParams<'from'>) => string | Promise<string>;\n}\nexport function registerHelloPeer(service: HelloPeerDef): void;\nexport function registerHelloPeer(serviceId: string, service: HelloPeerDef): void;\nexport function registerHelloPeer(peer: FluencePeer, service: HelloPeerDef): void;\nexport function registerHelloPeer(peer: FluencePeer, serviceId: string, service: HelloPeerDef): void;\n       \n\nexport function registerHelloPeer(...args: any) {\n    registerService(\n        args,\n        {\n    \"defaultServiceId\" : \"HelloPeer\",\n    \"functions\" : {\n        \"tag\" : \"labeledProduct\",\n        \"fields\" : {\n            \"hello\" : {\n                \"tag\" : \"arrow\",\n                \"domain\" : {\n                    \"tag\" : \"labeledProduct\",\n                    \"fields\" : {\n                        \"from\" : {\n                            \"tag\" : \"scalar\",\n                            \"name\" : \"string\"\n                        }\n                    }\n                },\n                \"codomain\" : {\n                    \"tag\" : \"unlabeledProduct\",\n                    \"items\" : [\n                        {\n                            \"tag\" : \"scalar\",\n                            \"name\" : \"string\"\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n    );\n}\n      \n// Functions\n \n\nexport function getRelayTime(\n    config?: {ttl?: number}\n): Promise<number>;\n\nexport function getRelayTime(\n    peer: FluencePeer,\n    config?: {ttl?: number}\n): Promise<number>;\n\nexport function getRelayTime(...args: any) {\n\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (xor\n                        (call -relay- (\"peer\" \"timestamp_ms\") [] ts)\n                        (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                       )\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [ts])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n                    )\n    `\n    return callFunction(\n        args,\n        {\n    \"functionName\" : \"getRelayTime\",\n    \"arrow\" : {\n        \"tag\" : \"arrow\",\n        \"domain\" : {\n            \"tag\" : \"labeledProduct\",\n            \"fields\" : {\n                \n            }\n        },\n        \"codomain\" : {\n            \"tag\" : \"unlabeledProduct\",\n            \"items\" : [\n                {\n                    \"tag\" : \"scalar\",\n                    \"name\" : \"u64\"\n                }\n            ]\n        }\n    },\n    \"names\" : {\n        \"relay\" : \"-relay-\",\n        \"getDataSrv\" : \"getDataSrv\",\n        \"callbackSrv\" : \"callbackSrv\",\n        \"responseSrv\" : \"callbackSrv\",\n        \"responseFnName\" : \"response\",\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\n        \"errorFnName\" : \"error\"\n    }\n},\n        script\n    )\n}\n\n \n\nexport function tellFortune(\n    config?: {ttl?: number}\n): Promise<string>;\n\nexport function tellFortune(\n    peer: FluencePeer,\n    config?: {ttl?: number}\n): Promise<string>;\n\nexport function tellFortune(...args: any) {\n\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (call %init_peer_id% (\"hello-world\" \"getFortune\") [] res)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [res])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `\n    return callFunction(\n        args,\n        {\n    \"functionName\" : \"tellFortune\",\n    \"arrow\" : {\n        \"tag\" : \"arrow\",\n        \"domain\" : {\n            \"tag\" : \"labeledProduct\",\n            \"fields\" : {\n                \n            }\n        },\n        \"codomain\" : {\n            \"tag\" : \"unlabeledProduct\",\n            \"items\" : [\n                {\n                    \"tag\" : \"scalar\",\n                    \"name\" : \"string\"\n                }\n            ]\n        }\n    },\n    \"names\" : {\n        \"relay\" : \"-relay-\",\n        \"getDataSrv\" : \"getDataSrv\",\n        \"callbackSrv\" : \"callbackSrv\",\n        \"responseSrv\" : \"callbackSrv\",\n        \"responseFnName\" : \"response\",\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\n        \"errorFnName\" : \"error\"\n    }\n},\n        script\n    )\n}\n\n \n\nexport function sayHello(\n    config?: {ttl?: number}\n): Promise<void>;\n\nexport function sayHello(\n    peer: FluencePeer,\n    config?: {ttl?: number}\n): Promise<void>;\n\nexport function sayHello(...args: any) {\n\n    let script = `\n                    (xor\n                     (seq\n                      (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                      (call %init_peer_id% (\"hello-world\" \"hello\") [\"Hello, world!\"])\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                    )\n    `\n    return callFunction(\n        args,\n        {\n    \"functionName\" : \"sayHello\",\n    \"arrow\" : {\n        \"tag\" : \"arrow\",\n        \"domain\" : {\n            \"tag\" : \"labeledProduct\",\n            \"fields\" : {\n                \n            }\n        },\n        \"codomain\" : {\n            \"tag\" : \"nil\"\n        }\n    },\n    \"names\" : {\n        \"relay\" : \"-relay-\",\n        \"getDataSrv\" : \"getDataSrv\",\n        \"callbackSrv\" : \"callbackSrv\",\n        \"responseSrv\" : \"callbackSrv\",\n        \"responseFnName\" : \"response\",\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\n        \"errorFnName\" : \"error\"\n    }\n},\n        script\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}