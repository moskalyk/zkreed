{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Thread = void 0;\n\nconst symbols_1 = require(\"../symbols\");\n\nfunction fail(message) {\n  throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\n\n\nexports.Thread = {\n  /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n  errors(thread) {\n    return thread[symbols_1.$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n  },\n\n  /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n  events(thread) {\n    return thread[symbols_1.$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n  },\n\n  /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n  terminate(thread) {\n    return thread[symbols_1.$terminate]();\n  }\n\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","Thread","symbols_1","require","fail","message","Error","errors","thread","$errors","events","$events","terminate","$terminate"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/threads/dist/master/thread.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Thread = void 0;\nconst symbols_1 = require(\"../symbols\");\nfunction fail(message) {\n    throw Error(message);\n}\n/** Thread utility functions. Use them to manage or inspect a `spawn()`-ed thread. */\nexports.Thread = {\n    /** Return an observable that can be used to subscribe to all errors happening in the thread. */\n    errors(thread) {\n        return thread[symbols_1.$errors] || fail(\"Error observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Return an observable that can be used to subscribe to internal events happening in the thread. Useful for debugging. */\n    events(thread) {\n        return thread[symbols_1.$events] || fail(\"Events observable not found. Make sure to pass a thread instance as returned by the spawn() promise.\");\n    },\n    /** Terminate a thread. Remember to terminate every thread when you are done using it. */\n    terminate(thread) {\n        return thread[symbols_1.$terminate]();\n    }\n};\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,SAASC,IAAT,CAAcC,OAAd,EAAuB;EACnB,MAAMC,KAAK,CAACD,OAAD,CAAX;AACH;AACD;;;AACAN,OAAO,CAACE,MAAR,GAAiB;EACb;EACAM,MAAM,CAACC,MAAD,EAAS;IACX,OAAOA,MAAM,CAACN,SAAS,CAACO,OAAX,CAAN,IAA6BL,IAAI,CAAC,qGAAD,CAAxC;EACH,CAJY;;EAKb;EACAM,MAAM,CAACF,MAAD,EAAS;IACX,OAAOA,MAAM,CAACN,SAAS,CAACS,OAAX,CAAN,IAA6BP,IAAI,CAAC,sGAAD,CAAxC;EACH,CARY;;EASb;EACAQ,SAAS,CAACJ,MAAD,EAAS;IACd,OAAOA,MAAM,CAACN,SAAS,CAACW,UAAX,CAAN,EAAP;EACH;;AAZY,CAAjB"},"metadata":{},"sourceType":"script"}