{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.possibleElisions = exports.simpleRegularExpression = exports.ADDRESS_BOUNDARY = exports.padGroup = exports.groupPossibilities = void 0;\n\nvar v6 = __importStar(require(\"./constants\"));\n\nvar sprintf_js_1 = require(\"sprintf-js\");\n\nfunction groupPossibilities(possibilities) {\n  return sprintf_js_1.sprintf('(%s)', possibilities.join('|'));\n}\n\nexports.groupPossibilities = groupPossibilities;\n\nfunction padGroup(group) {\n  if (group.length < 4) {\n    return sprintf_js_1.sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\n\nexports.padGroup = padGroup;\nexports.ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';\n\nfunction simpleRegularExpression(groups) {\n  var zeroIndexes = [];\n  groups.forEach(function (group, i) {\n    var groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  }); // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\n    return groups.map(function (group, i) {\n      if (i === zeroIndex) {\n        var elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n        return groupPossibilities([padGroup(group), elision]);\n      }\n\n      return padGroup(group);\n    }).join(':');\n  }); // The simplest case\n\n  possibilities.push(groups.map(padGroup).join(':'));\n  return groupPossibilities(possibilities);\n}\n\nexports.simpleRegularExpression = simpleRegularExpression;\n\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\n  var left = moreLeft ? '' : ':';\n  var right = moreRight ? '' : ':';\n  var possibilities = []; // 1. elision of everything (::)\n\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  } // 2. complete elision of the middle\n\n\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if (moreRight && !moreLeft || !moreRight && moreLeft) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  } // 4. elision from the left side\n\n\n  possibilities.push(sprintf_js_1.sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1)); // 5. elision from the right side\n\n  possibilities.push(sprintf_js_1.sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right)); // 6. no elision\n\n  possibilities.push(sprintf_js_1.sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1)); // 7. elision (including sloppy elision) from the middle\n\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\n    for (var position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf_js_1.sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}\n\nexports.possibleElisions = possibleElisions;","map":{"version":3,"mappings":"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","names":["groupPossibilities","possibilities","sprintf_js_1","join","exports","padGroup","group","length","simpleRegularExpression","groups","zeroIndexes","forEach","i","groupInteger","parseInt","push","map","zeroIndex","elision","v6","GROUPS","possibleElisions","elidedGroups","moreLeft","moreRight","left","right","position"],"sources":["../../../../lib/v6/regular-expressions.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}