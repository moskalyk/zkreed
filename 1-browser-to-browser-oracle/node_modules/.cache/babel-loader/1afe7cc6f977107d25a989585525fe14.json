{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nvar uuid_1 = require(\"uuid\");\n\nvar base64_js_1 = require(\"base64-js\");\n\nvar loglevel_1 = __importDefault(require(\"loglevel\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar Buffer_1 = __importDefault(require(\"./Buffer\"));\n\nvar Particle =\n/** @class */\nfunction () {\n  function Particle(id, timestamp, script, data, ttl, initPeerId) {\n    this.id = id;\n    this.timestamp = timestamp;\n    this.script = script;\n    this.data = data;\n    this.ttl = ttl;\n    this.initPeerId = initPeerId;\n    this.callResults = [];\n  }\n\n  Particle.createNew = function (script, ttl, initPeerId) {\n    return new Particle(genUUID(), Date.now(), script, Buffer_1.default.from([]), ttl, initPeerId);\n  };\n\n  Particle.fromString = function (str) {\n    var json = JSON.parse(str);\n    var res = new Particle(json.id, json.timestamp, json.script, (0, base64_js_1.toByteArray)(json.data), json.ttl, json.init_peer_id);\n    res.signature = json.signature;\n    return res;\n  };\n\n  Particle.prototype.getParticleContext = function () {\n    return {\n      particleId: this.id,\n      initPeerId: this.initPeerId,\n      timestamp: this.timestamp,\n      ttl: this.ttl,\n      signature: this.signature\n    };\n  };\n\n  Particle.prototype.actualTtl = function () {\n    return this.timestamp + this.ttl - Date.now();\n  };\n\n  Particle.prototype.hasExpired = function () {\n    return this.actualTtl() <= 0;\n  };\n\n  Particle.prototype.clone = function () {\n    var res = new Particle(this.id, this.timestamp, this.script, this.data, this.ttl, this.initPeerId);\n    res.signature = this.signature;\n    res.callResults = this.callResults;\n    return res;\n  };\n\n  Particle.prototype.toString = function () {\n    return JSON.stringify({\n      action: 'Particle',\n      id: this.id,\n      init_peer_id: this.initPeerId,\n      timestamp: this.timestamp,\n      ttl: this.ttl,\n      script: this.script,\n      // TODO: copy signature from a particle after signatures will be implemented on nodes\n      signature: [],\n      data: this.data && (0, base64_js_1.fromByteArray)(this.data)\n    });\n  };\n\n  Particle.prototype.logTo = function (level, message) {\n    var fn;\n    var data;\n\n    switch (level) {\n      case 'debug':\n        fn = loglevel_1.default.debug;\n        data = (0, utils_1.dataToString)(this.data);\n        break;\n\n      case 'error':\n        fn = loglevel_1.default.error;\n        break;\n\n      case 'info':\n      case 'trace':\n        fn = loglevel_1.default.info;\n        break;\n\n      case 'warn':\n        fn = loglevel_1.default.warn;\n        break;\n\n      default:\n        return;\n    }\n\n    fn(message, (0, utils_1.jsonify)({\n      id: this.id,\n      init_peer_id: this.initPeerId,\n      timestamp: this.timestamp,\n      ttl: this.ttl,\n      script: this.script,\n      signature: this.signature,\n      callResults: this.callResults,\n      data: data\n    }));\n  };\n\n  return Particle;\n}();\n\nexports.Particle = Particle;\n\nfunction genUUID() {\n  return (0, uuid_1.v4)();\n}","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AAEA;;AACA;;AAGA;AAAA;AAAA;EAKI,kBACWA,EADX,EAEWC,SAFX,EAGWC,MAHX,EAIWC,IAJX,EAKWC,GALX,EAMWC,UANX,EAM6B;IALlB;IACA;IACA;IACA;IACA;IACA;IARX,mBAAgC,EAAhC;EASI;;EAEGC,qBAAP,UAAiBJ,MAAjB,EAAiCE,GAAjC,EAA8CC,UAA9C,EAAgE;IAC5D,OAAO,IAAIC,QAAJ,CAAaC,OAAO,EAApB,EAAwBC,IAAI,CAACC,GAAL,EAAxB,EAAoCP,MAApC,EAA4CQ,iBAAOC,IAAP,CAAY,EAAZ,CAA5C,EAA6DP,GAA7D,EAAkEC,UAAlE,CAAP;EACH,CAFM;;EAIAC,sBAAP,UAAkBM,GAAlB,EAA6B;IACzB,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAb;IACA,IAAMI,GAAG,GAAG,IAAIV,QAAJ,CACRO,IAAI,CAACb,EADG,EAERa,IAAI,CAACZ,SAFG,EAGRY,IAAI,CAACX,MAHG,EAIR,6BAAYW,IAAI,CAACV,IAAjB,CAJQ,EAKRU,IAAI,CAACT,GALG,EAMRS,IAAI,CAACI,YANG,CAAZ;IASAD,GAAG,CAACE,SAAJ,GAAgBL,IAAI,CAACK,SAArB;IAEA,OAAOF,GAAP;EACH,CAdM;;EAgBPV;IACI,OAAO;MACHa,UAAU,EAAE,KAAKnB,EADd;MAEHK,UAAU,EAAE,KAAKA,UAFd;MAGHJ,SAAS,EAAE,KAAKA,SAHb;MAIHG,GAAG,EAAE,KAAKA,GAJP;MAKHc,SAAS,EAAE,KAAKA;IALb,CAAP;EAOH,CARD;;EAUAZ;IACI,OAAO,KAAKL,SAAL,GAAiB,KAAKG,GAAtB,GAA4BI,IAAI,CAACC,GAAL,EAAnC;EACH,CAFD;;EAIAH;IACI,OAAO,KAAKc,SAAL,MAAoB,CAA3B;EACH,CAFD;;EAIAd;IACI,IAAMU,GAAG,GAAG,IAAIV,QAAJ,CAAa,KAAKN,EAAlB,EAAsB,KAAKC,SAA3B,EAAsC,KAAKC,MAA3C,EAAmD,KAAKC,IAAxD,EAA8D,KAAKC,GAAnE,EAAwE,KAAKC,UAA7E,CAAZ;IAEAW,GAAG,CAACE,SAAJ,GAAgB,KAAKA,SAArB;IACAF,GAAG,CAACK,WAAJ,GAAkB,KAAKA,WAAvB;IACA,OAAOL,GAAP;EACH,CAND;;EAQAV;IACI,OAAOQ,IAAI,CAACQ,SAAL,CAAe;MAClBC,MAAM,EAAE,UADU;MAElBvB,EAAE,EAAE,KAAKA,EAFS;MAGlBiB,YAAY,EAAE,KAAKZ,UAHD;MAIlBJ,SAAS,EAAE,KAAKA,SAJE;MAKlBG,GAAG,EAAE,KAAKA,GALQ;MAMlBF,MAAM,EAAE,KAAKA,MANK;MAOlB;MACAgB,SAAS,EAAE,EARO;MASlBf,IAAI,EAAE,KAAKA,IAAL,IAAa,+BAAc,KAAKA,IAAnB;IATD,CAAf,CAAP;EAWH,CAZD;;EAcAG,qCAAMkB,KAAN,EAAuBC,OAAvB,EAAsC;IAClC,IAAIC,EAAJ;IACA,IAAIvB,IAAJ;;IACA,QAAQqB,KAAR;MACI,KAAK,OAAL;QACIE,EAAE,GAAGC,mBAAIC,KAAT;QACAzB,IAAI,GAAG,0BAAa,KAAKA,IAAlB,CAAP;QACA;;MACJ,KAAK,OAAL;QACIuB,EAAE,GAAGC,mBAAIE,KAAT;QACA;;MACJ,KAAK,MAAL;MACA,KAAK,OAAL;QACIH,EAAE,GAAGC,mBAAIG,IAAT;QACA;;MACJ,KAAK,MAAL;QACIJ,EAAE,GAAGC,mBAAII,IAAT;QACA;;MACJ;QACI;IAhBR;;IAmBAL,EAAE,CACED,OADF,EAEE,qBAAQ;MACJzB,EAAE,EAAE,KAAKA,EADL;MAEJiB,YAAY,EAAE,KAAKZ,UAFf;MAGJJ,SAAS,EAAE,KAAKA,SAHZ;MAIJG,GAAG,EAAE,KAAKA,GAJN;MAKJF,MAAM,EAAE,KAAKA,MALT;MAMJgB,SAAS,EAAE,KAAKA,SANZ;MAOJG,WAAW,EAAE,KAAKA,WAPd;MAQJlB,IAAI;IARA,CAAR,CAFF,CAAF;EAaH,CAnCD;;EAoCJ;AAAC,CA9GD;;AAAa6B;;AA8Hb,SAASzB,OAAT,GAAgB;EACZ,OAAO,gBAAP;AACH","names":["id","timestamp","script","data","ttl","initPeerId","Particle","genUUID","Date","now","Buffer_1","from","str","json","JSON","parse","res","init_peer_id","signature","particleId","actualTtl","callResults","stringify","action","level","message","fn","loglevel_1","debug","error","info","warn","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/@fluencelabs/fluence/src/internal/Particle.ts"],"sourcesContent":["/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { fromByteArray, toByteArray } from 'base64-js';\nimport log from 'loglevel';\nimport { ParticleContext } from './commonTypes';\nimport { dataToString, jsonify } from './utils';\nimport Buffer from './Buffer';\nimport { CallResultsArray, LogLevel } from '@fluencelabs/avm';\n\nexport class Particle {\n    // TODO: make it not optional (should be added to the constructor)\n    signature?: string;\n    callResults: CallResultsArray = [];\n\n    constructor(\n        public id: string,\n        public timestamp: number,\n        public script: string,\n        public data: Uint8Array,\n        public ttl: number,\n        public initPeerId: string,\n    ) {}\n\n    static createNew(script: string, ttl: number, initPeerId: string): Particle {\n        return new Particle(genUUID(), Date.now(), script, Buffer.from([]), ttl, initPeerId);\n    }\n\n    static fromString(str: string): Particle {\n        const json = JSON.parse(str);\n        const res = new Particle(\n            json.id,\n            json.timestamp,\n            json.script,\n            toByteArray(json.data),\n            json.ttl,\n            json.init_peer_id,\n        );\n\n        res.signature = json.signature;\n\n        return res;\n    }\n\n    getParticleContext(): ParticleContext {\n        return {\n            particleId: this.id,\n            initPeerId: this.initPeerId,\n            timestamp: this.timestamp,\n            ttl: this.ttl,\n            signature: this.signature,\n        };\n    }\n\n    actualTtl(): number {\n        return this.timestamp + this.ttl - Date.now();\n    }\n\n    hasExpired(): boolean {\n        return this.actualTtl() <= 0;\n    }\n\n    clone(): Particle {\n        const res = new Particle(this.id, this.timestamp, this.script, this.data, this.ttl, this.initPeerId);\n\n        res.signature = this.signature;\n        res.callResults = this.callResults;\n        return res;\n    }\n\n    toString(): string {\n        return JSON.stringify({\n            action: 'Particle',\n            id: this.id,\n            init_peer_id: this.initPeerId,\n            timestamp: this.timestamp,\n            ttl: this.ttl,\n            script: this.script,\n            // TODO: copy signature from a particle after signatures will be implemented on nodes\n            signature: [],\n            data: this.data && fromByteArray(this.data),\n        });\n    }\n\n    logTo(level: LogLevel, message: string) {\n        let fn;\n        let data: string | undefined;\n        switch (level) {\n            case 'debug':\n                fn = log.debug;\n                data = dataToString(this.data);\n                break;\n            case 'error':\n                fn = log.error;\n                break;\n            case 'info':\n            case 'trace':\n                fn = log.info;\n                break;\n            case 'warn':\n                fn = log.warn;\n                break;\n            default:\n                return;\n        }\n\n        fn(\n            message,\n            jsonify({\n                id: this.id,\n                init_peer_id: this.initPeerId,\n                timestamp: this.timestamp,\n                ttl: this.ttl,\n                script: this.script,\n                signature: this.signature,\n                callResults: this.callResults,\n                data,\n            }),\n        );\n    }\n}\n\nexport type ParticleExecutionStage =\n    | { stage: 'received' }\n    | { stage: 'interpreted' }\n    | { stage: 'interpreterError'; errorMessage: string }\n    | { stage: 'localWorkDone' }\n    | { stage: 'sent' }\n    | { stage: 'sendingError' }\n    | { stage: 'expired' };\n\nexport interface ParticleQueueItem {\n    particle: Particle;\n    onStageChange: (state: ParticleExecutionStage) => void;\n}\n\nfunction genUUID() {\n    return uuidv4();\n}\n"]},"metadata":{},"sourceType":"script"}