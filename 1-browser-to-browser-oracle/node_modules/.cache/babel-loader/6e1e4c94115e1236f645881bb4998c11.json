{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst {\n  messages,\n  codes\n} = require('../errors');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/peer-routing/types').PeerRouting} PeerRoutingModule\n */\n\n/**\n * Wrapper class to convert events into returned values\n *\n * @implements {PeerRoutingModule}\n */\n\n\nclass DHTPeerRouting {\n  /**\n   * @param {import('libp2p-kad-dht').DHT} dht\n   */\n  constructor(dht) {\n    this._dht = dht;\n  }\n  /**\n   * @param {PeerId} peerId\n   * @param {any} options\n   */\n\n\n  async findPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const event of this._dht.findPeer(peerId, options)) {\n      if (event.name === 'FINAL_PEER') {\n        return event.peer;\n      }\n    }\n\n    throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n  }\n  /**\n   * @param {Uint8Array} key\n   * @param {any} options\n   */\n\n\n  async *getClosestPeers(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const event of this._dht.getClosestPeers(key, options)) {\n      if (event.name === 'PEER_RESPONSE') {\n        yield* event.closer;\n      }\n    }\n  }\n\n}\n\nmodule.exports = {\n  DHTPeerRouting\n};","map":{"version":3,"names":["errCode","require","messages","codes","DHTPeerRouting","constructor","dht","_dht","findPeer","peerId","options","event","name","peer","Error","NOT_FOUND","ERR_NOT_FOUND","getClosestPeers","key","closer","module","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/libp2p/src/dht/dht-peer-routing.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { messages, codes } = require('../errors')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/peer-routing/types').PeerRouting} PeerRoutingModule\n */\n\n/**\n * Wrapper class to convert events into returned values\n *\n * @implements {PeerRoutingModule}\n */\nclass DHTPeerRouting {\n  /**\n   * @param {import('libp2p-kad-dht').DHT} dht\n   */\n  constructor (dht) {\n    this._dht = dht\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {any} options\n   */\n  async findPeer (peerId, options = {}) {\n    for await (const event of this._dht.findPeer(peerId, options)) {\n      if (event.name === 'FINAL_PEER') {\n        return event.peer\n      }\n    }\n\n    throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND)\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @param {any} options\n   */\n  async * getClosestPeers (key, options = {}) {\n    for await (const event of this._dht.getClosestPeers(key, options)) {\n      if (event.name === 'PEER_RESPONSE') {\n        yield * event.closer\n      }\n    }\n  }\n}\n\nmodule.exports = { DHTPeerRouting }\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;EAAEC,QAAF;EAAYC;AAAZ,IAAsBF,OAAO,CAAC,WAAD,CAAnC;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,cAAN,CAAqB;EACnB;AACF;AACA;EACEC,WAAW,CAAEC,GAAF,EAAO;IAChB,KAAKC,IAAL,GAAYD,GAAZ;EACD;EAED;AACF;AACA;AACA;;;EACgB,MAARE,QAAQ,CAAEC,MAAF,EAAwB;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACpC,WAAW,MAAMC,KAAjB,IAA0B,KAAKJ,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,EAA2BC,OAA3B,CAA1B,EAA+D;MAC7D,IAAIC,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;QAC/B,OAAOD,KAAK,CAACE,IAAb;MACD;IACF;;IAED,MAAMb,OAAO,CAAC,IAAIc,KAAJ,CAAUZ,QAAQ,CAACa,SAAnB,CAAD,EAAgCZ,KAAK,CAACa,aAAtC,CAAb;EACD;EAED;AACF;AACA;AACA;;;EACyB,OAAfC,eAAe,CAAEC,GAAF,EAAqB;IAAA,IAAdR,OAAc,uEAAJ,EAAI;;IAC1C,WAAW,MAAMC,KAAjB,IAA0B,KAAKJ,IAAL,CAAUU,eAAV,CAA0BC,GAA1B,EAA+BR,OAA/B,CAA1B,EAAmE;MACjE,IAAIC,KAAK,CAACC,IAAN,KAAe,eAAnB,EAAoC;QAClC,OAAQD,KAAK,CAACQ,MAAd;MACD;IACF;EACF;;AAhCkB;;AAmCrBC,MAAM,CAACC,OAAP,GAAiB;EAAEjB;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}