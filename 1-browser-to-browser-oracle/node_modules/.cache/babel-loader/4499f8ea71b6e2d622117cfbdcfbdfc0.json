{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.throwIfEmpty = void 0;\n\nvar EmptyError_1 = require(\"../util/EmptyError\");\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nfunction throwIfEmpty(errorFactory) {\n  if (errorFactory === void 0) {\n    errorFactory = defaultErrorFactory;\n  }\n\n  return lift_1.operate(function (source, subscriber) {\n    var hasValue = false;\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      subscriber.next(value);\n    }, function () {\n      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());\n    }));\n  });\n}\n\nexports.throwIfEmpty = throwIfEmpty;\n\nfunction defaultErrorFactory() {\n  return new EmptyError_1.EmptyError();\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AAsCA,SAAgBA,YAAhB,CAAgCC,YAAhC,EAA6E;EAA7C;IAAAA;EAA6C;;EAC3E,OAAOC,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;IAChC,IAAIC,QAAQ,GAAG,KAAf;IACAF,MAAM,CAACG,SAAP,CACEC,8CACEH,UADF,EAEE,UAACI,KAAD,EAAM;MACJH,QAAQ,GAAG,IAAX;MACAD,UAAU,CAACK,IAAX,CAAgBD,KAAhB;IACD,CALH,EAME;MAAM,OAACH,QAAQ,GAAGD,UAAU,CAACM,QAAX,EAAH,GAA2BN,UAAU,CAACO,KAAX,CAAiBV,YAAY,EAA7B,CAApC;IAAqE,CAN7E,CADF;EAUD,CAZM,CAAP;AAaD;;AAdDW;;AAgBA,SAASC,mBAAT,GAA4B;EAC1B,OAAO,IAAIC,uBAAJ,EAAP;AACD","names":["throwIfEmpty","errorFactory","lift_1","source","subscriber","hasValue","subscribe","OperatorSubscriber_1","value","next","complete","error","exports","defaultErrorFactory","EmptyError_1"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/operators/throwIfEmpty.ts"],"sourcesContent":["import { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n *\n * Throw an error if the document wasn't clicked within 1 second\n *\n * ```ts\n * import { fromEvent, takeUntil, timer, throwIfEmpty } from 'rxjs';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(() => new Error('The document was not clicked within 1 second'))\n * )\n * .subscribe({\n *   next() {\n *    console.log('The document was clicked');\n *   },\n *   error(err) {\n *     console.error(err.message);\n *   }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n * @return A function that returns an Observable that throws an error if the\n * source Observable completed without emitting.\n */\nexport function throwIfEmpty<T>(errorFactory: () => any = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\n      )\n    );\n  });\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n"]},"metadata":{},"sourceType":"script"}