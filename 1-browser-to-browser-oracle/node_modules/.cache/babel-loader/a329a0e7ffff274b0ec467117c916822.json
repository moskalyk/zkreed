{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scheduleAsyncIterable = void 0;\n\nvar Observable_1 = require(\"../Observable\");\n\nvar executeSchedule_1 = require(\"../util/executeSchedule\");\n\nfunction scheduleAsyncIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable_1.Observable(function (subscriber) {\n    executeSchedule_1.executeSchedule(subscriber, scheduler, function () {\n      var iterator = input[Symbol.asyncIterator]();\n      executeSchedule_1.executeSchedule(subscriber, scheduler, function () {\n        iterator.next().then(function (result) {\n          if (result.done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(result.value);\n          }\n        });\n      }, 0, true);\n    });\n  });\n}\n\nexports.scheduleAsyncIterable = scheduleAsyncIterable;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAEA,SAAgBA,qBAAhB,CAAyCC,KAAzC,EAAkEC,SAAlE,EAA0F;EACxF,IAAI,CAACD,KAAL,EAAY;IACV,MAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;EACD;;EACD,OAAO,IAAIC,uBAAJ,CAAkB,UAACC,UAAD,EAAW;IAClCC,kCAAgBD,UAAhB,EAA4BH,SAA5B,EAAuC;MACrC,IAAMK,QAAQ,GAAGN,KAAK,CAACO,MAAM,CAACC,aAAR,CAAL,EAAjB;MACAH,kCACED,UADF,EAEEH,SAFF,EAGE;QACEK,QAAQ,CAACG,IAAT,GAAgBC,IAAhB,CAAqB,UAACC,MAAD,EAAO;UAC1B,IAAIA,MAAM,CAACC,IAAX,EAAiB;YAGfR,UAAU,CAACS,QAAX;UACD,CAJD,MAIO;YACLT,UAAU,CAACK,IAAX,CAAgBE,MAAM,CAACG,KAAvB;UACD;QACF,CARD;MASD,CAbH,EAcE,CAdF,EAeE,IAfF;IAiBD,CAnBD;EAoBD,CArBM,CAAP;AAsBD;;AA1BDC","names":["scheduleAsyncIterable","input","scheduler","Error","Observable_1","subscriber","executeSchedule_1","iterator","Symbol","asyncIterator","next","then","result","done","complete","value","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/scheduled/scheduleAsyncIterable.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}