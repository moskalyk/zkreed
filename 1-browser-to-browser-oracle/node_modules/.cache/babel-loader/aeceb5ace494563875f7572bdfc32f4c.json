{"ast":null,"code":"'use strict'; // @ts-ignore node-forge types not exported\n\nrequire('node-forge/lib/pkcs7'); // @ts-ignore node-forge types not exported\n\n\nrequire('node-forge/lib/pbe'); // @ts-ignore node-forge types not exported\n\n\nconst forge = require('node-forge/lib/forge');\n\nconst {\n  certificateForKey,\n  findAsync\n} = require('./util');\n\nconst errcode = require('err-code');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  codes\n} = require('../errors');\n\nconst privates = new WeakMap();\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {import('./index')} keychain - the available keys\n   * @param {string} dek\n   */\n  constructor(keychain, dek) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), codes.ERR_KEYCHAIN_REQUIRED);\n    }\n\n    this.keychain = keychain;\n    privates.set(this, {\n      dek\n    });\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Uint8Array} plain - The data to encrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  async encrypt(name, plain) {\n    if (!(plain instanceof Uint8Array)) {\n      throw errcode(new Error('Plain data must be a Uint8Array'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    const key = await this.keychain.findKeyByName(name);\n    const pem = await this.keychain._getPrivateKey(name);\n    /** @type {string} */\n\n    const dek = privates.get(this).dek;\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n    const certificate = await certificateForKey(key, privateKey); // create a p7 enveloped message\n\n    const p7 = forge.pkcs7.createEnvelopedData();\n    p7.addRecipient(certificate);\n    p7.content = forge.util.createBuffer(plain);\n    p7.encrypt(); // convert message to DER\n\n    const der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n    return uint8ArrayFromString(der, 'ascii');\n  }\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  async decrypt(cmsData) {\n    if (!(cmsData instanceof Uint8Array)) {\n      throw errcode(new Error('CMS data is required'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    let cms;\n\n    try {\n      const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'));\n      const obj = forge.asn1.fromDer(buf); // @ts-ignore not defined\n\n      cms = forge.pkcs7.messageFromAsn1(obj);\n    } catch (\n    /** @type {any} */\n    err) {\n      throw errcode(new Error('Invalid CMS: ' + err.message), codes.ERR_INVALID_CMS);\n    } // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n\n\n    const recipients = cms.recipients // @ts-ignore cms types not defined\n    .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs')) // @ts-ignore cms types not defined\n    .filter(r => r.issuer.find(a => a.shortName === 'CN')) // @ts-ignore cms types not defined\n    .map(r => {\n      return {\n        recipient: r,\n        // @ts-ignore cms types not defined\n        keyId: r.issuer.find(a => a.shortName === 'CN').value\n      };\n    });\n    const r = await findAsync(recipients, async recipient => {\n      try {\n        const key = await this.keychain.findKeyById(recipient.keyId);\n        if (key) return true;\n      } catch (\n      /** @type {any} */\n      err) {\n        return false;\n      }\n\n      return false;\n    });\n\n    if (!r) {\n      // @ts-ignore cms types not defined\n      const missingKeys = recipients.map(r => r.keyId);\n      throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), codes.ERR_MISSING_KEYS, {\n        missingKeys\n      });\n    }\n\n    const key = await this.keychain.findKeyById(r.keyId);\n\n    if (!key) {\n      throw errcode(new Error('No key available to decrypto'), codes.ERR_NO_KEY);\n    }\n\n    const pem = await this.keychain._getPrivateKey(key.name);\n    const dek = privates.get(this).dek;\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n    cms.decrypt(r.recipient, privateKey);\n    return uint8ArrayFromString(cms.content.getBytes(), 'ascii');\n  }\n\n}\n\nmodule.exports = CMS;","map":{"version":3,"names":["require","forge","certificateForKey","findAsync","errcode","fromString","uint8ArrayFromString","toString","uint8ArrayToString","codes","privates","WeakMap","CMS","constructor","keychain","dek","Error","ERR_KEYCHAIN_REQUIRED","set","encrypt","name","plain","Uint8Array","ERR_INVALID_PARAMETERS","key","findKeyByName","pem","_getPrivateKey","get","privateKey","pki","decryptRsaPrivateKey","certificate","p7","pkcs7","createEnvelopedData","addRecipient","content","util","createBuffer","der","asn1","toDer","toAsn1","getBytes","decrypt","cmsData","cms","buf","obj","fromDer","messageFromAsn1","err","message","ERR_INVALID_CMS","recipients","filter","r","issuer","find","a","shortName","value","map","recipient","keyId","findKeyById","missingKeys","join","ERR_MISSING_KEYS","ERR_NO_KEY","module","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/libp2p/src/keychain/cms.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore node-forge types not exported\nrequire('node-forge/lib/pkcs7')\n// @ts-ignore node-forge types not exported\nrequire('node-forge/lib/pbe')\n// @ts-ignore node-forge types not exported\nconst forge = require('node-forge/lib/forge')\nconst { certificateForKey, findAsync } = require('./util')\nconst errcode = require('err-code')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { codes } = require('../errors')\n\nconst privates = new WeakMap()\n\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {import('./index')} keychain - the available keys\n   * @param {string} dek\n   */\n  constructor (keychain, dek) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), codes.ERR_KEYCHAIN_REQUIRED)\n    }\n\n    this.keychain = keychain\n    privates.set(this, { dek })\n  }\n\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Uint8Array} plain - The data to encrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n  async encrypt (name, plain) {\n    if (!(plain instanceof Uint8Array)) {\n      throw errcode(new Error('Plain data must be a Uint8Array'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    const key = await this.keychain.findKeyByName(name)\n    const pem = await this.keychain._getPrivateKey(name)\n    /** @type {string} */\n    const dek = privates.get(this).dek\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek)\n    const certificate = await certificateForKey(key, privateKey)\n\n    // create a p7 enveloped message\n    const p7 = forge.pkcs7.createEnvelopedData()\n    p7.addRecipient(certificate)\n    p7.content = forge.util.createBuffer(plain)\n    p7.encrypt()\n\n    // convert message to DER\n    const der = forge.asn1.toDer(p7.toAsn1()).getBytes()\n    return uint8ArrayFromString(der, 'ascii')\n  }\n\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n  async decrypt (cmsData) {\n    if (!(cmsData instanceof Uint8Array)) {\n      throw errcode(new Error('CMS data is required'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    let cms\n    try {\n      const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'))\n      const obj = forge.asn1.fromDer(buf)\n      // @ts-ignore not defined\n      cms = forge.pkcs7.messageFromAsn1(obj)\n    } catch (/** @type {any} */ err) {\n      throw errcode(new Error('Invalid CMS: ' + err.message), codes.ERR_INVALID_CMS)\n    }\n\n    // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n    const recipients = cms.recipients\n      // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n      // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n      // @ts-ignore cms types not defined\n      .map(r => {\n        return {\n          recipient: r,\n          // @ts-ignore cms types not defined\n          keyId: r.issuer.find(a => a.shortName === 'CN').value\n        }\n      })\n\n    const r = await findAsync(recipients, async (recipient) => {\n      try {\n        const key = await this.keychain.findKeyById(recipient.keyId)\n        if (key) return true\n      } catch (/** @type {any} */ err) {\n        return false\n      }\n      return false\n    })\n\n    if (!r) {\n      // @ts-ignore cms types not defined\n      const missingKeys = recipients.map(r => r.keyId)\n      throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), codes.ERR_MISSING_KEYS, {\n        missingKeys\n      })\n    }\n\n    const key = await this.keychain.findKeyById(r.keyId)\n\n    if (!key) {\n      throw errcode(new Error('No key available to decrypto'), codes.ERR_NO_KEY)\n    }\n\n    const pem = await this.keychain._getPrivateKey(key.name)\n    const dek = privates.get(this).dek\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek)\n    cms.decrypt(r.recipient, privateKey)\n    return uint8ArrayFromString(cms.content.getBytes(), 'ascii')\n  }\n}\n\nmodule.exports = CMS\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}