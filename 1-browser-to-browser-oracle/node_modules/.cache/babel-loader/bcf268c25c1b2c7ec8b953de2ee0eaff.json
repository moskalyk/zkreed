{"ast":null,"code":"'use strict';\n\nconst mergeOptions = require('merge-options'); // @ts-ignore no types in multiaddr path\n\n\nconst {\n  dnsaddrResolver\n} = require('multiaddr/src/resolvers');\n\nconst Constants = require('./constants');\n\nconst {\n  AGENT_VERSION\n} = require('./identify/consts');\n\nconst RelayConstants = require('./circuit/constants');\n\nconst {\n  publicAddressesFirst\n} = require('libp2p-utils/src/address-sort');\n\nconst {\n  FaultTolerance\n} = require('./transport-manager');\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('./types').ConnectionGater} ConnectionGater\n * @typedef {import('.').Libp2pOptions} Libp2pOptions\n * @typedef {import('.').constructorOptions} constructorOptions\n */\n\n\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (\n    /** @type {Multiaddr[]} */\n    multiaddrs) => multiaddrs\n  },\n  connectionManager: {\n    minConnections: 25\n  },\n  connectionGater:\n  /** @type {ConnectionGater} */\n  {},\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  dialer: {\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  host: {\n    agentVersion: AGENT_VERSION\n  },\n  metrics: {\n    enabled: false\n  },\n  peerStore: {\n    persistence: false,\n    threshold: 5\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  config: {\n    protocolPrefix: 'ipfs',\n    dht: {\n      enabled: false,\n      kBucketSize: 20\n    },\n    nat: {\n      enabled: true,\n      ttl: 7200,\n      keepAlive: true,\n      gateway: null,\n      externalIp: null,\n      pmp: {\n        enabled: false\n      }\n    },\n    peerDiscovery: {\n      autoDial: true\n    },\n    pubsub: {\n      enabled: true\n    },\n    relay: {\n      enabled: true,\n      advertise: {\n        bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n        enabled: false,\n        ttl: RelayConstants.ADVERTISE_TTL\n      },\n      hop: {\n        enabled: false,\n        active: false\n      },\n      autoRelay: {\n        enabled: false,\n        maxListeners: 2\n      }\n    },\n    transport: {}\n  }\n};\n/**\n * @param {Libp2pOptions} opts\n * @returns {DefaultConfig & Libp2pOptions & constructorOptions}\n */\n\nmodule.exports.validate = opts => {\n  /** @type {DefaultConfig & Libp2pOptions & constructorOptions} */\n  const resultingOptions = mergeOptions(DefaultConfig, opts);\n  if (resultingOptions.modules.transport.length < 1) throw new Error(\"'options.modules.transport' must contain at least 1 transport\");\n  return resultingOptions;\n};","map":{"version":3,"names":["mergeOptions","require","dnsaddrResolver","Constants","AGENT_VERSION","RelayConstants","publicAddressesFirst","FaultTolerance","DefaultConfig","addresses","listen","announce","noAnnounce","announceFilter","multiaddrs","connectionManager","minConnections","connectionGater","transportManager","faultTolerance","FATAL_ALL","dialer","maxParallelDials","MAX_PARALLEL_DIALS","maxDialsPerPeer","MAX_PER_PEER_DIALS","dialTimeout","DIAL_TIMEOUT","resolvers","dnsaddr","addressSorter","host","agentVersion","metrics","enabled","peerStore","persistence","threshold","peerRouting","refreshManager","interval","bootDelay","config","protocolPrefix","dht","kBucketSize","nat","ttl","keepAlive","gateway","externalIp","pmp","peerDiscovery","autoDial","pubsub","relay","advertise","ADVERTISE_BOOT_DELAY","ADVERTISE_TTL","hop","active","autoRelay","maxListeners","transport","module","exports","validate","opts","resultingOptions","modules","length","Error"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/libp2p/src/config.js"],"sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options')\n// @ts-ignore no types in multiaddr path\nconst { dnsaddrResolver } = require('multiaddr/src/resolvers')\n\nconst Constants = require('./constants')\nconst { AGENT_VERSION } = require('./identify/consts')\nconst RelayConstants = require('./circuit/constants')\n\nconst { publicAddressesFirst } = require('libp2p-utils/src/address-sort')\nconst { FaultTolerance } = require('./transport-manager')\n\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('./types').ConnectionGater} ConnectionGater\n * @typedef {import('.').Libp2pOptions} Libp2pOptions\n * @typedef {import('.').constructorOptions} constructorOptions\n */\n\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (/** @type {Multiaddr[]} */ multiaddrs) => multiaddrs\n  },\n  connectionManager: {\n    minConnections: 25\n  },\n  connectionGater: /** @type {ConnectionGater} */ {},\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  dialer: {\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  host: {\n    agentVersion: AGENT_VERSION\n  },\n  metrics: {\n    enabled: false\n  },\n  peerStore: {\n    persistence: false,\n    threshold: 5\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  config: {\n    protocolPrefix: 'ipfs',\n    dht: {\n      enabled: false,\n      kBucketSize: 20\n    },\n    nat: {\n      enabled: true,\n      ttl: 7200,\n      keepAlive: true,\n      gateway: null,\n      externalIp: null,\n      pmp: {\n        enabled: false\n      }\n    },\n    peerDiscovery: {\n      autoDial: true\n    },\n    pubsub: {\n      enabled: true\n    },\n    relay: {\n      enabled: true,\n      advertise: {\n        bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n        enabled: false,\n        ttl: RelayConstants.ADVERTISE_TTL\n      },\n      hop: {\n        enabled: false,\n        active: false\n      },\n      autoRelay: {\n        enabled: false,\n        maxListeners: 2\n      }\n    },\n    transport: {}\n  }\n}\n\n/**\n * @param {Libp2pOptions} opts\n * @returns {DefaultConfig & Libp2pOptions & constructorOptions}\n */\nmodule.exports.validate = (opts) => {\n  /** @type {DefaultConfig & Libp2pOptions & constructorOptions} */\n  const resultingOptions = mergeOptions(DefaultConfig, opts)\n\n  if (resultingOptions.modules.transport.length < 1) throw new Error(\"'options.modules.transport' must contain at least 1 transport\")\n\n  return resultingOptions\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}