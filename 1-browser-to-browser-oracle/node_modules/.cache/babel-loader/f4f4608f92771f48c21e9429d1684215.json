{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.repeat = void 0;\n\nvar empty_1 = require(\"../observable/empty\");\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nvar timer_1 = require(\"../observable/timer\");\n\nfunction repeat(countOrConfig) {\n  var _a;\n\n  var count = Infinity;\n  var delay;\n\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      _a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay;\n    } else {\n      count = countOrConfig;\n    }\n  }\n\n  return count <= 0 ? function () {\n    return empty_1.EMPTY;\n  } : lift_1.operate(function (source, subscriber) {\n    var soFar = 0;\n    var sourceSub;\n\n    var resubscribe = function () {\n      sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n      sourceSub = null;\n\n      if (delay != null) {\n        var notifier = typeof delay === 'number' ? timer_1.timer(delay) : innerFrom_1.innerFrom(delay(soFar));\n        var notifierSubscriber_1 = OperatorSubscriber_1.createOperatorSubscriber(subscriber, function () {\n          notifierSubscriber_1.unsubscribe();\n          subscribeToSource();\n        });\n        notifier.subscribe(notifierSubscriber_1);\n      } else {\n        subscribeToSource();\n      }\n    };\n\n    var subscribeToSource = function () {\n      var syncUnsub = false;\n      sourceSub = source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, undefined, function () {\n        if (++soFar < count) {\n          if (sourceSub) {\n            resubscribe();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n\n      if (syncUnsub) {\n        resubscribe();\n      }\n    };\n\n    subscribeToSource();\n  });\n}\n\nexports.repeat = repeat;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AA6GA,SAAgBA,MAAhB,CAA0BC,aAA1B,EAA+D;;;EAC7D,IAAIC,KAAK,GAAGC,QAAZ;EACA,IAAIC,KAAJ;;EAEA,IAAIH,aAAa,IAAI,IAArB,EAA2B;IACzB,IAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;MAClCI,KAA4BJ,aAAa,MAAzC,OAAK,mBAAGE,QAAH,GAAWE,EAAhB,EAAkBD,KAAK,GAAKH,aAAa,MAA5C;IACD,CAFD,MAEO;MACLC,KAAK,GAAGD,aAAR;IACD;EACF;;EAED,OAAOC,KAAK,IAAI,CAAT,GACH;IAAM;EAAK,CADR,GAEHI,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;IACzB,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAIC,SAAJ;;IAEA,IAAMC,WAAW,GAAG;MAClBD,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAEE,WAAX;MACAF,SAAS,GAAG,IAAZ;;MACA,IAAIN,KAAK,IAAI,IAAb,EAAmB;QACjB,IAAMS,QAAQ,GAAG,OAAOT,KAAP,KAAiB,QAAjB,GAA4BU,cAAMV,KAAN,CAA5B,GAA2CW,sBAAUX,KAAK,CAACK,KAAD,CAAf,CAA5D;QACA,IAAMO,oBAAkB,GAAGC,8CAAyBT,UAAzB,EAAqC;UAC9DQ,oBAAkB,CAACJ,WAAnB;UACAM,iBAAiB;QAClB,CAH0B,CAA3B;QAIAL,QAAQ,CAACM,SAAT,CAAmBH,oBAAnB;MACD,CAPD,MAOO;QACLE,iBAAiB;MAClB;IACF,CAbD;;IAeA,IAAMA,iBAAiB,GAAG;MACxB,IAAIE,SAAS,GAAG,KAAhB;MACAV,SAAS,GAAGH,MAAM,CAACY,SAAP,CACVF,8CAAyBT,UAAzB,EAAqCa,SAArC,EAAgD;QAC9C,IAAI,EAAEZ,KAAF,GAAUP,KAAd,EAAqB;UACnB,IAAIQ,SAAJ,EAAe;YACbC,WAAW;UACZ,CAFD,MAEO;YACLS,SAAS,GAAG,IAAZ;UACD;QACF,CAND,MAMO;UACLZ,UAAU,CAACc,QAAX;QACD;MACF,CAVD,CADU,CAAZ;;MAcA,IAAIF,SAAJ,EAAe;QACbT,WAAW;MACZ;IACF,CAnBD;;IAqBAO,iBAAiB;EAClB,CAzCD,CAFJ;AA4CD;;AAxDDK","names":["repeat","countOrConfig","count","Infinity","delay","_a","lift_1","source","subscriber","soFar","sourceSub","resubscribe","unsubscribe","notifier","timer_1","innerFrom_1","notifierSubscriber_1","OperatorSubscriber_1","subscribeToSource","subscribe","syncUnsub","undefined","complete","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/operators/repeat.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\n\nexport interface RepeatConfig {\n  /**\n   * The number of times to repeat the source. Defaults to `Infinity`.\n   */\n  count?: number;\n\n  /**\n   * If a `number`, will delay the repeat of the source by that number of milliseconds.\n   * If a function, it will provide the number of times the source has been subscribed to,\n   * and the return value should be a valid observable input that will notify when the source\n   * should be repeated. If the notifier observable is empty, the result will complete.\n   */\n  delay?: number | ((count: number) => ObservableInput<any>);\n}\n\n/**\n * Returns an Observable that will resubscribe to the source stream when the source stream completes.\n *\n * <span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\n *\n * ![](repeat.png)\n *\n * Repeat will output values from a source until the source completes, then it will resubscribe to the\n * source a specified number of times, with a specified delay. Repeat can be particularly useful in\n * combination with closing operators like {@link take}, {@link takeUntil}, {@link first}, or {@link takeWhile},\n * as it can be used to restart a source again from scratch.\n *\n * Repeat is very similar to {@link retry}, where {@link retry} will resubscribe to the source in the error case, but\n * `repeat` will resubscribe if the source completes.\n *\n * Note that `repeat` will _not_ catch errors. Use {@link retry} for that.\n *\n * - `repeat(0)` returns an empty observable\n * - `repeat()` will repeat forever\n * - `repeat({ delay: 200 })` will repeat forever, with a delay of 200ms between repetitions.\n * - `repeat({ count: 2, delay: 400 })` will repeat twice, with a delay of 400ms between repetitions.\n * - `repeat({ delay: (count) => timer(count * 1000) })` will repeat forever, but will have a delay that grows by one second for each repetition.\n *\n * ## Example\n *\n * Repeat a message stream\n *\n * ```ts\n * import { of, repeat } from 'rxjs';\n *\n * const source = of('Repeat message');\n * const result = source.pipe(repeat(3));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results\n * // 'Repeat message'\n * // 'Repeat message'\n * // 'Repeat message'\n * ```\n *\n * Repeat 3 values, 2 times\n *\n * ```ts\n * import { interval, take, repeat } from 'rxjs';\n *\n * const source = interval(1000);\n * const result = source.pipe(take(3), repeat(2));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results every second\n * // 0\n * // 1\n * // 2\n * // 0\n * // 1\n * // 2\n * ```\n *\n * Defining two complex repeats with delays on the same source.\n * Note that the second repeat cannot be called until the first\n * repeat as exhausted it's count.\n *\n * ```ts\n * import { defer, of, repeat } from 'rxjs';\n *\n * const source = defer(() => {\n *    return of(`Hello, it is ${new Date()}`)\n * });\n *\n * source.pipe(\n *    // Repeat 3 times with a delay of 1 second between repetitions\n *    repeat({\n *      count: 3,\n *      delay: 1000,\n *    }),\n *\n *    // *Then* repeat forever, but with an exponential step-back\n *    // maxing out at 1 minute.\n *    repeat({\n *      delay: (count) => timer(Math.min(60000, 2 ^ count * 1000))\n *    })\n * )\n * ```\n *\n * @see {@link repeatWhen}\n * @see {@link retry}\n *\n * @param count The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n */\nexport function repeat<T>(countOrConfig?: number | RepeatConfig): MonoTypeOperatorFunction<T> {\n  let count = Infinity;\n  let delay: RepeatConfig['delay'];\n\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      ({ count = Infinity, delay } = countOrConfig);\n    } else {\n      count = countOrConfig;\n    }\n  }\n\n  return count <= 0\n    ? () => EMPTY\n    : operate((source, subscriber) => {\n        let soFar = 0;\n        let sourceSub: Subscription | null;\n\n        const resubscribe = () => {\n          sourceSub?.unsubscribe();\n          sourceSub = null;\n          if (delay != null) {\n            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n              notifierSubscriber.unsubscribe();\n              subscribeToSource();\n            });\n            notifier.subscribe(notifierSubscriber);\n          } else {\n            subscribeToSource();\n          }\n        };\n\n        const subscribeToSource = () => {\n          let syncUnsub = false;\n          sourceSub = source.subscribe(\n            createOperatorSubscriber(subscriber, undefined, () => {\n              if (++soFar < count) {\n                if (sourceSub) {\n                  resubscribe();\n                } else {\n                  syncUnsub = true;\n                }\n              } else {\n                subscriber.complete();\n              }\n            })\n          );\n\n          if (syncUnsub) {\n            resubscribe();\n          }\n        };\n\n        subscribeToSource();\n      });\n}\n"]},"metadata":{},"sourceType":"script"}