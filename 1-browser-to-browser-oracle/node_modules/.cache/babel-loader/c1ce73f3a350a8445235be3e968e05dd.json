{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyPair = void 0;\n\nvar PeerId = __importStar(require(\"peer-id\"));\n\nvar libp2p_crypto_1 = require(\"libp2p-crypto\");\n\nvar KeyPair =\n/** @class */\nfunction () {\n  function KeyPair(libp2pPeerId) {\n    this.Libp2pPeerId = libp2pPeerId;\n  }\n  /**\n   * Generates new KeyPair from ed25519 private key represented as a 32 byte array\n   * @param key - Any sequence of 32 bytes\n   * @returns - Promise with the created KeyPair\n   */\n\n\n  KeyPair.fromEd25519SK = function (arr) {\n    return __awaiter(this, void 0, void 0, function () {\n      var privateKey, lib2p2Pid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , libp2p_crypto_1.keys.generateKeyPairFromSeed('Ed25519', arr, 256)];\n\n          case 1:\n            privateKey = _a.sent();\n            return [4\n            /*yield*/\n            , PeerId.createFromPrivKey(privateKey.bytes)];\n\n          case 2:\n            lib2p2Pid = _a.sent();\n            return [2\n            /*return*/\n            , new KeyPair(lib2p2Pid)];\n        }\n      });\n    });\n  };\n  /**\n   * Generates new KeyPair with a random secret key\n   * @returns - Promise with the created KeyPair\n   */\n\n\n  KeyPair.randomEd25519 = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var lib2p2Pid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , PeerId.create({\n              keyType: 'Ed25519'\n            })];\n\n          case 1:\n            lib2p2Pid = _a.sent();\n            return [2\n            /*return*/\n            , new KeyPair(lib2p2Pid)];\n        }\n      });\n    });\n  };\n\n  KeyPair.prototype.toB58String = function () {\n    return this.Libp2pPeerId.toB58String();\n  };\n  /**\n   * @returns 32 byte private key\n   */\n\n\n  KeyPair.prototype.toEd25519PrivateKey = function () {\n    return this.Libp2pPeerId.privKey.marshal().subarray(0, 32);\n  };\n\n  KeyPair.prototype.signBytes = function (data) {\n    return this.Libp2pPeerId.privKey.sign(data);\n  };\n\n  KeyPair.prototype.verify = function (data, signature) {\n    return this.Libp2pPeerId.privKey.public.verify(data, signature);\n  };\n\n  return KeyPair;\n}();\n\nexports.KeyPair = KeyPair;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;;AAEA;AAAA;AAAA;EAMI,iBAAYA,YAAZ,EAAgC;IAC5B,KAAKC,YAAL,GAAoBD,YAApB;EACH;EAED;;;;;;;EAKaE,wBAAb,UAA2BC,GAA3B,EAA0C;;;;;;YAEnB;YAAA;YAAA,EAAMC,qBAAKC,uBAAL,CAA6B,SAA7B,EAAwCF,GAAxC,EAA6C,GAA7C,CAAN;;;YAAbG,UAAU,GAAGC,SAAb;YACY;YAAA;YAAA,EAAMC,MAAM,CAACC,iBAAP,CAAyBH,UAAU,CAACI,KAApC,CAAN;;;YAAZC,SAAS,GAAGJ,SAAZ;YACN;YAAA;YAAA,EAAO,IAAIL,OAAJ,CAAYS,SAAZ,CAAP;;;;EACH,CALY;EAOb;;;;;;EAIaT,wBAAb;;;;;;YACsB;YAAA;YAAA,EAAMM,MAAM,CAACI,MAAP,CAAc;cAAEC,OAAO,EAAE;YAAX,CAAd,CAAN;;;YAAZF,SAAS,GAAGJ,SAAZ;YACN;YAAA;YAAA,EAAO,IAAIL,OAAJ,CAAYS,SAAZ,CAAP;;;;EACH,CAHY;;EAKbT;IACI,OAAO,KAAKD,YAAL,CAAkBa,WAAlB,EAAP;EACH,CAFD;EAIA;;;;;EAGAZ;IACI,OAAO,KAAKD,YAAL,CAAkBc,OAAlB,CAA0BC,OAA1B,GAAoCC,QAApC,CAA6C,CAA7C,EAAgD,EAAhD,CAAP;EACH,CAFD;;EAIAf,wCAAUgB,IAAV,EAA0B;IACtB,OAAO,KAAKjB,YAAL,CAAkBc,OAAlB,CAA0BI,IAA1B,CAA+BD,IAA/B,CAAP;EACH,CAFD;;EAIAhB,qCAAOgB,IAAP,EAAyBE,SAAzB,EAA8C;IAC1C,OAAO,KAAKnB,YAAL,CAAkBc,OAAlB,CAA0BM,MAA1B,CAAiCC,MAAjC,CAAwCJ,IAAxC,EAA8CE,SAA9C,CAAP;EACH,CAFD;;EAGJ;AAAC,CAjDD;;AAAaG","names":["libp2pPeerId","Libp2pPeerId","KeyPair","arr","libp2p_crypto_1","generateKeyPairFromSeed","privateKey","_a","PeerId","createFromPrivKey","bytes","lib2p2Pid","create","keyType","toB58String","privKey","marshal","subarray","data","sign","signature","public","verify","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/@fluencelabs/fluence/src/internal/KeyPair.ts"],"sourcesContent":["/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as PeerId from 'peer-id';\nimport { keys } from 'libp2p-crypto';\n\nexport class KeyPair {\n    /**\n     * Key pair in libp2p format. Used for backward compatibility with the current FluencePeer implementation\n     */\n    public Libp2pPeerId: PeerId;\n\n    constructor(libp2pPeerId: PeerId) {\n        this.Libp2pPeerId = libp2pPeerId;\n    }\n\n    /**\n     * Generates new KeyPair from ed25519 private key represented as a 32 byte array\n     * @param key - Any sequence of 32 bytes\n     * @returns - Promise with the created KeyPair\n     */\n    static async fromEd25519SK(arr: Uint8Array): Promise<KeyPair> {\n        // generateKeyPairFromSeed takes seed and copies it to private key as is\n        const privateKey = await keys.generateKeyPairFromSeed('Ed25519', arr, 256);\n        const lib2p2Pid = await PeerId.createFromPrivKey(privateKey.bytes);\n        return new KeyPair(lib2p2Pid);\n    }\n\n    /**\n     * Generates new KeyPair with a random secret key\n     * @returns - Promise with the created KeyPair\n     */\n    static async randomEd25519(): Promise<KeyPair> {\n        const lib2p2Pid = await PeerId.create({ keyType: 'Ed25519' });\n        return new KeyPair(lib2p2Pid);\n    }\n\n    toB58String(): string {\n        return this.Libp2pPeerId.toB58String();\n    }\n\n    /**\n     * @returns 32 byte private key\n     */\n    toEd25519PrivateKey(): Uint8Array {\n        return this.Libp2pPeerId.privKey.marshal().subarray(0, 32);\n    }\n\n    signBytes(data: Uint8Array): Promise<Uint8Array> {\n        return this.Libp2pPeerId.privKey.sign(data);\n    }\n\n    verify(data: Uint8Array, signature: Uint8Array): Promise<boolean> {\n        return this.Libp2pPeerId.privKey.public.verify(data, signature);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}