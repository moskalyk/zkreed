{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fluence = exports.setLogLevel = exports.loadWasmFromServer = exports.loadWasmFromNpmPackage = exports.loadWasmFromFileSystem = exports.FluencePeer = exports.KeyPair = void 0;\n\nvar loglevel_1 = __importDefault(require(\"loglevel\"));\n\nvar FluencePeer_1 = require(\"./internal/FluencePeer\");\n\nvar KeyPair_1 = require(\"./internal/KeyPair\");\n\nObject.defineProperty(exports, \"KeyPair\", {\n  enumerable: true,\n  get: function () {\n    return KeyPair_1.KeyPair;\n  }\n});\n\nvar FluencePeer_2 = require(\"./internal/FluencePeer\");\n\nObject.defineProperty(exports, \"FluencePeer\", {\n  enumerable: true,\n  get: function () {\n    return FluencePeer_2.FluencePeer;\n  }\n});\n\nvar marine_js_1 = require(\"@fluencelabs/marine-js\");\n\nObject.defineProperty(exports, \"loadWasmFromFileSystem\", {\n  enumerable: true,\n  get: function () {\n    return marine_js_1.loadWasmFromFileSystem;\n  }\n});\nObject.defineProperty(exports, \"loadWasmFromNpmPackage\", {\n  enumerable: true,\n  get: function () {\n    return marine_js_1.loadWasmFromNpmPackage;\n  }\n});\nObject.defineProperty(exports, \"loadWasmFromServer\", {\n  enumerable: true,\n  get: function () {\n    return marine_js_1.loadWasmFromServer;\n  }\n});\n\nvar setLogLevel = function (level) {\n  loglevel_1.default.setLevel(level);\n};\n\nexports.setLogLevel = setLogLevel;\nloglevel_1.default.setDefaultLevel('WARN');\nvar defaultPeer = new FluencePeer_1.FluencePeer();\n/**\n * Public interface to Fluence JS\n */\n\nexports.Fluence = {\n  /**\n   * Initializes the default peer: starts the Aqua VM, initializes the default call service handlers\n   * and (optionally) connect to the Fluence network\n   * @param config - object specifying peer configuration\n   */\n  start: function (config) {\n    return defaultPeer.start(config);\n  },\n\n  /**\n   * Un-initializes the default peer: stops all the underlying workflows, stops the Aqua VM\n   * and disconnects from the Fluence network\n   */\n  stop: function () {\n    return defaultPeer.stop();\n  },\n\n  /**\n   * Get the default peer's status\n   * @returns Default peer's status\n   */\n  getStatus: function () {\n    return defaultPeer.getStatus();\n  },\n\n  /**\n   * Get the default peer instance\n   * @returns the default peer instance\n   */\n  getPeer: function () {\n    return defaultPeer;\n  },\n\n  /**\n   * Registers marine service within the default Fluence peer from wasm file.\n   * Following helper functions can be used to load wasm files:\n   * * loadWasmFromFileSystem\n   * * loadWasmFromNpmPackage\n   * * loadWasmFromServer\n   * @param wasm - buffer with the wasm file for service\n   * @param serviceId - the service id by which the service can be accessed in aqua\n   */\n  registerMarineService: function (wasm, serviceId) {\n    return defaultPeer.registerMarineService(wasm, serviceId);\n  },\n\n  /**\n   * Removes the specified marine service from the default Fluence peer\n   * @param serviceId - the service id to remove\n   */\n  removeMarineService: function (serviceId) {\n    defaultPeer.removeMarineService(serviceId);\n  }\n};","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAEA;;AAGA;;AAASA;EAAAC;EAAAC;IAAA;EAAO;AAAP;;AACT;;AAASF;EAAAC;EAAAC;IAAA;EAAW;AAAX;;AAGT;;AAASF;EAAAC;EAAAC;IAAA;EAAsB;AAAtB;AAAwBF;EAAAC;EAAAC;IAAA;EAAsB;AAAtB;AAAwBF;EAAAC;EAAAC;IAAA;EAAkB;AAAlB;;AAElD,IAAMC,WAAW,GAAG,UAACC,KAAD,EAAoB;EAC3CC,mBAAIC,QAAJ,CAAaF,KAAb;AACH,CAFM;;AAAMG,sBAAWJ,WAAX;AAIbE,mBAAIG,eAAJ,CAAoB,MAApB;AAEA,IAAMC,WAAW,GAAG,IAAIC,yBAAJ,EAApB;AAEA;;;;AAGaH,kBAAU;EACnB;;;;;EAKAI,KAAK,EAAE,UAACC,MAAD,EAAoB;IACvB,OAAOH,WAAW,CAACE,KAAZ,CAAkBC,MAAlB,CAAP;EACH,CARkB;;EAUnB;;;;EAIAC,IAAI,EAAE;IACF,OAAOJ,WAAW,CAACI,IAAZ,EAAP;EACH,CAhBkB;;EAkBnB;;;;EAIAC,SAAS,EAAE;IACP,OAAOL,WAAW,CAACK,SAAZ,EAAP;EACH,CAxBkB;;EA0BnB;;;;EAIAC,OAAO,EAAE;IACL,OAAON,WAAP;EACH,CAhCkB;;EAkCnB;;;;;;;;;EASAO,qBAAqB,EAAE,UAACC,IAAD,EAAmCC,SAAnC,EAAoD;IACvE,OAAOT,WAAW,CAACO,qBAAZ,CAAkCC,IAAlC,EAAwCC,SAAxC,CAAP;EACH,CA7CkB;;EA+CnB;;;;EAIAC,mBAAmB,EAAE,UAACD,SAAD,EAAkB;IACnCT,WAAW,CAACU,mBAAZ,CAAgCD,SAAhC;EACH;AArDkB,CAAV","names":["Object","enumerable","get","setLogLevel","level","loglevel_1","setLevel","exports","setDefaultLevel","defaultPeer","FluencePeer_1","start","config","stop","getStatus","getPeer","registerMarineService","wasm","serviceId","removeMarineService"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/@fluencelabs/fluence/src/index.ts"],"sourcesContent":["/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport log, { LogLevelDesc } from 'loglevel';\n\nimport { FluencePeer, PeerConfig } from './internal/FluencePeer';\n\nexport { PeerStatus } from './internal/FluencePeer';\nexport { KeyPair } from './internal/KeyPair';\nexport { FluencePeer, PeerConfig } from './internal/FluencePeer';\nexport { MarineLoglevel as AvmLoglevel } from './internal/utils';\nexport { PeerIdB58, CallParams } from './internal/commonTypes';\nexport { loadWasmFromFileSystem, loadWasmFromNpmPackage, loadWasmFromServer } from '@fluencelabs/marine-js';\n\nexport const setLogLevel = (level: LogLevelDesc) => {\n    log.setLevel(level);\n};\n\nlog.setDefaultLevel('WARN');\n\nconst defaultPeer = new FluencePeer();\n\n/**\n * Public interface to Fluence JS\n */\nexport const Fluence = {\n    /**\n     * Initializes the default peer: starts the Aqua VM, initializes the default call service handlers\n     * and (optionally) connect to the Fluence network\n     * @param config - object specifying peer configuration\n     */\n    start: (config?: PeerConfig): Promise<void> => {\n        return defaultPeer.start(config);\n    },\n\n    /**\n     * Un-initializes the default peer: stops all the underlying workflows, stops the Aqua VM\n     * and disconnects from the Fluence network\n     */\n    stop: (): Promise<void> => {\n        return defaultPeer.stop();\n    },\n\n    /**\n     * Get the default peer's status\n     * @returns Default peer's status\n     */\n    getStatus: () => {\n        return defaultPeer.getStatus();\n    },\n\n    /**\n     * Get the default peer instance\n     * @returns the default peer instance\n     */\n    getPeer: (): FluencePeer => {\n        return defaultPeer;\n    },\n\n    /**\n     * Registers marine service within the default Fluence peer from wasm file.\n     * Following helper functions can be used to load wasm files:\n     * * loadWasmFromFileSystem\n     * * loadWasmFromNpmPackage\n     * * loadWasmFromServer\n     * @param wasm - buffer with the wasm file for service\n     * @param serviceId - the service id by which the service can be accessed in aqua\n     */\n    registerMarineService: (wasm: SharedArrayBuffer | Buffer, serviceId: string): Promise<void> => {\n        return defaultPeer.registerMarineService(wasm, serviceId);\n    },\n\n    /**\n     * Removes the specified marine service from the default Fluence peer\n     * @param serviceId - the service id to remove\n     */\n    removeMarineService: (serviceId: string): void => {\n        defaultPeer.removeMarineService(serviceId);\n    },\n};\n"]},"metadata":{},"sourceType":"script"}