{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsapScheduler = void 0;\n\nvar AsyncScheduler_1 = require(\"./AsyncScheduler\");\n\nvar AsapScheduler = function (_super) {\n  __extends(AsapScheduler, _super);\n\n  function AsapScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AsapScheduler.prototype.flush = function (action) {\n    this._active = true;\n    var flushId = this._scheduled;\n    this._scheduled = undefined;\n    var actions = this.actions;\n    var error;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler);\n\nexports.AsapScheduler = AsapScheduler;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;EAAmCA;;EAAnC;;EAkCC;;EAjCQC,gCAAP,UAAaC,MAAb,EAAsC;IACpC,KAAKC,OAAL,GAAe,IAAf;IAUA,IAAMC,OAAO,GAAG,KAAKC,UAArB;IACA,KAAKA,UAAL,GAAkBC,SAAlB;IAEQ,WAAO,GAAK,KAAIC,OAAhB;IACR,IAAIC,KAAJ;IACAN,MAAM,GAAGA,MAAM,IAAIK,OAAO,CAACE,KAAR,EAAnB;;IAEA,GAAG;MACD,IAAKD,KAAK,GAAGN,MAAM,CAACQ,OAAP,CAAeR,MAAM,CAACS,KAAtB,EAA6BT,MAAM,CAACU,KAApC,CAAb,EAA0D;QACxD;MACD;IACF,CAJD,QAIS,CAACV,MAAM,GAAGK,OAAO,CAAC,CAAD,CAAjB,KAAyBL,MAAM,CAACW,EAAP,KAAcT,OAAvC,IAAkDG,OAAO,CAACE,KAAR,EAJ3D;;IAMA,KAAKN,OAAL,GAAe,KAAf;;IAEA,IAAIK,KAAJ,EAAW;MACT,OAAO,CAACN,MAAM,GAAGK,OAAO,CAAC,CAAD,CAAjB,KAAyBL,MAAM,CAACW,EAAP,KAAcT,OAAvC,IAAkDG,OAAO,CAACE,KAAR,EAAzD,EAA0E;QACxEP,MAAM,CAACY,WAAP;MACD;;MACD,MAAMN,KAAN;IACD;EACF,CAhCM;;EAiCT;AAAC,CAlCD,CAAmCO,+BAAnC;;AAAaC","names":["__extends","AsapScheduler","action","_active","flushId","_scheduled","undefined","actions","error","shift","execute","state","delay","id","unsubscribe","AsyncScheduler_1","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    // The async id that effects a call to flush is stored in _scheduled.\n    // Before executing an action, it's necessary to check the action's async\n    // id to determine whether it's supposed to be executed in the current\n    // flush.\n    // Previous implementations of this method used a count to determine this,\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\n    // are removed from the actions array and that can shift actions that are\n    // scheduled to be executed in a subsequent flush into positions at which\n    // they are executed within the current flush.\n    const flushId = this._scheduled;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    action = action || actions.shift()!;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}