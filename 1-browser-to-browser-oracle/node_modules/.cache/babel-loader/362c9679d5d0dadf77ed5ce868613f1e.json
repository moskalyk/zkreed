{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-peer\"] || ($protobuf.roots[\"libp2p-peer\"] = {});\n\n$root.Peer = function () {\n  /**\n   * Properties of a Peer.\n   * @exports IPeer\n   * @interface IPeer\n   * @property {Array.<IAddress>|null} [addresses] Peer addresses\n   * @property {Array.<string>|null} [protocols] Peer protocols\n   * @property {Array.<IMetadata>|null} [metadata] Peer metadata\n   * @property {Uint8Array|null} [pubKey] Peer pubKey\n   * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope\n   */\n\n  /**\n   * Constructs a new Peer.\n   * @exports Peer\n   * @classdesc Represents a Peer.\n   * @implements IPeer\n   * @constructor\n   * @param {IPeer=} [p] Properties to set\n   */\n  function Peer(p) {\n    this.addresses = [];\n    this.protocols = [];\n    this.metadata = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Peer addresses.\n   * @member {Array.<IAddress>} addresses\n   * @memberof Peer\n   * @instance\n   */\n\n\n  Peer.prototype.addresses = $util.emptyArray;\n  /**\n   * Peer protocols.\n   * @member {Array.<string>} protocols\n   * @memberof Peer\n   * @instance\n   */\n\n  Peer.prototype.protocols = $util.emptyArray;\n  /**\n   * Peer metadata.\n   * @member {Array.<IMetadata>} metadata\n   * @memberof Peer\n   * @instance\n   */\n\n  Peer.prototype.metadata = $util.emptyArray;\n  /**\n   * Peer pubKey.\n   * @member {Uint8Array|null|undefined} pubKey\n   * @memberof Peer\n   * @instance\n   */\n\n  Peer.prototype.pubKey = null;\n  /**\n   * Peer peerRecordEnvelope.\n   * @member {Uint8Array|null|undefined} peerRecordEnvelope\n   * @memberof Peer\n   * @instance\n   */\n\n  Peer.prototype.peerRecordEnvelope = null; // OneOf field names bound to virtual getters and setters\n\n  var $oneOfFields;\n  /**\n   * Peer _pubKey.\n   * @member {\"pubKey\"|undefined} _pubKey\n   * @memberof Peer\n   * @instance\n   */\n\n  Object.defineProperty(Peer.prototype, \"_pubKey\", {\n    get: $util.oneOfGetter($oneOfFields = [\"pubKey\"]),\n    set: $util.oneOfSetter($oneOfFields)\n  });\n  /**\n   * Peer _peerRecordEnvelope.\n   * @member {\"peerRecordEnvelope\"|undefined} _peerRecordEnvelope\n   * @memberof Peer\n   * @instance\n   */\n\n  Object.defineProperty(Peer.prototype, \"_peerRecordEnvelope\", {\n    get: $util.oneOfGetter($oneOfFields = [\"peerRecordEnvelope\"]),\n    set: $util.oneOfSetter($oneOfFields)\n  });\n  /**\n   * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.\n   * @function encode\n   * @memberof Peer\n   * @static\n   * @param {IPeer} m Peer message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Peer.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n\n    if (m.addresses != null && m.addresses.length) {\n      for (var i = 0; i < m.addresses.length; ++i) $root.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();\n    }\n\n    if (m.protocols != null && m.protocols.length) {\n      for (var i = 0; i < m.protocols.length; ++i) w.uint32(18).string(m.protocols[i]);\n    }\n\n    if (m.metadata != null && m.metadata.length) {\n      for (var i = 0; i < m.metadata.length; ++i) $root.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();\n    }\n\n    if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\")) w.uint32(34).bytes(m.pubKey);\n    if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, \"peerRecordEnvelope\")) w.uint32(42).bytes(m.peerRecordEnvelope);\n    return w;\n  };\n  /**\n   * Decodes a Peer message from the specified reader or buffer.\n   * @function decode\n   * @memberof Peer\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Peer} Peer\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Peer.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Peer();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          if (!(m.addresses && m.addresses.length)) m.addresses = [];\n          m.addresses.push($root.Address.decode(r, r.uint32()));\n          break;\n\n        case 2:\n          if (!(m.protocols && m.protocols.length)) m.protocols = [];\n          m.protocols.push(r.string());\n          break;\n\n        case 3:\n          if (!(m.metadata && m.metadata.length)) m.metadata = [];\n          m.metadata.push($root.Metadata.decode(r, r.uint32()));\n          break;\n\n        case 4:\n          m.pubKey = r.bytes();\n          break;\n\n        case 5:\n          m.peerRecordEnvelope = r.bytes();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Peer\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Peer} Peer\n   */\n\n\n  Peer.fromObject = function fromObject(d) {\n    if (d instanceof $root.Peer) return d;\n    var m = new $root.Peer();\n\n    if (d.addresses) {\n      if (!Array.isArray(d.addresses)) throw TypeError(\".Peer.addresses: array expected\");\n      m.addresses = [];\n\n      for (var i = 0; i < d.addresses.length; ++i) {\n        if (typeof d.addresses[i] !== \"object\") throw TypeError(\".Peer.addresses: object expected\");\n        m.addresses[i] = $root.Address.fromObject(d.addresses[i]);\n      }\n    }\n\n    if (d.protocols) {\n      if (!Array.isArray(d.protocols)) throw TypeError(\".Peer.protocols: array expected\");\n      m.protocols = [];\n\n      for (var i = 0; i < d.protocols.length; ++i) {\n        m.protocols[i] = String(d.protocols[i]);\n      }\n    }\n\n    if (d.metadata) {\n      if (!Array.isArray(d.metadata)) throw TypeError(\".Peer.metadata: array expected\");\n      m.metadata = [];\n\n      for (var i = 0; i < d.metadata.length; ++i) {\n        if (typeof d.metadata[i] !== \"object\") throw TypeError(\".Peer.metadata: object expected\");\n        m.metadata[i] = $root.Metadata.fromObject(d.metadata[i]);\n      }\n    }\n\n    if (d.pubKey != null) {\n      if (typeof d.pubKey === \"string\") $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);else if (d.pubKey.length) m.pubKey = d.pubKey;\n    }\n\n    if (d.peerRecordEnvelope != null) {\n      if (typeof d.peerRecordEnvelope === \"string\") $util.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util.newBuffer($util.base64.length(d.peerRecordEnvelope)), 0);else if (d.peerRecordEnvelope.length) m.peerRecordEnvelope = d.peerRecordEnvelope;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a Peer message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Peer\n   * @static\n   * @param {Peer} m Peer\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Peer.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.addresses = [];\n      d.protocols = [];\n      d.metadata = [];\n    }\n\n    if (m.addresses && m.addresses.length) {\n      d.addresses = [];\n\n      for (var j = 0; j < m.addresses.length; ++j) {\n        d.addresses[j] = $root.Address.toObject(m.addresses[j], o);\n      }\n    }\n\n    if (m.protocols && m.protocols.length) {\n      d.protocols = [];\n\n      for (var j = 0; j < m.protocols.length; ++j) {\n        d.protocols[j] = m.protocols[j];\n      }\n    }\n\n    if (m.metadata && m.metadata.length) {\n      d.metadata = [];\n\n      for (var j = 0; j < m.metadata.length; ++j) {\n        d.metadata[j] = $root.Metadata.toObject(m.metadata[j], o);\n      }\n    }\n\n    if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n      d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n      if (o.oneofs) d._pubKey = \"pubKey\";\n    }\n\n    if (m.peerRecordEnvelope != null && m.hasOwnProperty(\"peerRecordEnvelope\")) {\n      d.peerRecordEnvelope = o.bytes === String ? $util.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;\n      if (o.oneofs) d._peerRecordEnvelope = \"peerRecordEnvelope\";\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Peer to JSON.\n   * @function toJSON\n   * @memberof Peer\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Peer.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Peer;\n}();\n\n$root.Address = function () {\n  /**\n   * Properties of an Address.\n   * @exports IAddress\n   * @interface IAddress\n   * @property {Uint8Array|null} [multiaddr] Address multiaddr\n   * @property {boolean|null} [isCertified] Address isCertified\n   */\n\n  /**\n   * Constructs a new Address.\n   * @exports Address\n   * @classdesc Represents an Address.\n   * @implements IAddress\n   * @constructor\n   * @param {IAddress=} [p] Properties to set\n   */\n  function Address(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Address multiaddr.\n   * @member {Uint8Array} multiaddr\n   * @memberof Address\n   * @instance\n   */\n\n\n  Address.prototype.multiaddr = $util.newBuffer([]);\n  /**\n   * Address isCertified.\n   * @member {boolean|null|undefined} isCertified\n   * @memberof Address\n   * @instance\n   */\n\n  Address.prototype.isCertified = null; // OneOf field names bound to virtual getters and setters\n\n  var $oneOfFields;\n  /**\n   * Address _isCertified.\n   * @member {\"isCertified\"|undefined} _isCertified\n   * @memberof Address\n   * @instance\n   */\n\n  Object.defineProperty(Address.prototype, \"_isCertified\", {\n    get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n    set: $util.oneOfSetter($oneOfFields)\n  });\n  /**\n   * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.\n   * @function encode\n   * @memberof Address\n   * @static\n   * @param {IAddress} m Address message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Address.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\")) w.uint32(10).bytes(m.multiaddr);\n    if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\")) w.uint32(16).bool(m.isCertified);\n    return w;\n  };\n  /**\n   * Decodes an Address message from the specified reader or buffer.\n   * @function decode\n   * @memberof Address\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Address} Address\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Address.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Address();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.multiaddr = r.bytes();\n          break;\n\n        case 2:\n          m.isCertified = r.bool();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates an Address message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Address\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Address} Address\n   */\n\n\n  Address.fromObject = function fromObject(d) {\n    if (d instanceof $root.Address) return d;\n    var m = new $root.Address();\n\n    if (d.multiaddr != null) {\n      if (typeof d.multiaddr === \"string\") $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);else if (d.multiaddr.length) m.multiaddr = d.multiaddr;\n    }\n\n    if (d.isCertified != null) {\n      m.isCertified = Boolean(d.isCertified);\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from an Address message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Address\n   * @static\n   * @param {Address} m Address\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Address.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      if (o.bytes === String) d.multiaddr = \"\";else {\n        d.multiaddr = [];\n        if (o.bytes !== Array) d.multiaddr = $util.newBuffer(d.multiaddr);\n      }\n    }\n\n    if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n      d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n    }\n\n    if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n      d.isCertified = m.isCertified;\n      if (o.oneofs) d._isCertified = \"isCertified\";\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Address to JSON.\n   * @function toJSON\n   * @memberof Address\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Address.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Address;\n}();\n\n$root.Metadata = function () {\n  /**\n   * Properties of a Metadata.\n   * @exports IMetadata\n   * @interface IMetadata\n   * @property {string|null} [key] Metadata key\n   * @property {Uint8Array|null} [value] Metadata value\n   */\n\n  /**\n   * Constructs a new Metadata.\n   * @exports Metadata\n   * @classdesc Represents a Metadata.\n   * @implements IMetadata\n   * @constructor\n   * @param {IMetadata=} [p] Properties to set\n   */\n  function Metadata(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Metadata key.\n   * @member {string} key\n   * @memberof Metadata\n   * @instance\n   */\n\n\n  Metadata.prototype.key = \"\";\n  /**\n   * Metadata value.\n   * @member {Uint8Array} value\n   * @memberof Metadata\n   * @instance\n   */\n\n  Metadata.prototype.value = $util.newBuffer([]);\n  /**\n   * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n   * @function encode\n   * @memberof Metadata\n   * @static\n   * @param {IMetadata} m Metadata message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Metadata.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.key != null && Object.hasOwnProperty.call(m, \"key\")) w.uint32(10).string(m.key);\n    if (m.value != null && Object.hasOwnProperty.call(m, \"value\")) w.uint32(18).bytes(m.value);\n    return w;\n  };\n  /**\n   * Decodes a Metadata message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metadata\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Metadata} Metadata\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Metadata.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Metadata();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.key = r.string();\n          break;\n\n        case 2:\n          m.value = r.bytes();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metadata\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Metadata} Metadata\n   */\n\n\n  Metadata.fromObject = function fromObject(d) {\n    if (d instanceof $root.Metadata) return d;\n    var m = new $root.Metadata();\n\n    if (d.key != null) {\n      m.key = String(d.key);\n    }\n\n    if (d.value != null) {\n      if (typeof d.value === \"string\") $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);else if (d.value.length) m.value = d.value;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metadata\n   * @static\n   * @param {Metadata} m Metadata\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Metadata.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      d.key = \"\";\n      if (o.bytes === String) d.value = \"\";else {\n        d.value = [];\n        if (o.bytes !== Array) d.value = $util.newBuffer(d.value);\n      }\n    }\n\n    if (m.key != null && m.hasOwnProperty(\"key\")) {\n      d.key = m.key;\n    }\n\n    if (m.value != null && m.hasOwnProperty(\"value\")) {\n      d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Metadata to JSON.\n   * @function toJSON\n   * @memberof Metadata\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Metadata.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Metadata;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Peer","p","addresses","protocols","metadata","ks","Object","keys","i","length","prototype","emptyArray","pubKey","peerRecordEnvelope","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","encode","m","w","create","Address","uint32","fork","ldelim","string","Metadata","hasOwnProperty","call","bytes","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","Array","isArray","TypeError","String","base64","newBuffer","toObject","o","arrays","defaults","j","slice","oneofs","_pubKey","_peerRecordEnvelope","toJSON","constructor","toJSONOptions","multiaddr","isCertified","bool","Boolean","_isCertified","key","value","module","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/libp2p/src/peer-store/pb/peer.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-peer\"] || ($protobuf.roots[\"libp2p-peer\"] = {});\n\n$root.Peer = (function() {\n\n    /**\n     * Properties of a Peer.\n     * @exports IPeer\n     * @interface IPeer\n     * @property {Array.<IAddress>|null} [addresses] Peer addresses\n     * @property {Array.<string>|null} [protocols] Peer protocols\n     * @property {Array.<IMetadata>|null} [metadata] Peer metadata\n     * @property {Uint8Array|null} [pubKey] Peer pubKey\n     * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope\n     */\n\n    /**\n     * Constructs a new Peer.\n     * @exports Peer\n     * @classdesc Represents a Peer.\n     * @implements IPeer\n     * @constructor\n     * @param {IPeer=} [p] Properties to set\n     */\n    function Peer(p) {\n        this.addresses = [];\n        this.protocols = [];\n        this.metadata = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Peer addresses.\n     * @member {Array.<IAddress>} addresses\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Peer protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Peer metadata.\n     * @member {Array.<IMetadata>} metadata\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.metadata = $util.emptyArray;\n\n    /**\n     * Peer pubKey.\n     * @member {Uint8Array|null|undefined} pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.pubKey = null;\n\n    /**\n     * Peer peerRecordEnvelope.\n     * @member {Uint8Array|null|undefined} peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.peerRecordEnvelope = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * Peer _pubKey.\n     * @member {\"pubKey\"|undefined} _pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_pubKey\", {\n        get: $util.oneOfGetter($oneOfFields = [\"pubKey\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Peer _peerRecordEnvelope.\n     * @member {\"peerRecordEnvelope\"|undefined} _peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_peerRecordEnvelope\", {\n        get: $util.oneOfGetter($oneOfFields = [\"peerRecordEnvelope\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.\n     * @function encode\n     * @memberof Peer\n     * @static\n     * @param {IPeer} m Peer message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Peer.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(18).string(m.protocols[i]);\n        }\n        if (m.metadata != null && m.metadata.length) {\n            for (var i = 0; i < m.metadata.length; ++i)\n                $root.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\"))\n            w.uint32(34).bytes(m.pubKey);\n        if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, \"peerRecordEnvelope\"))\n            w.uint32(42).bytes(m.peerRecordEnvelope);\n        return w;\n    };\n\n    /**\n     * Decodes a Peer message from the specified reader or buffer.\n     * @function decode\n     * @memberof Peer\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Peer} Peer\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Peer.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Peer();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            case 3:\n                if (!(m.metadata && m.metadata.length))\n                    m.metadata = [];\n                m.metadata.push($root.Metadata.decode(r, r.uint32()));\n                break;\n            case 4:\n                m.pubKey = r.bytes();\n                break;\n            case 5:\n                m.peerRecordEnvelope = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Peer\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Peer} Peer\n     */\n    Peer.fromObject = function fromObject(d) {\n        if (d instanceof $root.Peer)\n            return d;\n        var m = new $root.Peer();\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".Peer.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".Peer.addresses: object expected\");\n                m.addresses[i] = $root.Address.fromObject(d.addresses[i]);\n            }\n        }\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Peer.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        if (d.metadata) {\n            if (!Array.isArray(d.metadata))\n                throw TypeError(\".Peer.metadata: array expected\");\n            m.metadata = [];\n            for (var i = 0; i < d.metadata.length; ++i) {\n                if (typeof d.metadata[i] !== \"object\")\n                    throw TypeError(\".Peer.metadata: object expected\");\n                m.metadata[i] = $root.Metadata.fromObject(d.metadata[i]);\n            }\n        }\n        if (d.pubKey != null) {\n            if (typeof d.pubKey === \"string\")\n                $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);\n            else if (d.pubKey.length)\n                m.pubKey = d.pubKey;\n        }\n        if (d.peerRecordEnvelope != null) {\n            if (typeof d.peerRecordEnvelope === \"string\")\n                $util.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util.newBuffer($util.base64.length(d.peerRecordEnvelope)), 0);\n            else if (d.peerRecordEnvelope.length)\n                m.peerRecordEnvelope = d.peerRecordEnvelope;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Peer message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Peer\n     * @static\n     * @param {Peer} m Peer\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Peer.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n            d.protocols = [];\n            d.metadata = [];\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.Address.toObject(m.addresses[j], o);\n            }\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        if (m.metadata && m.metadata.length) {\n            d.metadata = [];\n            for (var j = 0; j < m.metadata.length; ++j) {\n                d.metadata[j] = $root.Metadata.toObject(m.metadata[j], o);\n            }\n        }\n        if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n            d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n            if (o.oneofs)\n                d._pubKey = \"pubKey\";\n        }\n        if (m.peerRecordEnvelope != null && m.hasOwnProperty(\"peerRecordEnvelope\")) {\n            d.peerRecordEnvelope = o.bytes === String ? $util.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;\n            if (o.oneofs)\n                d._peerRecordEnvelope = \"peerRecordEnvelope\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Peer to JSON.\n     * @function toJSON\n     * @memberof Peer\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Peer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Peer;\n})();\n\n$root.Address = (function() {\n\n    /**\n     * Properties of an Address.\n     * @exports IAddress\n     * @interface IAddress\n     * @property {Uint8Array|null} [multiaddr] Address multiaddr\n     * @property {boolean|null} [isCertified] Address isCertified\n     */\n\n    /**\n     * Constructs a new Address.\n     * @exports Address\n     * @classdesc Represents an Address.\n     * @implements IAddress\n     * @constructor\n     * @param {IAddress=} [p] Properties to set\n     */\n    function Address(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Address multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.multiaddr = $util.newBuffer([]);\n\n    /**\n     * Address isCertified.\n     * @member {boolean|null|undefined} isCertified\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.isCertified = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * Address _isCertified.\n     * @member {\"isCertified\"|undefined} _isCertified\n     * @memberof Address\n     * @instance\n     */\n    Object.defineProperty(Address.prototype, \"_isCertified\", {\n        get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.\n     * @function encode\n     * @memberof Address\n     * @static\n     * @param {IAddress} m Address message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Address.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n            w.uint32(10).bytes(m.multiaddr);\n        if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n            w.uint32(16).bool(m.isCertified);\n        return w;\n    };\n\n    /**\n     * Decodes an Address message from the specified reader or buffer.\n     * @function decode\n     * @memberof Address\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Address} Address\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Address.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Address();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.multiaddr = r.bytes();\n                break;\n            case 2:\n                m.isCertified = r.bool();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Address message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Address\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Address} Address\n     */\n    Address.fromObject = function fromObject(d) {\n        if (d instanceof $root.Address)\n            return d;\n        var m = new $root.Address();\n        if (d.multiaddr != null) {\n            if (typeof d.multiaddr === \"string\")\n                $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n            else if (d.multiaddr.length)\n                m.multiaddr = d.multiaddr;\n        }\n        if (d.isCertified != null) {\n            m.isCertified = Boolean(d.isCertified);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Address message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Address\n     * @static\n     * @param {Address} m Address\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Address.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.multiaddr = \"\";\n            else {\n                d.multiaddr = [];\n                if (o.bytes !== Array)\n                    d.multiaddr = $util.newBuffer(d.multiaddr);\n            }\n        }\n        if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n            d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n        }\n        if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n            d.isCertified = m.isCertified;\n            if (o.oneofs)\n                d._isCertified = \"isCertified\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Address to JSON.\n     * @function toJSON\n     * @memberof Address\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Address.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Address;\n})();\n\n$root.Metadata = (function() {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [key] Metadata key\n     * @property {Uint8Array|null} [value] Metadata value\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata key.\n     * @member {string} key\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.key = \"\";\n\n    /**\n     * Metadata value.\n     * @member {Uint8Array} value\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.value = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n            w.uint32(10).string(m.key);\n        if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n            w.uint32(18).bytes(m.value);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.key = r.string();\n                break;\n            case 2:\n                m.value = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.key != null) {\n            m.key = String(d.key);\n        }\n        if (d.value != null) {\n            if (typeof d.value === \"string\")\n                $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);\n            else if (d.value.length)\n                m.value = d.value;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.key = \"\";\n            if (o.bytes === String)\n                d.value = \"\";\n            else {\n                d.value = [];\n                if (o.bytes !== Array)\n                    d.value = $util.newBuffer(d.value);\n            }\n        }\n        if (m.key != null && m.hasOwnProperty(\"key\")) {\n            d.key = m.key;\n        }\n        if (m.value != null && m.hasOwnProperty(\"value\")) {\n            d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}