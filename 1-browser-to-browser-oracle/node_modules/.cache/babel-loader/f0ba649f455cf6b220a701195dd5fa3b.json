{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerSig = void 0;\n\nvar v3_1 = require(\"../../internal/compilerSupport/v3\");\n\nfunction registerSig() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  (0, v3_1.registerService)(args, {\n    defaultServiceId: 'sig',\n    functions: {\n      tag: 'labeledProduct',\n      fields: {\n        get_pub_key: {\n          tag: 'arrow',\n          domain: {\n            tag: 'nil'\n          },\n          codomain: {\n            tag: 'unlabeledProduct',\n            items: [{\n              tag: 'scalar',\n              name: 'string'\n            }]\n          }\n        },\n        sign: {\n          tag: 'arrow',\n          domain: {\n            tag: 'labeledProduct',\n            fields: {\n              data: {\n                tag: 'array',\n                type: {\n                  tag: 'scalar',\n                  name: 'u8'\n                }\n              }\n            }\n          },\n          codomain: {\n            tag: 'unlabeledProduct',\n            items: [{\n              tag: 'struct',\n              name: 'SignResult',\n              fields: {\n                error: {\n                  tag: 'option',\n                  type: {\n                    tag: 'scalar',\n                    name: 'string'\n                  }\n                },\n                signature: {\n                  tag: 'option',\n                  type: {\n                    tag: 'array',\n                    type: {\n                      tag: 'scalar',\n                      name: 'u8'\n                    }\n                  }\n                },\n                success: {\n                  tag: 'scalar',\n                  name: 'bool'\n                }\n              }\n            }]\n          }\n        },\n        verify: {\n          tag: 'arrow',\n          domain: {\n            tag: 'labeledProduct',\n            fields: {\n              signature: {\n                tag: 'array',\n                type: {\n                  tag: 'scalar',\n                  name: 'u8'\n                }\n              },\n              data: {\n                tag: 'array',\n                type: {\n                  tag: 'scalar',\n                  name: 'u8'\n                }\n              }\n            }\n          },\n          codomain: {\n            tag: 'unlabeledProduct',\n            items: [{\n              tag: 'scalar',\n              name: 'bool'\n            }]\n          }\n        }\n      }\n    }\n  });\n}\n\nexports.registerSig = registerSig; // Functions","map":{"version":3,"mappings":";;;;;;;AASA;;AAuBA,SAAgBA,WAAhB,GAA2B;EAAC;;OAAA,yCAAY;IAAZC;;;EACxB,0BAAgBA,IAAhB,EAAsB;IAClBC,gBAAgB,EAAE,KADA;IAElBC,SAAS,EAAE;MACPC,GAAG,EAAE,gBADE;MAEPC,MAAM,EAAE;QACJC,WAAW,EAAE;UACTF,GAAG,EAAE,OADI;UAETG,MAAM,EAAE;YACJH,GAAG,EAAE;UADD,CAFC;UAKTI,QAAQ,EAAE;YACNJ,GAAG,EAAE,kBADC;YAENK,KAAK,EAAE,CACH;cACIL,GAAG,EAAE,QADT;cAEIM,IAAI,EAAE;YAFV,CADG;UAFD;QALD,CADT;QAgBJC,IAAI,EAAE;UACFP,GAAG,EAAE,OADH;UAEFG,MAAM,EAAE;YACJH,GAAG,EAAE,gBADD;YAEJC,MAAM,EAAE;cACJO,IAAI,EAAE;gBACFR,GAAG,EAAE,OADH;gBAEFS,IAAI,EAAE;kBACFT,GAAG,EAAE,QADH;kBAEFM,IAAI,EAAE;gBAFJ;cAFJ;YADF;UAFJ,CAFN;UAcFF,QAAQ,EAAE;YACNJ,GAAG,EAAE,kBADC;YAENK,KAAK,EAAE,CACH;cACIL,GAAG,EAAE,QADT;cAEIM,IAAI,EAAE,YAFV;cAGIL,MAAM,EAAE;gBACJS,KAAK,EAAE;kBACHV,GAAG,EAAE,QADF;kBAEHS,IAAI,EAAE;oBACFT,GAAG,EAAE,QADH;oBAEFM,IAAI,EAAE;kBAFJ;gBAFH,CADH;gBAQJK,SAAS,EAAE;kBACPX,GAAG,EAAE,QADE;kBAEPS,IAAI,EAAE;oBACFT,GAAG,EAAE,OADH;oBAEFS,IAAI,EAAE;sBACFT,GAAG,EAAE,QADH;sBAEFM,IAAI,EAAE;oBAFJ;kBAFJ;gBAFC,CARP;gBAkBJM,OAAO,EAAE;kBACLZ,GAAG,EAAE,QADA;kBAELM,IAAI,EAAE;gBAFD;cAlBL;YAHZ,CADG;UAFD;QAdR,CAhBF;QA+DJO,MAAM,EAAE;UACJb,GAAG,EAAE,OADD;UAEJG,MAAM,EAAE;YACJH,GAAG,EAAE,gBADD;YAEJC,MAAM,EAAE;cACJU,SAAS,EAAE;gBACPX,GAAG,EAAE,OADE;gBAEPS,IAAI,EAAE;kBACFT,GAAG,EAAE,QADH;kBAEFM,IAAI,EAAE;gBAFJ;cAFC,CADP;cAQJE,IAAI,EAAE;gBACFR,GAAG,EAAE,OADH;gBAEFS,IAAI,EAAE;kBACFT,GAAG,EAAE,QADH;kBAEFM,IAAI,EAAE;gBAFJ;cAFJ;YARF;UAFJ,CAFJ;UAqBJF,QAAQ,EAAE;YACNJ,GAAG,EAAE,kBADC;YAENK,KAAK,EAAE,CACH;cACIL,GAAG,EAAE,QADT;cAEIM,IAAI,EAAE;YAFV,CADG;UAFD;QArBN;MA/DJ;IAFD;EAFO,CAAtB;AAqGH;;AAtGDQ,kC,CAwGA","names":["registerSig","args","defaultServiceId","functions","tag","fields","get_pub_key","domain","codomain","items","name","sign","data","type","error","signature","success","verify","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/@fluencelabs/fluence/src/internal/_aqua/services.ts"],"sourcesContent":["/**\n *\n * This file is auto-generated. Do not edit manually: changes may be erased.\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.\n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\n * Aqua version: 0.7.0-285\n *\n */\nimport { Fluence, FluencePeer } from '../../index';\nimport { CallParams, callFunction, registerService } from '../../internal/compilerSupport/v3';\n\n// Services\n\nexport interface SigDef {\n    get_pub_key: (callParams: CallParams<null>) => string | Promise<string>;\n    sign: (\n        data: number[],\n        callParams: CallParams<'data'>,\n    ) =>\n        | { error: string | null; signature: number[] | null; success: boolean }\n        | Promise<{ error: string | null; signature: number[] | null; success: boolean }>;\n    verify: (\n        signature: number[],\n        data: number[],\n        callParams: CallParams<'signature' | 'data'>,\n    ) => boolean | Promise<boolean>;\n}\nexport function registerSig(service: SigDef): void;\nexport function registerSig(serviceId: string, service: SigDef): void;\nexport function registerSig(peer: FluencePeer, service: SigDef): void;\nexport function registerSig(peer: FluencePeer, serviceId: string, service: SigDef): void;\n\nexport function registerSig(...args: any) {\n    registerService(args, {\n        defaultServiceId: 'sig',\n        functions: {\n            tag: 'labeledProduct',\n            fields: {\n                get_pub_key: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'nil',\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'scalar',\n                                name: 'string',\n                            },\n                        ],\n                    },\n                },\n                sign: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'labeledProduct',\n                        fields: {\n                            data: {\n                                tag: 'array',\n                                type: {\n                                    tag: 'scalar',\n                                    name: 'u8',\n                                },\n                            },\n                        },\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'struct',\n                                name: 'SignResult',\n                                fields: {\n                                    error: {\n                                        tag: 'option',\n                                        type: {\n                                            tag: 'scalar',\n                                            name: 'string',\n                                        },\n                                    },\n                                    signature: {\n                                        tag: 'option',\n                                        type: {\n                                            tag: 'array',\n                                            type: {\n                                                tag: 'scalar',\n                                                name: 'u8',\n                                            },\n                                        },\n                                    },\n                                    success: {\n                                        tag: 'scalar',\n                                        name: 'bool',\n                                    },\n                                },\n                            },\n                        ],\n                    },\n                },\n                verify: {\n                    tag: 'arrow',\n                    domain: {\n                        tag: 'labeledProduct',\n                        fields: {\n                            signature: {\n                                tag: 'array',\n                                type: {\n                                    tag: 'scalar',\n                                    name: 'u8',\n                                },\n                            },\n                            data: {\n                                tag: 'array',\n                                type: {\n                                    tag: 'scalar',\n                                    name: 'u8',\n                                },\n                            },\n                        },\n                    },\n                    codomain: {\n                        tag: 'unlabeledProduct',\n                        items: [\n                            {\n                                tag: 'scalar',\n                                name: 'bool',\n                            },\n                        ],\n                    },\n                },\n            },\n        },\n    });\n}\n\n// Functions\n"]},"metadata":{},"sourceType":"script"}