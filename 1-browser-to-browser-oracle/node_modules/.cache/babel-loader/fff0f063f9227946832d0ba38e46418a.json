{"ast":null,"code":"import { nanoid } from 'nanoid';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\nexport class Key {\n  constructor(s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n\n    if (clean == null) {\n      clean = true;\n    }\n\n    if (clean) {\n      this.clean();\n    }\n\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n\n  toString() {\n    let encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf8';\n    return uint8ArrayToString(this._buf, encoding);\n  }\n\n  uint8Array() {\n    return this._buf;\n  }\n\n  get [Symbol.toStringTag]() {\n    return `Key(${this.toString()})`;\n  }\n\n  static withNamespaces(list) {\n    return new Key(list.join(pathSepS));\n  }\n\n  static random() {\n    return new Key(nanoid().replace(/-/g, ''));\n  }\n\n  static asKey(other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      return new Key(other);\n    }\n\n    if (other.uint8Array) {\n      return new Key(other.uint8Array());\n    }\n\n    return null;\n  }\n\n  clean() {\n    if (!this._buf || this._buf.byteLength === 0) {\n      this._buf = pathSepB;\n    }\n\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1);\n      bytes.fill(pathSep, 0, 1);\n      bytes.set(this._buf, 1);\n      this._buf = bytes;\n    }\n\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1);\n    }\n  }\n\n  less(key) {\n    const list1 = this.list();\n    const list2 = key.list();\n\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false;\n      }\n\n      const c1 = list1[i];\n      const c2 = list2[i];\n\n      if (c1 < c2) {\n        return true;\n      } else if (c1 > c2) {\n        return false;\n      }\n    }\n\n    return list1.length < list2.length;\n  }\n\n  reverse() {\n    return Key.withNamespaces(this.list().slice().reverse());\n  }\n\n  namespaces() {\n    return this.list();\n  }\n\n  baseNamespace() {\n    const ns = this.namespaces();\n    return ns[ns.length - 1];\n  }\n\n  list() {\n    return this.toString().split(pathSepS).slice(1);\n  }\n\n  type() {\n    return namespaceType(this.baseNamespace());\n  }\n\n  name() {\n    return namespaceValue(this.baseNamespace());\n  }\n\n  instance(s) {\n    return new Key(this.toString() + ':' + s);\n  }\n\n  path() {\n    let p = this.parent().toString();\n\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS;\n    }\n\n    p += this.type();\n    return new Key(p);\n  }\n\n  parent() {\n    const list = this.list();\n\n    if (list.length === 1) {\n      return new Key(pathSepS);\n    }\n\n    return new Key(list.slice(0, -1).join(pathSepS));\n  }\n\n  child(key) {\n    if (this.toString() === pathSepS) {\n      return key;\n    } else if (key.toString() === pathSepS) {\n      return this;\n    }\n\n    return new Key(this.toString() + key.toString(), false);\n  }\n\n  isAncestorOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n\n    return other.toString().startsWith(this.toString());\n  }\n\n  isDecendantOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n\n    return this.toString().startsWith(other.toString());\n  }\n\n  isTopLevel() {\n    return this.list().length === 1;\n  }\n\n  concat() {\n    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n      keys[_key] = arguments[_key];\n    }\n\n    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))]);\n  }\n\n}\n\nfunction namespaceType(ns) {\n  const parts = ns.split(':');\n\n  if (parts.length < 2) {\n    return '';\n  }\n\n  return parts.slice(0, -1).join(':');\n}\n\nfunction namespaceValue(ns) {\n  const parts = ns.split(':');\n  return parts[parts.length - 1];\n}\n\nfunction flatten(arr) {\n  return [].concat(...arr);\n}","map":{"version":3,"names":["nanoid","toString","uint8ArrayToString","fromString","uint8ArrayFromString","pathSepS","pathSepB","TextEncoder","encode","pathSep","Key","constructor","s","clean","_buf","Uint8Array","Error","byteLength","encoding","uint8Array","Symbol","toStringTag","withNamespaces","list","join","random","replace","asKey","other","bytes","fill","set","subarray","less","key","list1","list2","i","length","c1","c2","reverse","slice","namespaces","baseNamespace","ns","split","type","namespaceType","name","namespaceValue","instance","path","p","parent","endsWith","child","isAncestorOf","startsWith","isDecendantOf","isTopLevel","concat","keys","flatten","map","parts","arr"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/interface-datastore/esm/src/key.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\nexport class Key {\n  constructor(s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n    if (clean == null) {\n      clean = true;\n    }\n    if (clean) {\n      this.clean();\n    }\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  toString(encoding = 'utf8') {\n    return uint8ArrayToString(this._buf, encoding);\n  }\n  uint8Array() {\n    return this._buf;\n  }\n  get [Symbol.toStringTag]() {\n    return `Key(${ this.toString() })`;\n  }\n  static withNamespaces(list) {\n    return new Key(list.join(pathSepS));\n  }\n  static random() {\n    return new Key(nanoid().replace(/-/g, ''));\n  }\n  static asKey(other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      return new Key(other);\n    }\n    if (other.uint8Array) {\n      return new Key(other.uint8Array());\n    }\n    return null;\n  }\n  clean() {\n    if (!this._buf || this._buf.byteLength === 0) {\n      this._buf = pathSepB;\n    }\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1);\n      bytes.fill(pathSep, 0, 1);\n      bytes.set(this._buf, 1);\n      this._buf = bytes;\n    }\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1);\n    }\n  }\n  less(key) {\n    const list1 = this.list();\n    const list2 = key.list();\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false;\n      }\n      const c1 = list1[i];\n      const c2 = list2[i];\n      if (c1 < c2) {\n        return true;\n      } else if (c1 > c2) {\n        return false;\n      }\n    }\n    return list1.length < list2.length;\n  }\n  reverse() {\n    return Key.withNamespaces(this.list().slice().reverse());\n  }\n  namespaces() {\n    return this.list();\n  }\n  baseNamespace() {\n    const ns = this.namespaces();\n    return ns[ns.length - 1];\n  }\n  list() {\n    return this.toString().split(pathSepS).slice(1);\n  }\n  type() {\n    return namespaceType(this.baseNamespace());\n  }\n  name() {\n    return namespaceValue(this.baseNamespace());\n  }\n  instance(s) {\n    return new Key(this.toString() + ':' + s);\n  }\n  path() {\n    let p = this.parent().toString();\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS;\n    }\n    p += this.type();\n    return new Key(p);\n  }\n  parent() {\n    const list = this.list();\n    if (list.length === 1) {\n      return new Key(pathSepS);\n    }\n    return new Key(list.slice(0, -1).join(pathSepS));\n  }\n  child(key) {\n    if (this.toString() === pathSepS) {\n      return key;\n    } else if (key.toString() === pathSepS) {\n      return this;\n    }\n    return new Key(this.toString() + key.toString(), false);\n  }\n  isAncestorOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return other.toString().startsWith(this.toString());\n  }\n  isDecendantOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return this.toString().startsWith(other.toString());\n  }\n  isTopLevel() {\n    return this.list().length === 1;\n  }\n  concat(...keys) {\n    return Key.withNamespaces([\n      ...this.namespaces(),\n      ...flatten(keys.map(key => key.namespaces()))\n    ]);\n  }\n}\nfunction namespaceType(ns) {\n  const parts = ns.split(':');\n  if (parts.length < 2) {\n    return '';\n  }\n  return parts.slice(0, -1).join(':');\n}\nfunction namespaceValue(ns) {\n  const parts = ns.split(':');\n  return parts[parts.length - 1];\n}\nfunction flatten(arr) {\n  return [].concat(...arr);\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,MAAMC,QAAQ,GAAG,GAAjB;AACA,MAAMC,QAAQ,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBH,QAAzB,CAAjB;AACA,MAAMI,OAAO,GAAGH,QAAQ,CAAC,CAAD,CAAxB;AACA,OAAO,MAAMI,GAAN,CAAU;EACfC,WAAW,CAACC,CAAD,EAAIC,KAAJ,EAAW;IACpB,IAAI,OAAOD,CAAP,KAAa,QAAjB,EAA2B;MACzB,KAAKE,IAAL,GAAYV,oBAAoB,CAACQ,CAAD,CAAhC;IACD,CAFD,MAEO,IAAIA,CAAC,YAAYG,UAAjB,EAA6B;MAClC,KAAKD,IAAL,GAAYF,CAAZ;IACD,CAFM,MAEA;MACL,MAAM,IAAII,KAAJ,CAAU,6CAAV,CAAN;IACD;;IACD,IAAIH,KAAK,IAAI,IAAb,EAAmB;MACjBA,KAAK,GAAG,IAAR;IACD;;IACD,IAAIA,KAAJ,EAAW;MACT,KAAKA,KAAL;IACD;;IACD,IAAI,KAAKC,IAAL,CAAUG,UAAV,KAAyB,CAAzB,IAA8B,KAAKH,IAAL,CAAU,CAAV,MAAiBL,OAAnD,EAA4D;MAC1D,MAAM,IAAIO,KAAJ,CAAU,aAAV,CAAN;IACD;EACF;;EACDf,QAAQ,GAAoB;IAAA,IAAnBiB,QAAmB,uEAAR,MAAQ;IAC1B,OAAOhB,kBAAkB,CAAC,KAAKY,IAAN,EAAYI,QAAZ,CAAzB;EACD;;EACDC,UAAU,GAAG;IACX,OAAO,KAAKL,IAAZ;EACD;;EACsB,KAAlBM,MAAM,CAACC,WAAW,IAAI;IACzB,OAAQ,OAAO,KAAKpB,QAAL,EAAiB,GAAhC;EACD;;EACoB,OAAdqB,cAAc,CAACC,IAAD,EAAO;IAC1B,OAAO,IAAIb,GAAJ,CAAQa,IAAI,CAACC,IAAL,CAAUnB,QAAV,CAAR,CAAP;EACD;;EACY,OAANoB,MAAM,GAAG;IACd,OAAO,IAAIf,GAAJ,CAAQV,MAAM,GAAG0B,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAAR,CAAP;EACD;;EACW,OAALC,KAAK,CAACC,KAAD,EAAQ;IAClB,IAAIA,KAAK,YAAYb,UAAjB,IAA+B,OAAOa,KAAP,KAAiB,QAApD,EAA8D;MAC5D,OAAO,IAAIlB,GAAJ,CAAQkB,KAAR,CAAP;IACD;;IACD,IAAIA,KAAK,CAACT,UAAV,EAAsB;MACpB,OAAO,IAAIT,GAAJ,CAAQkB,KAAK,CAACT,UAAN,EAAR,CAAP;IACD;;IACD,OAAO,IAAP;EACD;;EACDN,KAAK,GAAG;IACN,IAAI,CAAC,KAAKC,IAAN,IAAc,KAAKA,IAAL,CAAUG,UAAV,KAAyB,CAA3C,EAA8C;MAC5C,KAAKH,IAAL,GAAYR,QAAZ;IACD;;IACD,IAAI,KAAKQ,IAAL,CAAU,CAAV,MAAiBL,OAArB,EAA8B;MAC5B,MAAMoB,KAAK,GAAG,IAAId,UAAJ,CAAe,KAAKD,IAAL,CAAUG,UAAV,GAAuB,CAAtC,CAAd;MACAY,KAAK,CAACC,IAAN,CAAWrB,OAAX,EAAoB,CAApB,EAAuB,CAAvB;MACAoB,KAAK,CAACE,GAAN,CAAU,KAAKjB,IAAf,EAAqB,CAArB;MACA,KAAKA,IAAL,GAAYe,KAAZ;IACD;;IACD,OAAO,KAAKf,IAAL,CAAUG,UAAV,GAAuB,CAAvB,IAA4B,KAAKH,IAAL,CAAU,KAAKA,IAAL,CAAUG,UAAV,GAAuB,CAAjC,MAAwCR,OAA3E,EAAoF;MAClF,KAAKK,IAAL,GAAY,KAAKA,IAAL,CAAUkB,QAAV,CAAmB,CAAnB,EAAsB,CAAC,CAAvB,CAAZ;IACD;EACF;;EACDC,IAAI,CAACC,GAAD,EAAM;IACR,MAAMC,KAAK,GAAG,KAAKZ,IAAL,EAAd;IACA,MAAMa,KAAK,GAAGF,GAAG,CAACX,IAAJ,EAAd;;IACA,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;MACrC,IAAID,KAAK,CAACE,MAAN,GAAeD,CAAC,GAAG,CAAvB,EAA0B;QACxB,OAAO,KAAP;MACD;;MACD,MAAME,EAAE,GAAGJ,KAAK,CAACE,CAAD,CAAhB;MACA,MAAMG,EAAE,GAAGJ,KAAK,CAACC,CAAD,CAAhB;;MACA,IAAIE,EAAE,GAAGC,EAAT,EAAa;QACX,OAAO,IAAP;MACD,CAFD,MAEO,IAAID,EAAE,GAAGC,EAAT,EAAa;QAClB,OAAO,KAAP;MACD;IACF;;IACD,OAAOL,KAAK,CAACG,MAAN,GAAeF,KAAK,CAACE,MAA5B;EACD;;EACDG,OAAO,GAAG;IACR,OAAO/B,GAAG,CAACY,cAAJ,CAAmB,KAAKC,IAAL,GAAYmB,KAAZ,GAAoBD,OAApB,EAAnB,CAAP;EACD;;EACDE,UAAU,GAAG;IACX,OAAO,KAAKpB,IAAL,EAAP;EACD;;EACDqB,aAAa,GAAG;IACd,MAAMC,EAAE,GAAG,KAAKF,UAAL,EAAX;IACA,OAAOE,EAAE,CAACA,EAAE,CAACP,MAAH,GAAY,CAAb,CAAT;EACD;;EACDf,IAAI,GAAG;IACL,OAAO,KAAKtB,QAAL,GAAgB6C,KAAhB,CAAsBzC,QAAtB,EAAgCqC,KAAhC,CAAsC,CAAtC,CAAP;EACD;;EACDK,IAAI,GAAG;IACL,OAAOC,aAAa,CAAC,KAAKJ,aAAL,EAAD,CAApB;EACD;;EACDK,IAAI,GAAG;IACL,OAAOC,cAAc,CAAC,KAAKN,aAAL,EAAD,CAArB;EACD;;EACDO,QAAQ,CAACvC,CAAD,EAAI;IACV,OAAO,IAAIF,GAAJ,CAAQ,KAAKT,QAAL,KAAkB,GAAlB,GAAwBW,CAAhC,CAAP;EACD;;EACDwC,IAAI,GAAG;IACL,IAAIC,CAAC,GAAG,KAAKC,MAAL,GAAcrD,QAAd,EAAR;;IACA,IAAI,CAACoD,CAAC,CAACE,QAAF,CAAWlD,QAAX,CAAL,EAA2B;MACzBgD,CAAC,IAAIhD,QAAL;IACD;;IACDgD,CAAC,IAAI,KAAKN,IAAL,EAAL;IACA,OAAO,IAAIrC,GAAJ,CAAQ2C,CAAR,CAAP;EACD;;EACDC,MAAM,GAAG;IACP,MAAM/B,IAAI,GAAG,KAAKA,IAAL,EAAb;;IACA,IAAIA,IAAI,CAACe,MAAL,KAAgB,CAApB,EAAuB;MACrB,OAAO,IAAI5B,GAAJ,CAAQL,QAAR,CAAP;IACD;;IACD,OAAO,IAAIK,GAAJ,CAAQa,IAAI,CAACmB,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,EAAkBlB,IAAlB,CAAuBnB,QAAvB,CAAR,CAAP;EACD;;EACDmD,KAAK,CAACtB,GAAD,EAAM;IACT,IAAI,KAAKjC,QAAL,OAAoBI,QAAxB,EAAkC;MAChC,OAAO6B,GAAP;IACD,CAFD,MAEO,IAAIA,GAAG,CAACjC,QAAJ,OAAmBI,QAAvB,EAAiC;MACtC,OAAO,IAAP;IACD;;IACD,OAAO,IAAIK,GAAJ,CAAQ,KAAKT,QAAL,KAAkBiC,GAAG,CAACjC,QAAJ,EAA1B,EAA0C,KAA1C,CAAP;EACD;;EACDwD,YAAY,CAAC7B,KAAD,EAAQ;IAClB,IAAIA,KAAK,CAAC3B,QAAN,OAAqB,KAAKA,QAAL,EAAzB,EAA0C;MACxC,OAAO,KAAP;IACD;;IACD,OAAO2B,KAAK,CAAC3B,QAAN,GAAiByD,UAAjB,CAA4B,KAAKzD,QAAL,EAA5B,CAAP;EACD;;EACD0D,aAAa,CAAC/B,KAAD,EAAQ;IACnB,IAAIA,KAAK,CAAC3B,QAAN,OAAqB,KAAKA,QAAL,EAAzB,EAA0C;MACxC,OAAO,KAAP;IACD;;IACD,OAAO,KAAKA,QAAL,GAAgByD,UAAhB,CAA2B9B,KAAK,CAAC3B,QAAN,EAA3B,CAAP;EACD;;EACD2D,UAAU,GAAG;IACX,OAAO,KAAKrC,IAAL,GAAYe,MAAZ,KAAuB,CAA9B;EACD;;EACDuB,MAAM,GAAU;IAAA,kCAANC,IAAM;MAANA,IAAM;IAAA;;IACd,OAAOpD,GAAG,CAACY,cAAJ,CAAmB,CACxB,GAAG,KAAKqB,UAAL,EADqB,EAExB,GAAGoB,OAAO,CAACD,IAAI,CAACE,GAAL,CAAS9B,GAAG,IAAIA,GAAG,CAACS,UAAJ,EAAhB,CAAD,CAFc,CAAnB,CAAP;EAID;;AA3Ic;;AA6IjB,SAASK,aAAT,CAAuBH,EAAvB,EAA2B;EACzB,MAAMoB,KAAK,GAAGpB,EAAE,CAACC,KAAH,CAAS,GAAT,CAAd;;EACA,IAAImB,KAAK,CAAC3B,MAAN,GAAe,CAAnB,EAAsB;IACpB,OAAO,EAAP;EACD;;EACD,OAAO2B,KAAK,CAACvB,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,EAAmBlB,IAAnB,CAAwB,GAAxB,CAAP;AACD;;AACD,SAAS0B,cAAT,CAAwBL,EAAxB,EAA4B;EAC1B,MAAMoB,KAAK,GAAGpB,EAAE,CAACC,KAAH,CAAS,GAAT,CAAd;EACA,OAAOmB,KAAK,CAACA,KAAK,CAAC3B,MAAN,GAAe,CAAhB,CAAZ;AACD;;AACD,SAASyB,OAAT,CAAiBG,GAAjB,EAAsB;EACpB,OAAO,GAAGL,MAAH,CAAU,GAAGK,GAAb,CAAP;AACD"},"metadata":{},"sourceType":"module"}