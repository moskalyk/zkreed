{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueueAction = void 0;\n\nvar AsyncAction_1 = require(\"./AsyncAction\");\n\nvar QueueAction = function (_super) {\n  __extends(QueueAction, _super);\n\n  function QueueAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  QueueAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay > 0) {\n      return _super.prototype.schedule.call(this, state, delay);\n    }\n\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  };\n\n  QueueAction.prototype.execute = function (state, delay) {\n    return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);\n  };\n\n  QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay != null && delay > 0 || delay == null && this.delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    return scheduler.flush(this);\n  };\n\n  return QueueAction;\n}(AsyncAction_1.AsyncAction);\n\nexports.QueueAction = QueueAction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAKA;EAAoCA;;EAElC,qBAAsBC,SAAtB,EACsBC,IADtB,EACyE;IADzE,YAEEC,kBAAMF,SAAN,EAAiBC,IAAjB,KAAsB,IAFxB;;IAAsBE;IACAA;;EAErB;;EAEMC,iCAAP,UAAgBC,KAAhB,EAA2BC,KAA3B,EAA4C;IAAjB;MAAAA;IAAiB;;IAC1C,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACb,OAAOJ,iBAAMK,QAAN,CAAcC,IAAd,CAAc,IAAd,EAAeH,KAAf,EAAsBC,KAAtB,CAAP;IACD;;IACD,KAAKA,KAAL,GAAaA,KAAb;IACA,KAAKD,KAAL,GAAaA,KAAb;IACA,KAAKL,SAAL,CAAeS,KAAf,CAAqB,IAArB;IACA,OAAO,IAAP;EACD,CARM;;EAUAL,gCAAP,UAAeC,KAAf,EAAyBC,KAAzB,EAAsC;IACpC,OAAQA,KAAK,GAAG,CAAR,IAAa,KAAKI,MAAnB,GACLR,iBAAMS,OAAN,CAAaH,IAAb,CAAa,IAAb,EAAcH,KAAd,EAAqBC,KAArB,CADK,GAEL,KAAKM,QAAL,CAAcP,KAAd,EAAqBC,KAArB,CAFF;EAGD,CAJM;;EAMGF,uCAAV,UAAyBJ,SAAzB,EAAoDa,EAApD,EAA8DP,KAA9D,EAA+E;IAAjB;MAAAA;IAAiB;;IAK7E,IAAKA,KAAK,IAAI,IAAT,IAAiBA,KAAK,GAAG,CAA1B,IAAiCA,KAAK,IAAI,IAAT,IAAiB,KAAKA,KAAL,GAAa,CAAnE,EAAuE;MACrE,OAAOJ,iBAAMY,cAAN,CAAoBN,IAApB,CAAoB,IAApB,EAAqBR,SAArB,EAAgCa,EAAhC,EAAoCP,KAApC,CAAP;IACD;;IAED,OAAON,SAAS,CAACS,KAAV,CAAgB,IAAhB,CAAP;EACD,CAVS;;EAWZ;AAAC,CAlCD,CAAoCM,yBAApC;;AAAaC","names":["__extends","scheduler","work","_super","_this","QueueAction","state","delay","schedule","call","flush","closed","execute","_execute","id","requestAsyncId","AsyncAction_1","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/scheduler/QueueAction.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}