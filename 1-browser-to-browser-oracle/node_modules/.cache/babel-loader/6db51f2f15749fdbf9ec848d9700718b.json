{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { AsyncSerialScheduler } from \"./_scheduler\";\nimport Observable from \"./observable\";\nimport unsubscribe from \"./unsubscribe\";\n/**\n * Maps the values emitted by another observable to different values.\n * To be applied to an input observable using `pipe()`.\n */\n\nfunction map(mapper) {\n  return observable => {\n    return new Observable(observer => {\n      const scheduler = new AsyncSerialScheduler(observer);\n      const subscription = observable.subscribe({\n        complete() {\n          scheduler.complete();\n        },\n\n        error(error) {\n          scheduler.error(error);\n        },\n\n        next(input) {\n          scheduler.schedule(next => __awaiter(this, void 0, void 0, function* () {\n            const mapped = yield mapper(input);\n            next(mapped);\n          }));\n        }\n\n      });\n      return () => unsubscribe(subscription);\n    });\n  };\n}\n\nexport default map;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","AsyncSerialScheduler","Observable","unsubscribe","map","mapper","observable","observer","scheduler","subscription","subscribe","complete","error","input","schedule","mapped"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/observable-fns/dist.esm/map.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { AsyncSerialScheduler } from \"./_scheduler\";\nimport Observable from \"./observable\";\nimport unsubscribe from \"./unsubscribe\";\n/**\n * Maps the values emitted by another observable to different values.\n * To be applied to an input observable using `pipe()`.\n */\nfunction map(mapper) {\n    return (observable) => {\n        return new Observable(observer => {\n            const scheduler = new AsyncSerialScheduler(observer);\n            const subscription = observable.subscribe({\n                complete() {\n                    scheduler.complete();\n                },\n                error(error) {\n                    scheduler.error(error);\n                },\n                next(input) {\n                    scheduler.schedule((next) => __awaiter(this, void 0, void 0, function* () {\n                        const mapped = yield mapper(input);\n                        next(mapped);\n                    }));\n                }\n            });\n            return () => unsubscribe(subscription);\n        });\n    };\n}\nexport default map;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;EACrF,SAASC,KAAT,CAAeC,KAAf,EAAsB;IAAE,OAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;MAAEA,OAAO,CAACD,KAAD,CAAP;IAAiB,CAA5C,CAApC;EAAoF;;EAC5G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;IACvD,SAASC,SAAT,CAAmBJ,KAAnB,EAA0B;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;MAA8B,CAApC,CAAqC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC3F,SAASC,QAAT,CAAkBR,KAAlB,EAAyB;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;MAAkC,CAAxC,CAAyC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC9F,SAASF,IAAT,CAAcI,MAAd,EAAsB;MAAEA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;IAAsF;;IAC9GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;EACH,CALM,CAAP;AAMH,CARD;;AASA,SAASO,oBAAT,QAAqC,cAArC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;AACA;AACA;AACA;;AACA,SAASC,GAAT,CAAaC,MAAb,EAAqB;EACjB,OAAQC,UAAD,IAAgB;IACnB,OAAO,IAAIJ,UAAJ,CAAeK,QAAQ,IAAI;MAC9B,MAAMC,SAAS,GAAG,IAAIP,oBAAJ,CAAyBM,QAAzB,CAAlB;MACA,MAAME,YAAY,GAAGH,UAAU,CAACI,SAAX,CAAqB;QACtCC,QAAQ,GAAG;UACPH,SAAS,CAACG,QAAV;QACH,CAHqC;;QAItCC,KAAK,CAACA,KAAD,EAAQ;UACTJ,SAAS,CAACI,KAAV,CAAgBA,KAAhB;QACH,CANqC;;QAOtClB,IAAI,CAACmB,KAAD,EAAQ;UACRL,SAAS,CAACM,QAAV,CAAoBpB,IAAD,IAAUZ,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;YACtE,MAAMiC,MAAM,GAAG,MAAMV,MAAM,CAACQ,KAAD,CAA3B;YACAnB,IAAI,CAACqB,MAAD,CAAJ;UACH,CAHqC,CAAtC;QAIH;;MAZqC,CAArB,CAArB;MAcA,OAAO,MAAMZ,WAAW,CAACM,YAAD,CAAxB;IACH,CAjBM,CAAP;EAkBH,CAnBD;AAoBH;;AACD,eAAeL,GAAf"},"metadata":{},"sourceType":"module"}