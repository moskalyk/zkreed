{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.throttle = exports.defaultThrottleConfig = void 0;\n\nvar lift_1 = require(\"../util/lift\");\n\nvar OperatorSubscriber_1 = require(\"./OperatorSubscriber\");\n\nvar innerFrom_1 = require(\"../observable/innerFrom\");\n\nexports.defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\nfunction throttle(durationSelector, config) {\n  if (config === void 0) {\n    config = exports.defaultThrottleConfig;\n  }\n\n  return lift_1.operate(function (source, subscriber) {\n    var leading = config.leading,\n        trailing = config.trailing;\n    var hasValue = false;\n    var sendValue = null;\n    var throttled = null;\n    var isComplete = false;\n\n    var endThrottling = function () {\n      throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();\n      throttled = null;\n\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n\n    var cleanupThrottling = function () {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n\n    var startThrottle = function (value) {\n      return throttled = innerFrom_1.innerFrom(durationSelector(value)).subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling));\n    };\n\n    var send = function () {\n      if (hasValue) {\n        hasValue = false;\n        var value = sendValue;\n        sendValue = null;\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n\n    source.subscribe(OperatorSubscriber_1.createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      sendValue = value;\n      !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n    }, function () {\n      isComplete = true;\n      !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n    }));\n  });\n}\n\nexports.throttle = throttle;","map":{"version":3,"mappings":";;;;;;;AAGA;;AACA;;AACA;;AAOaA,gCAAwC;EACnDC,OAAO,EAAE,IAD0C;EAEnDC,QAAQ,EAAE;AAFyC,CAAxC;;AAmDb,SAAgBC,QAAhB,CACEC,gBADF,EAEEC,MAFF,EAEgD;EAA9C;IAAAA,SAAyBL,6BAAzB;EAA8C;;EAE9C,OAAOM,eAAQ,UAACC,MAAD,EAASC,UAAT,EAAmB;IACxB,WAAO,GAAeH,MAAM,QAA5B;IAAA,IAASH,QAAQ,GAAKG,MAAM,SAA5B;IACR,IAAII,QAAQ,GAAG,KAAf;IACA,IAAIC,SAAS,GAAa,IAA1B;IACA,IAAIC,SAAS,GAAwB,IAArC;IACA,IAAIC,UAAU,GAAG,KAAjB;;IAEA,IAAMC,aAAa,GAAG;MACpBF,SAAS,SAAT,aAAS,WAAT,GAAS,MAAT,YAAS,CAAEG,WAAX;MACAH,SAAS,GAAG,IAAZ;;MACA,IAAIT,QAAJ,EAAc;QACZa,IAAI;QACJH,UAAU,IAAIJ,UAAU,CAACQ,QAAX,EAAd;MACD;IACF,CAPD;;IASA,IAAMC,iBAAiB,GAAG;MACxBN,SAAS,GAAG,IAAZ;MACAC,UAAU,IAAIJ,UAAU,CAACQ,QAAX,EAAd;IACD,CAHD;;IAKA,IAAME,aAAa,GAAG,UAACC,KAAD,EAAS;MAC7B,OAACR,SAAS,GAAGS,sBAAUhB,gBAAgB,CAACe,KAAD,CAA1B,EAAmCE,SAAnC,CAA6CC,8CAAyBd,UAAzB,EAAqCK,aAArC,EAAoDI,iBAApD,CAA7C,CAAb;IAAkI,CADpI;;IAGA,IAAMF,IAAI,GAAG;MACX,IAAIN,QAAJ,EAAc;QAIZA,QAAQ,GAAG,KAAX;QACA,IAAMU,KAAK,GAAGT,SAAd;QACAA,SAAS,GAAG,IAAZ;QAEAF,UAAU,CAACe,IAAX,CAAgBJ,KAAhB;QACA,CAACP,UAAD,IAAeM,aAAa,CAACC,KAAD,CAA5B;MACD;IACF,CAZD;;IAcAZ,MAAM,CAACc,SAAP,CACEC,8CACEd,UADF,EAOE,UAACW,KAAD,EAAM;MACJV,QAAQ,GAAG,IAAX;MACAC,SAAS,GAAGS,KAAZ;MACA,EAAER,SAAS,IAAI,CAACA,SAAS,CAACa,MAA1B,MAAsCvB,OAAO,GAAGc,IAAI,EAAP,GAAYG,aAAa,CAACC,KAAD,CAAtE;IACD,CAXH,EAYE;MACEP,UAAU,GAAG,IAAb;MACA,EAAEV,QAAQ,IAAIO,QAAZ,IAAwBE,SAAxB,IAAqC,CAACA,SAAS,CAACa,MAAlD,KAA6DhB,UAAU,CAACQ,QAAX,EAA7D;IACD,CAfH,CADF;EAmBD,CAzDM,CAAP;AA0DD;;AA9DDhB","names":["exports","leading","trailing","throttle","durationSelector","config","lift_1","source","subscriber","hasValue","sendValue","throttled","isComplete","endThrottling","unsubscribe","send","complete","cleanupThrottling","startThrottle","value","innerFrom_1","subscribe","OperatorSubscriber_1","next","closed"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/operators/throttle.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false,\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.svg)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, throttle, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(() => interval(1000)));\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return A function that returns an Observable that performs the throttle\n * operation to limit the rate of emissions from the source.\n */\nexport function throttle<T>(\n  durationSelector: (value: T) => ObservableInput<any>,\n  config: ThrottleConfig = defaultThrottleConfig\n): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    const { leading, trailing } = config;\n    let hasValue = false;\n    let sendValue: T | null = null;\n    let throttled: Subscription | null = null;\n    let isComplete = false;\n\n    const endThrottling = () => {\n      throttled?.unsubscribe();\n      throttled = null;\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n\n    const cleanupThrottling = () => {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n\n    const startThrottle = (value: T) =>\n      (throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\n\n    const send = () => {\n      if (hasValue) {\n        // Ensure we clear out our value and hasValue flag\n        // before we emit, otherwise reentrant code can cause\n        // issues here.\n        hasValue = false;\n        const value = sendValue!;\n        sendValue = null;\n        // Emit the value.\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        // Regarding the presence of throttled.closed in the following\n        // conditions, if a synchronous duration selector is specified - weird,\n        // but legal - an already-closed subscription will be assigned to\n        // throttled, so the subscription's closed property needs to be checked,\n        // too.\n        (value) => {\n          hasValue = true;\n          sendValue = value;\n          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n        },\n        () => {\n          isComplete = true;\n          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"script"}