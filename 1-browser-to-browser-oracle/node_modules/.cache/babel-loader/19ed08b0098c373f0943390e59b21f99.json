{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst errcode = require('err-code');\n\nconst {\n  codes\n} = require('../errors');\n\nconst PeerId = require('peer-id');\n\nconst {\n  equals: uint8arrayEquals\n} = require('uint8arrays/equals');\n/**\n * @typedef {import('./types').PeerStore} PeerStore\n * @typedef {import('./types').KeyBook} KeyBook\n * @typedef {import('libp2p-interfaces/src/keys/types').PublicKey} PublicKey\n */\n\n\nconst log = Object.assign(debug('libp2p:peer-store:key-book'), {\n  error: debug('libp2p:peer-store:key-book:err')\n});\nconst EVENT_NAME = 'change:pubkey';\n/**\n * @implements {KeyBook}\n */\n\nclass PeerStoreKeyBook {\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer.\n   *\n   * @param {PeerStore[\"emit\"]} emit\n   * @param {import('./types').Store} store\n   */\n  constructor(emit, store) {\n    this._emit = emit;\n    this._store = store;\n  }\n  /**\n   * Set the Peer public key\n   *\n   * @param {PeerId} peerId\n   * @param {PublicKey} publicKey\n   */\n\n\n  async set(peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    if (!publicKey) {\n      log.error('publicKey must be an instance of PublicKey to store data');\n      throw errcode(new Error('publicKey must be an instance of PublicKey'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('set await write lock');\n    const release = await this._store.lock.writeLock();\n    log('set got write lock');\n    let updatedKey = false;\n\n    try {\n      try {\n        const existing = await this._store.load(peerId);\n\n        if (existing.pubKey && uint8arrayEquals(existing.pubKey.bytes, publicKey.bytes)) {\n          return;\n        }\n      } catch (\n      /** @type {any} */\n      err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err;\n        }\n      }\n\n      await this._store.patchOrCreate(peerId, {\n        pubKey: publicKey\n      });\n      updatedKey = true;\n    } finally {\n      log('set release write lock');\n      release();\n    }\n\n    if (updatedKey) {\n      this._emit(EVENT_NAME, {\n        peerId,\n        pubKey: publicKey\n      });\n    }\n  }\n  /**\n   * Get Public key of the given PeerId, if stored\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  async get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('get await write lock');\n    const release = await this._store.lock.readLock();\n    log('get got write lock');\n\n    try {\n      const peer = await this._store.load(peerId);\n      return peer.pubKey;\n    } catch (\n    /** @type {any} */\n    err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log('get release write lock');\n      release();\n    }\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  async delete(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('delete await write lock');\n    const release = await this._store.lock.writeLock();\n    log('delete got write lock');\n\n    try {\n      await this._store.patchOrCreate(peerId, {\n        pubKey: undefined\n      });\n    } finally {\n      log('delete release write lock');\n      release();\n    }\n\n    this._emit(EVENT_NAME, {\n      peerId,\n      pubKey: undefined\n    });\n  }\n\n}\n\nmodule.exports = PeerStoreKeyBook;","map":{"version":3,"names":["debug","require","errcode","codes","PeerId","equals","uint8arrayEquals","log","Object","assign","error","EVENT_NAME","PeerStoreKeyBook","constructor","emit","store","_emit","_store","set","peerId","publicKey","isPeerId","Error","ERR_INVALID_PARAMETERS","release","lock","writeLock","updatedKey","existing","load","pubKey","bytes","err","code","ERR_NOT_FOUND","patchOrCreate","get","readLock","peer","delete","undefined","module","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/libp2p/src/peer-store/key-book.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst { codes } = require('../errors')\nconst PeerId = require('peer-id')\nconst { equals: uint8arrayEquals } = require('uint8arrays/equals')\n\n/**\n * @typedef {import('./types').PeerStore} PeerStore\n * @typedef {import('./types').KeyBook} KeyBook\n * @typedef {import('libp2p-interfaces/src/keys/types').PublicKey} PublicKey\n */\n\nconst log = Object.assign(debug('libp2p:peer-store:key-book'), {\n  error: debug('libp2p:peer-store:key-book:err')\n})\n\nconst EVENT_NAME = 'change:pubkey'\n\n/**\n * @implements {KeyBook}\n */\nclass PeerStoreKeyBook {\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer.\n   *\n   * @param {PeerStore[\"emit\"]} emit\n   * @param {import('./types').Store} store\n   */\n  constructor (emit, store) {\n    this._emit = emit\n    this._store = store\n  }\n\n  /**\n   * Set the Peer public key\n   *\n   * @param {PeerId} peerId\n   * @param {PublicKey} publicKey\n   */\n  async set (peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    if (!publicKey) {\n      log.error('publicKey must be an instance of PublicKey to store data')\n      throw errcode(new Error('publicKey must be an instance of PublicKey'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('set await write lock')\n    const release = await this._store.lock.writeLock()\n    log('set got write lock')\n\n    let updatedKey = false\n\n    try {\n      try {\n        const existing = await this._store.load(peerId)\n\n        if (existing.pubKey && uint8arrayEquals(existing.pubKey.bytes, publicKey.bytes)) {\n          return\n        }\n      } catch (/** @type {any} */ err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err\n        }\n      }\n\n      await this._store.patchOrCreate(peerId, {\n        pubKey: publicKey\n      })\n      updatedKey = true\n    } finally {\n      log('set release write lock')\n      release()\n    }\n\n    if (updatedKey) {\n      this._emit(EVENT_NAME, { peerId, pubKey: publicKey })\n    }\n  }\n\n  /**\n   * Get Public key of the given PeerId, if stored\n   *\n   * @param {PeerId} peerId\n   */\n  async get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('get await write lock')\n    const release = await this._store.lock.readLock()\n    log('get got write lock')\n\n    try {\n      const peer = await this._store.load(peerId)\n\n      return peer.pubKey\n    } catch (/** @type {any} */ err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err\n      }\n    } finally {\n      log('get release write lock')\n      release()\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  async delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('delete await write lock')\n    const release = await this._store.lock.writeLock()\n    log('delete got write lock')\n\n    try {\n      await this._store.patchOrCreate(peerId, {\n        pubKey: undefined\n      })\n    } finally {\n      log('delete release write lock')\n      release()\n    }\n\n    this._emit(EVENT_NAME, { peerId, pubKey: undefined })\n  }\n}\n\nmodule.exports = PeerStoreKeyBook\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}