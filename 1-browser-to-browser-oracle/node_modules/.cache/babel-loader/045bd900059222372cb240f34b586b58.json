{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_OBSERVER = exports.SafeSubscriber = exports.Subscriber = void 0;\n\nvar isFunction_1 = require(\"./util/isFunction\");\n\nvar Subscription_1 = require(\"./Subscription\");\n\nvar config_1 = require(\"./config\");\n\nvar reportUnhandledError_1 = require(\"./util/reportUnhandledError\");\n\nvar noop_1 = require(\"./util/noop\");\n\nvar NotificationFactories_1 = require(\"./NotificationFactories\");\n\nvar timeoutProvider_1 = require(\"./scheduler/timeoutProvider\");\n\nvar errorContext_1 = require(\"./util/errorContext\");\n\nvar Subscriber = function (_super) {\n  __extends(Subscriber, _super);\n\n  function Subscriber(destination) {\n    var _this = _super.call(this) || this;\n\n    _this.isStopped = false;\n\n    if (destination) {\n      _this.destination = destination;\n\n      if (Subscription_1.isSubscription(destination)) {\n        destination.add(_this);\n      }\n    } else {\n      _this.destination = exports.EMPTY_OBSERVER;\n    }\n\n    return _this;\n  }\n\n  Subscriber.create = function (next, error, complete) {\n    return new SafeSubscriber(next, error, complete);\n  };\n\n  Subscriber.prototype.next = function (value) {\n    if (this.isStopped) {\n      handleStoppedNotification(NotificationFactories_1.nextNotification(value), this);\n    } else {\n      this._next(value);\n    }\n  };\n\n  Subscriber.prototype.error = function (err) {\n    if (this.isStopped) {\n      handleStoppedNotification(NotificationFactories_1.errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n\n  Subscriber.prototype.complete = function () {\n    if (this.isStopped) {\n      handleStoppedNotification(NotificationFactories_1.COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.isStopped = true;\n\n      _super.prototype.unsubscribe.call(this);\n\n      this.destination = null;\n    }\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  };\n\n  Subscriber.prototype._complete = function () {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  };\n\n  return Subscriber;\n}(Subscription_1.Subscription);\n\nexports.Subscriber = Subscriber;\nvar _bind = Function.prototype.bind;\n\nfunction bind(fn, thisArg) {\n  return _bind.call(fn, thisArg);\n}\n\nvar ConsumerObserver = function () {\n  function ConsumerObserver(partialObserver) {\n    this.partialObserver = partialObserver;\n  }\n\n  ConsumerObserver.prototype.next = function (value) {\n    var partialObserver = this.partialObserver;\n\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  };\n\n  ConsumerObserver.prototype.error = function (err) {\n    var partialObserver = this.partialObserver;\n\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  };\n\n  ConsumerObserver.prototype.complete = function () {\n    var partialObserver = this.partialObserver;\n\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  };\n\n  return ConsumerObserver;\n}();\n\nvar SafeSubscriber = function (_super) {\n  __extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    var partialObserver;\n\n    if (isFunction_1.isFunction(observerOrNext) || !observerOrNext) {\n      partialObserver = {\n        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,\n        error: error !== null && error !== void 0 ? error : undefined,\n        complete: complete !== null && complete !== void 0 ? complete : undefined\n      };\n    } else {\n      var context_1;\n\n      if (_this && config_1.config.useDeprecatedNextContext) {\n        context_1 = Object.create(observerOrNext);\n\n        context_1.unsubscribe = function () {\n          return _this.unsubscribe();\n        };\n\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context_1),\n          error: observerOrNext.error && bind(observerOrNext.error, context_1),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)\n        };\n      } else {\n        partialObserver = observerOrNext;\n      }\n    }\n\n    _this.destination = new ConsumerObserver(partialObserver);\n    return _this;\n  }\n\n  return SafeSubscriber;\n}(Subscriber);\n\nexports.SafeSubscriber = SafeSubscriber;\n\nfunction handleUnhandledError(error) {\n  if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n    errorContext_1.captureError(error);\n  } else {\n    reportUnhandledError_1.reportUnhandledError(error);\n  }\n}\n\nfunction defaultErrorHandler(err) {\n  throw err;\n}\n\nfunction handleStoppedNotification(notification, subscriber) {\n  var onStoppedNotification = config_1.config.onStoppedNotification;\n  onStoppedNotification && timeoutProvider_1.timeoutProvider.setTimeout(function () {\n    return onStoppedNotification(notification, subscriber);\n  });\n}\n\nexports.EMPTY_OBSERVER = {\n  closed: true,\n  next: noop_1.noop,\n  error: defaultErrorHandler,\n  complete: noop_1.noop\n};","map":{"version":3,"mappings":"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","names":["__extends","destination","_super","_this","Subscription_1","add","exports","Subscriber","next","error","complete","SafeSubscriber","value","isStopped","handleStoppedNotification","NotificationFactories_1","_next","err","_error","_complete","closed","unsubscribe","call","_bind","Function","prototype","bind","fn","thisArg","partialObserver","ConsumerObserver","handleUnhandledError","observerOrNext","isFunction_1","undefined","context_1","config_1","useDeprecatedNextContext","Object","create","useDeprecatedSynchronousErrorHandling","errorContext_1","reportUnhandledError_1","defaultErrorHandler","notification","subscriber","onStoppedNotification","timeoutProvider_1","setTimeout","noop_1"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\n/**\n * Internal optimization only, DO NOT EXPOSE.\n * @internal\n */\nclass ConsumerObserver<T> implements Observer<T> {\n  constructor(private partialObserver: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    const { partialObserver } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n\n  error(err: any): void {\n    const { partialObserver } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n\n  complete(): void {\n    const { partialObserver } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let partialObserver: Partial<Observer<T>>;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      partialObserver = {\n        next: (observerOrNext ?? undefined) as (((value: T) => void) | undefined),\n        error: error ?? undefined,\n        complete: complete ?? undefined,\n      };\n    } else {\n      // The first argument is a partial observer.\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context),\n        };\n      } else {\n        // The \"normal\" path. Just use the partial observer directly.\n        partialObserver = observerOrNext;\n      }\n    }\n\n    // Wrap the partial observer to ensure it's a full observer, and\n    // make sure proper error handling is accounted for.\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\n\nfunction handleUnhandledError(error: any) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    // Ideal path, we report this as an unhandled error,\n    // which is thrown on a new call stack.\n    reportUnhandledError(error);\n  }\n}\n\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n"]},"metadata":{},"sourceType":"script"}