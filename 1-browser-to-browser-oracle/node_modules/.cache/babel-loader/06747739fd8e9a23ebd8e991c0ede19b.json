{"ast":null,"code":"\"use strict\";\n/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.Signature = exports.Point = exports.CURVE = void 0;\n\nconst nodeCrypto = require(\"crypto\");\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst _3n = BigInt(3);\n\nconst _8n = BigInt(8);\n\nconst POW_2_256 = _2n ** BigInt(256);\n\nconst CURVE = {\n  a: _0n,\n  b: BigInt(7),\n  P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n  n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n  h: _1n,\n  Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n  Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee')\n};\nexports.CURVE = CURVE;\n\nfunction weistrass(x) {\n  const {\n    a,\n    b\n  } = CURVE;\n  const x2 = mod(x * x);\n  const x3 = mod(x2 * x);\n  return mod(x3 + a * x + b);\n}\n\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\n\nclass JacobianPoint {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  static fromAffine(p) {\n    if (!(p instanceof Point)) {\n      throw new TypeError('JacobianPoint#fromAffine: expected Point');\n    }\n\n    return new JacobianPoint(p.x, p.y, _1n);\n  }\n\n  static toAffineBatch(points) {\n    const toInv = invertBatch(points.map(p => p.z));\n    return points.map((p, i) => p.toAffine(toInv[i]));\n  }\n\n  static normalizeZ(points) {\n    return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n  }\n\n  equals(other) {\n    if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    const Z1Z1 = mod(Z1 ** _2n);\n    const Z2Z2 = mod(Z2 ** _2n);\n    const U1 = mod(X1 * Z2Z2);\n    const U2 = mod(X2 * Z1Z1);\n    const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n    const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n    return U1 === U2 && S1 === S2;\n  }\n\n  negate() {\n    return new JacobianPoint(this.x, mod(-this.y), this.z);\n  }\n\n  double() {\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const A = mod(X1 ** _2n);\n    const B = mod(Y1 ** _2n);\n    const C = mod(B ** _2n);\n    const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\n    const E = mod(_3n * A);\n    const F = mod(E ** _2n);\n    const X3 = mod(F - _2n * D);\n    const Y3 = mod(E * (D - X3) - _8n * C);\n    const Z3 = mod(_2n * Y1 * Z1);\n    return new JacobianPoint(X3, Y3, Z3);\n  }\n\n  add(other) {\n    if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    if (X2 === _0n || Y2 === _0n) return this;\n    if (X1 === _0n || Y1 === _0n) return other;\n    const Z1Z1 = mod(Z1 ** _2n);\n    const Z2Z2 = mod(Z2 ** _2n);\n    const U1 = mod(X1 * Z2Z2);\n    const U2 = mod(X2 * Z1Z1);\n    const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n    const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n    const H = mod(U2 - U1);\n    const r = mod(S2 - S1);\n\n    if (H === _0n) {\n      if (r === _0n) {\n        return this.double();\n      } else {\n        return JacobianPoint.ZERO;\n      }\n    }\n\n    const HH = mod(H ** _2n);\n    const HHH = mod(H * HH);\n    const V = mod(U1 * HH);\n    const X3 = mod(r ** _2n - HHH - _2n * V);\n    const Y3 = mod(r * (V - X3) - S1 * HHH);\n    const Z3 = mod(Z1 * Z2 * H);\n    return new JacobianPoint(X3, Y3, Z3);\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  multiplyUnsafe(scalar) {\n    let n = normalizeScalar(scalar);\n    const G = JacobianPoint.BASE;\n    const P0 = JacobianPoint.ZERO;\n    if (n === _0n) return P0;\n    if (n === _1n) return this;\n\n    if (!USE_ENDOMORPHISM) {\n      let p = P0;\n      let d = this;\n\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n\n      return p;\n    }\n\n    let {\n      k1neg,\n      k1,\n      k2neg,\n      k2\n    } = splitScalarEndo(n);\n    let k1p = P0;\n    let k2p = P0;\n    let d = this;\n\n    while (k1 > _0n || k2 > _0n) {\n      if (k1 & _1n) k1p = k1p.add(d);\n      if (k2 & _1n) k2p = k2p.add(d);\n      d = d.double();\n      k1 >>= _1n;\n      k2 >>= _1n;\n    }\n\n    if (k1neg) k1p = k1p.negate();\n    if (k2neg) k2p = k2p.negate();\n    k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n    return k1p.add(k2p);\n  }\n\n  precomputeWindow(W) {\n    const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n    const points = [];\n    let p = this;\n    let base = p;\n\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n\n      for (let i = 1; i < 2 ** (W - 1); i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n\n      p = base.double();\n    }\n\n    return points;\n  }\n\n  wNAF(n, affinePoint) {\n    if (!affinePoint && this.equals(JacobianPoint.BASE)) affinePoint = Point.BASE;\n    const W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n\n    if (256 % W) {\n      throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n    }\n\n    let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n\n    if (!precomputes) {\n      precomputes = this.precomputeWindow(W);\n\n      if (affinePoint && W !== 1) {\n        precomputes = JacobianPoint.normalizeZ(precomputes);\n        pointPrecomputes.set(affinePoint, precomputes);\n      }\n    }\n\n    let p = JacobianPoint.ZERO;\n    let f = JacobianPoint.ZERO;\n    const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n    const windowSize = 2 ** (W - 1);\n    const mask = BigInt(2 ** W - 1);\n    const maxNumber = 2 ** W;\n    const shiftBy = BigInt(W);\n\n    for (let window = 0; window < windows; window++) {\n      const offset = window * windowSize;\n      let wbits = Number(n & mask);\n      n >>= shiftBy;\n\n      if (wbits > windowSize) {\n        wbits -= maxNumber;\n        n += _1n;\n      }\n\n      if (wbits === 0) {\n        let pr = precomputes[offset];\n        if (window % 2) pr = pr.negate();\n        f = f.add(pr);\n      } else {\n        let cached = precomputes[offset + Math.abs(wbits) - 1];\n        if (wbits < 0) cached = cached.negate();\n        p = p.add(cached);\n      }\n    }\n\n    return {\n      p,\n      f\n    };\n  }\n\n  multiply(scalar, affinePoint) {\n    let n = normalizeScalar(scalar);\n    let point;\n    let fake;\n\n    if (USE_ENDOMORPHISM) {\n      const {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      } = splitScalarEndo(n);\n      let {\n        p: k1p,\n        f: f1p\n      } = this.wNAF(k1, affinePoint);\n      let {\n        p: k2p,\n        f: f2p\n      } = this.wNAF(k2, affinePoint);\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n      point = k1p.add(k2p);\n      fake = f1p.add(f2p);\n    } else {\n      const {\n        p,\n        f\n      } = this.wNAF(n, affinePoint);\n      point = p;\n      fake = f;\n    }\n\n    return JacobianPoint.normalizeZ([point, fake])[0];\n  }\n\n  toAffine() {\n    let invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n    const {\n      x,\n      y,\n      z\n    } = this;\n    const iz1 = invZ;\n    const iz2 = mod(iz1 * iz1);\n    const iz3 = mod(iz2 * iz1);\n    const ax = mod(x * iz2);\n    const ay = mod(y * iz3);\n    const zz = mod(z * iz1);\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return new Point(ax, ay);\n  }\n\n}\n\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  _setWindowSize(windowSize) {\n    this._WINDOW_SIZE = windowSize;\n    pointPrecomputes.delete(this);\n  }\n\n  static fromCompressedHex(bytes) {\n    const isShort = bytes.length === 32;\n    const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n    if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n    const y2 = weistrass(x);\n    let y = sqrtMod(y2);\n    const isYOdd = (y & _1n) === _1n;\n\n    if (isShort) {\n      if (isYOdd) y = mod(-y);\n    } else {\n      const isFirstByteOdd = (bytes[0] & 1) === 1;\n      if (isFirstByteOdd !== isYOdd) y = mod(-y);\n    }\n\n    const point = new Point(x, y);\n    point.assertValidity();\n    return point;\n  }\n\n  static fromUncompressedHex(bytes) {\n    const x = bytesToNumber(bytes.subarray(1, 33));\n    const y = bytesToNumber(bytes.subarray(33, 65));\n    const point = new Point(x, y);\n    point.assertValidity();\n    return point;\n  }\n\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex);\n    const len = bytes.length;\n    const header = bytes[0];\n\n    if (len === 32 || len === 33 && (header === 0x02 || header === 0x03)) {\n      return this.fromCompressedHex(bytes);\n    }\n\n    if (len === 65 && header === 0x04) return this.fromUncompressedHex(bytes);\n    throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n  }\n\n  static fromPrivateKey(privateKey) {\n    return Point.BASE.multiply(normalizePrivateKey(privateKey));\n  }\n\n  static fromSignature(msgHash, signature, recovery) {\n    msgHash = ensureBytes(msgHash);\n    const h = truncateHash(msgHash);\n    const {\n      r,\n      s\n    } = normalizeSignature(signature);\n\n    if (recovery !== 0 && recovery !== 1) {\n      throw new Error('Cannot recover signature: invalid recovery bit');\n    }\n\n    if (h === _0n) throw new Error('Cannot recover signature: msgHash cannot be 0');\n    const prefix = recovery & 1 ? '03' : '02';\n    const R = Point.fromHex(prefix + numTo32bStr(r));\n    const {\n      n\n    } = CURVE;\n    const rinv = invert(r, n);\n    const u1 = mod(-h * rinv, n);\n    const u2 = mod(s * rinv, n);\n    const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n    if (!Q) throw new Error('Cannot recover signature: point at infinify');\n    Q.assertValidity();\n    return Q;\n  }\n\n  toRawBytes() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return hexToBytes(this.toHex(isCompressed));\n  }\n\n  toHex() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const x = numTo32bStr(this.x);\n\n    if (isCompressed) {\n      const prefix = this.y & _1n ? '03' : '02';\n      return `${prefix}${x}`;\n    } else {\n      return `04${x}${numTo32bStr(this.y)}`;\n    }\n  }\n\n  toHexX() {\n    return this.toHex(true).slice(2);\n  }\n\n  toRawX() {\n    return this.toRawBytes(true).slice(1);\n  }\n\n  assertValidity() {\n    const msg = 'Point is not on elliptic curve';\n    const {\n      x,\n      y\n    } = this;\n    if (!isValidFieldElement(x) || !isValidFieldElement(y)) throw new Error(msg);\n    const left = mod(y * y);\n    const right = weistrass(x);\n    if (mod(left - right) !== _0n) throw new Error(msg);\n  }\n\n  equals(other) {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  negate() {\n    return new Point(this.x, mod(-this.y));\n  }\n\n  double() {\n    return JacobianPoint.fromAffine(this).double().toAffine();\n  }\n\n  add(other) {\n    return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  multiply(scalar) {\n    return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n  }\n\n  multiplyAndAddUnsafe(Q, a, b) {\n    const P = JacobianPoint.fromAffine(this);\n    const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n    const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n    const sum = aP.add(bQ);\n    return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n  }\n\n}\n\nexports.Point = Point;\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\n\nfunction sliceDER(s) {\n  return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\n\nfunction parseDERInt(data) {\n  if (data.length < 2 || data[0] !== 0x02) {\n    throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n  }\n\n  const len = data[1];\n  const res = data.subarray(2, len + 2);\n\n  if (!len || res.length !== len) {\n    throw new Error(`Invalid signature integer: wrong length`);\n  }\n\n  if (res[0] === 0x00 && res[1] <= 0x7f) {\n    throw new Error('Invalid signature integer: trailing length');\n  }\n\n  return {\n    data: bytesToNumber(res),\n    left: data.subarray(len + 2)\n  };\n}\n\nfunction parseDERSignature(data) {\n  if (data.length < 2 || data[0] != 0x30) {\n    throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n  }\n\n  if (data[1] !== data.length - 2) {\n    throw new Error('Invalid signature: incorrect length');\n  }\n\n  const {\n    data: r,\n    left: sBytes\n  } = parseDERInt(data.subarray(2));\n  const {\n    data: s,\n    left: rBytesLeft\n  } = parseDERInt(sBytes);\n\n  if (rBytesLeft.length) {\n    throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n  }\n\n  return {\n    r,\n    s\n  };\n}\n\nclass Signature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n\n  static fromCompact(hex) {\n    const arr = isUint8a(hex);\n    const name = 'Signature.fromCompact';\n    if (typeof hex !== 'string' && !arr) throw new TypeError(`${name}: Expected string or Uint8Array`);\n    const str = arr ? bytesToHex(hex) : hex;\n    if (str.length !== 128) throw new Error(`${name}: Expected 64-byte hex`);\n    return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n  }\n\n  static fromDER(hex) {\n    const arr = isUint8a(hex);\n    if (typeof hex !== 'string' && !arr) throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n    const {\n      r,\n      s\n    } = parseDERSignature(arr ? hex : hexToBytes(hex));\n    return new Signature(r, s);\n  }\n\n  static fromHex(hex) {\n    return this.fromDER(hex);\n  }\n\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!isWithinCurveOrder(r)) throw new Error('Invalid Signature: r must be 0 < r < n');\n    if (!isWithinCurveOrder(s)) throw new Error('Invalid Signature: s must be 0 < s < n');\n  }\n\n  hasHighS() {\n    const HALF = CURVE.n >> _1n;\n    return this.s > HALF;\n  }\n\n  normalizeS() {\n    return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n  }\n\n  toDERRawBytes() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return hexToBytes(this.toDERHex(isCompressed));\n  }\n\n  toDERHex() {\n    let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const sHex = sliceDER(numberToHexUnpadded(this.s));\n    if (isCompressed) return sHex;\n    const rHex = sliceDER(numberToHexUnpadded(this.r));\n    const rLen = numberToHexUnpadded(rHex.length / 2);\n    const sLen = numberToHexUnpadded(sHex.length / 2);\n    const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n    return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n  }\n\n  toRawBytes() {\n    return this.toDERRawBytes();\n  }\n\n  toHex() {\n    return this.toDERHex();\n  }\n\n  toCompactRawBytes() {\n    return hexToBytes(this.toCompactHex());\n  }\n\n  toCompactHex() {\n    return numTo32bStr(this.r) + numTo32bStr(this.s);\n  }\n\n}\n\nexports.Signature = Signature;\n\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  if (!arrays.every(isUint8a)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n\n  return result;\n}\n\nfunction isUint8a(bytes) {\n  return bytes instanceof Uint8Array;\n}\n\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\n\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  let hex = '';\n\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n\n  return hex;\n}\n\nfunction numTo32bStr(num) {\n  if (num > POW_2_256) throw new Error('Expected number < 2^256');\n  return num.toString(16).padStart(64, '0');\n}\n\nfunction numTo32b(num) {\n  return hexToBytes(numTo32bStr(num));\n}\n\nfunction numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nfunction hexToNumber(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n  }\n\n  return BigInt(`0x${hex}`);\n}\n\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n  const array = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n\n  return array;\n}\n\nfunction bytesToNumber(bytes) {\n  return hexToNumber(bytesToHex(bytes));\n}\n\nfunction ensureBytes(hex) {\n  return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\n\nfunction normalizeScalar(num) {\n  if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0) return BigInt(num);\n  if (typeof num === 'bigint' && isWithinCurveOrder(num)) return num;\n  throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\n\nfunction mod(a) {\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n\nfunction pow2(x, power) {\n  const {\n    P\n  } = CURVE;\n  let res = x;\n\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n\n  return res;\n}\n\nfunction sqrtMod(x) {\n  const {\n    P\n  } = CURVE;\n\n  const _6n = BigInt(6);\n\n  const _11n = BigInt(11);\n\n  const _22n = BigInt(22);\n\n  const _23n = BigInt(23);\n\n  const _44n = BigInt(44);\n\n  const _88n = BigInt(88);\n\n  const b2 = x * x * x % P;\n  const b3 = b2 * b2 * x % P;\n  const b6 = pow2(b3, _3n) * b3 % P;\n  const b9 = pow2(b6, _3n) * b3 % P;\n  const b11 = pow2(b9, _2n) * b2 % P;\n  const b22 = pow2(b11, _11n) * b11 % P;\n  const b44 = pow2(b22, _22n) * b22 % P;\n  const b88 = pow2(b44, _44n) * b44 % P;\n  const b176 = pow2(b88, _88n) * b88 % P;\n  const b220 = pow2(b176, _44n) * b44 % P;\n  const b223 = pow2(b220, _3n) * b3 % P;\n  const t1 = pow2(b223, _23n) * b22 % P;\n  const t2 = pow2(t1, _6n) * b2 % P;\n  return pow2(t2, _2n);\n}\n\nfunction invert(number) {\n  let modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n\n  let a = mod(number, modulo);\n  let b = modulo;\n  let x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n\n  while (a !== _0n) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction invertBatch(nums) {\n  let p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const scratch = new Array(nums.length);\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (num === _0n) return acc;\n    scratch[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  const inverted = invert(lastMultiplied, p);\n  nums.reduceRight((acc, num, i) => {\n    if (num === _0n) return acc;\n    scratch[i] = mod(acc * scratch[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return scratch;\n}\n\nconst divNearest = (a, b) => (a + b / _2n) / b;\n\nconst POW_2_128 = _2n ** BigInt(128);\n\nfunction splitScalarEndo(k) {\n  const {\n    n\n  } = CURVE;\n  const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n  const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n  const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n  const b2 = a1;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  let k1 = mod(k - c1 * a1 - c2 * a2, n);\n  let k2 = mod(-c1 * b1 - c2 * b2, n);\n  const k1neg = k1 > POW_2_128;\n  const k2neg = k2 > POW_2_128;\n  if (k1neg) k1 = n - k1;\n  if (k2neg) k2 = n - k2;\n\n  if (k1 > POW_2_128 || k2 > POW_2_128) {\n    throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n  }\n\n  return {\n    k1neg,\n    k1,\n    k2neg,\n    k2\n  };\n}\n\nfunction truncateHash(hash) {\n  const {\n    n\n  } = CURVE;\n  const byteLength = hash.length;\n  const delta = byteLength * 8 - 256;\n  let h = bytesToNumber(hash);\n  if (delta > 0) h = h >> BigInt(delta);\n  if (h >= n) h -= n;\n  return h;\n}\n\nclass HmacDrbg {\n  constructor() {\n    this.v = new Uint8Array(32).fill(1);\n    this.k = new Uint8Array(32).fill(0);\n    this.counter = 0;\n  }\n\n  hmac() {\n    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      values[_key2] = arguments[_key2];\n    }\n\n    return exports.utils.hmacSha256(this.k, ...values);\n  }\n\n  hmacSync() {\n    if (typeof exports.utils.hmacSha256Sync !== 'function') throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    const res = exports.utils.hmacSha256Sync(this.k, ...values);\n    if (res instanceof Promise) throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n    return res;\n  }\n\n  incr() {\n    if (this.counter >= 1000) {\n      throw new Error('Tried 1,000 k values for sign(), all were invalid');\n    }\n\n    this.counter += 1;\n  }\n\n  async reseed() {\n    let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n    this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n    this.v = await this.hmac(this.v);\n    if (seed.length === 0) return;\n    this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n    this.v = await this.hmac(this.v);\n  }\n\n  reseedSync() {\n    let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n    this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n    this.v = this.hmacSync(this.v);\n    if (seed.length === 0) return;\n    this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n    this.v = this.hmacSync(this.v);\n  }\n\n  async generate() {\n    this.incr();\n    this.v = await this.hmac(this.v);\n    return this.v;\n  }\n\n  generateSync() {\n    this.incr();\n    this.v = this.hmacSync(this.v);\n    return this.v;\n  }\n\n}\n\nfunction isWithinCurveOrder(num) {\n  return _0n < num && num < CURVE.n;\n}\n\nfunction isValidFieldElement(num) {\n  return _0n < num && num < CURVE.P;\n}\n\nfunction kmdToSig(kBytes, m, d) {\n  const k = bytesToNumber(kBytes);\n  if (!isWithinCurveOrder(k)) return;\n  const {\n    n\n  } = CURVE;\n  const q = Point.BASE.multiply(k);\n  const r = mod(q.x, n);\n  if (r === _0n) return;\n  const s = mod(invert(k, n) * mod(m + d * r, n), n);\n  if (s === _0n) return;\n  const sig = new Signature(r, s);\n  const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n  return {\n    sig,\n    recovery\n  };\n}\n\nfunction normalizePrivateKey(key) {\n  let num;\n\n  if (typeof key === 'bigint') {\n    num = key;\n  } else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n    num = BigInt(key);\n  } else if (typeof key === 'string') {\n    if (key.length !== 64) throw new Error('Expected 32 bytes of private key');\n    num = hexToNumber(key);\n  } else if (isUint8a(key)) {\n    if (key.length !== 32) throw new Error('Expected 32 bytes of private key');\n    num = bytesToNumber(key);\n  } else {\n    throw new TypeError('Expected valid private key');\n  }\n\n  if (!isWithinCurveOrder(num)) throw new Error('Expected private key: 0 < key < n');\n  return num;\n}\n\nfunction normalizePublicKey(publicKey) {\n  if (publicKey instanceof Point) {\n    publicKey.assertValidity();\n    return publicKey;\n  } else {\n    return Point.fromHex(publicKey);\n  }\n}\n\nfunction normalizeSignature(signature) {\n  if (signature instanceof Signature) {\n    signature.assertValidity();\n    return signature;\n  }\n\n  try {\n    return Signature.fromDER(signature);\n  } catch (error) {\n    return Signature.fromCompact(signature);\n  }\n}\n\nfunction getPublicKey(privateKey) {\n  let isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\n\nexports.getPublicKey = getPublicKey;\n\nfunction recoverPublicKey(msgHash, signature, recovery) {\n  let isCompressed = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\n\nexports.recoverPublicKey = recoverPublicKey;\n\nfunction isPub(item) {\n  const arr = isUint8a(item);\n  const str = typeof item === 'string';\n  const len = (arr || str) && item.length;\n  if (arr) return len === 33 || len === 65;\n  if (str) return len === 66 || len === 130;\n  if (item instanceof Point) return true;\n  return false;\n}\n\nfunction getSharedSecret(privateA, publicB) {\n  let isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (isPub(privateA)) throw new TypeError('getSharedSecret: first arg must be private key');\n  if (!isPub(publicB)) throw new TypeError('getSharedSecret: second arg must be public key');\n  const b = normalizePublicKey(publicB);\n  b.assertValidity();\n  return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\n\nexports.getSharedSecret = getSharedSecret;\n\nfunction bits2int(bytes) {\n  const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n  return bytesToNumber(slice);\n}\n\nfunction bits2octets(bytes) {\n  const z1 = bits2int(bytes);\n  const z2 = mod(z1, CURVE.n);\n  return int2octets(z2 < _0n ? z1 : z2);\n}\n\nfunction int2octets(num) {\n  if (typeof num !== 'bigint') throw new Error('Expected bigint');\n  const hex = numTo32bStr(num);\n  return hexToBytes(hex);\n}\n\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n  if (msgHash == null) throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n  const h1 = ensureBytes(msgHash);\n  const d = normalizePrivateKey(privateKey);\n  const seedArgs = [int2octets(d), bits2octets(h1)];\n\n  if (extraEntropy != null) {\n    if (extraEntropy === true) extraEntropy = exports.utils.randomBytes(32);\n    const e = ensureBytes(extraEntropy);\n    if (e.length !== 32) throw new Error('sign: Expected 32 bytes of extra data');\n    seedArgs.push(e);\n  }\n\n  const seed = concatBytes(...seedArgs);\n  const m = bits2int(h1);\n  return {\n    seed,\n    m,\n    d\n  };\n}\n\nfunction finalizeSig(recSig, opts) {\n  let {\n    sig,\n    recovery\n  } = recSig;\n  const {\n    canonical,\n    der,\n    recovered\n  } = Object.assign({\n    canonical: true,\n    der: true\n  }, opts);\n\n  if (canonical && sig.hasHighS()) {\n    sig = sig.normalizeS();\n    recovery ^= 1;\n  }\n\n  const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n  return recovered ? [hashed, recovery] : hashed;\n}\n\nasync function sign(msgHash, privKey) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    seed,\n    m,\n    d\n  } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n  let sig;\n  const drbg = new HmacDrbg();\n  await drbg.reseed(seed);\n\n  while (!(sig = kmdToSig(await drbg.generate(), m, d))) await drbg.reseed();\n\n  return finalizeSig(sig, opts);\n}\n\nexports.sign = sign;\n\nfunction signSync(msgHash, privKey) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    seed,\n    m,\n    d\n  } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n  let sig;\n  const drbg = new HmacDrbg();\n  drbg.reseedSync(seed);\n\n  while (!(sig = kmdToSig(drbg.generateSync(), m, d))) drbg.reseedSync();\n\n  return finalizeSig(sig, opts);\n}\n\nexports.signSync = signSync;\nconst vopts = {\n  strict: true\n};\n\nfunction verify(signature, msgHash, publicKey) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : vopts;\n  let sig;\n\n  try {\n    sig = normalizeSignature(signature);\n    msgHash = ensureBytes(msgHash);\n  } catch (error) {\n    return false;\n  }\n\n  const {\n    r,\n    s\n  } = sig;\n  if (opts.strict && sig.hasHighS()) return false;\n  const h = truncateHash(msgHash);\n  if (h === _0n) return false;\n  let P;\n\n  try {\n    P = normalizePublicKey(publicKey);\n  } catch (error) {\n    return false;\n  }\n\n  const {\n    n\n  } = CURVE;\n  const sinv = invert(s, n);\n  const u1 = mod(h * sinv, n);\n  const u2 = mod(r * sinv, n);\n  const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n  if (!R) return false;\n  const v = mod(R.x, n);\n  return v === r;\n}\n\nexports.verify = verify;\n\nfunction finalizeSchnorrChallenge(ch) {\n  return mod(bytesToNumber(ch), CURVE.n);\n}\n\nfunction hasEvenY(point) {\n  return (point.y & _1n) === _0n;\n}\n\nclass SchnorrSignature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex);\n    if (bytes.length !== 64) throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n    const r = bytesToNumber(bytes.subarray(0, 32));\n    const s = bytesToNumber(bytes.subarray(32, 64));\n    return new SchnorrSignature(r, s);\n  }\n\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!isValidFieldElement(r) || !isWithinCurveOrder(s)) throw new Error('Invalid signature');\n  }\n\n  toHex() {\n    return numTo32bStr(this.r) + numTo32bStr(this.s);\n  }\n\n  toRawBytes() {\n    return hexToBytes(this.toHex());\n  }\n\n}\n\nfunction schnorrGetPublicKey(privateKey) {\n  return Point.fromPrivateKey(privateKey).toRawX();\n}\n\nfunction initSchnorrSigArgs(message, privateKey, auxRand) {\n  if (message == null) throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n  const m = ensureBytes(message);\n  const d0 = normalizePrivateKey(privateKey);\n  const rand = ensureBytes(auxRand);\n  if (rand.length !== 32) throw new TypeError('sign: Expected 32 bytes of aux randomness');\n  const P = Point.fromPrivateKey(d0);\n  const px = P.toRawX();\n  const d = hasEvenY(P) ? d0 : CURVE.n - d0;\n  return {\n    m,\n    P,\n    px,\n    d,\n    rand\n  };\n}\n\nfunction initSchnorrNonce(d, t0h) {\n  return numTo32b(d ^ bytesToNumber(t0h));\n}\n\nfunction finalizeSchnorrNonce(k0h) {\n  const k0 = mod(bytesToNumber(k0h), CURVE.n);\n  if (k0 === _0n) throw new Error('sign: Creation of signature failed. k is zero');\n  const R = Point.fromPrivateKey(k0);\n  const rx = R.toRawX();\n  const k = hasEvenY(R) ? k0 : CURVE.n - k0;\n  return {\n    R,\n    rx,\n    k\n  };\n}\n\nfunction finalizeSchnorrSig(R, k, e, d) {\n  return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n}\n\nasync function schnorrSign(message, privateKey) {\n  let auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.utils.randomBytes();\n  const {\n    m,\n    px,\n    d,\n    rand\n  } = initSchnorrSigArgs(message, privateKey, auxRand);\n  const t = initSchnorrNonce(d, await exports.utils.taggedHash(TAGS.aux, rand));\n  const {\n    R,\n    rx,\n    k\n  } = finalizeSchnorrNonce(await exports.utils.taggedHash(TAGS.nonce, t, px, m));\n  const e = finalizeSchnorrChallenge(await exports.utils.taggedHash(TAGS.challenge, rx, px, m));\n  const sig = finalizeSchnorrSig(R, k, e, d);\n  const isValid = await schnorrVerify(sig, m, px);\n  if (!isValid) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\nfunction schnorrSignSync(message, privateKey) {\n  let auxRand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.utils.randomBytes();\n  const {\n    m,\n    px,\n    d,\n    rand\n  } = initSchnorrSigArgs(message, privateKey, auxRand);\n  const t = initSchnorrNonce(d, exports.utils.taggedHashSync(TAGS.aux, rand));\n  const {\n    R,\n    rx,\n    k\n  } = finalizeSchnorrNonce(exports.utils.taggedHashSync(TAGS.nonce, t, px, m));\n  const e = finalizeSchnorrChallenge(exports.utils.taggedHashSync(TAGS.challenge, rx, px, m));\n  const sig = finalizeSchnorrSig(R, k, e, d);\n  const isValid = schnorrVerifySync(sig, m, px);\n  if (!isValid) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\nfunction initSchnorrVerify(signature, message, publicKey) {\n  const raw = signature instanceof SchnorrSignature;\n  const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n  if (raw) sig.assertValidity();\n  return { ...sig,\n    m: ensureBytes(message),\n    P: normalizePublicKey(publicKey)\n  };\n}\n\nfunction finalizeSchnorrVerify(r, P, s, e) {\n  const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n  if (!R || !hasEvenY(R) || R.x !== r) return false;\n  return true;\n}\n\nasync function schnorrVerify(signature, message, publicKey) {\n  try {\n    const {\n      r,\n      s,\n      m,\n      P\n    } = initSchnorrVerify(signature, message, publicKey);\n    const e = finalizeSchnorrChallenge(await exports.utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n    return finalizeSchnorrVerify(r, P, s, e);\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction schnorrVerifySync(signature, message, publicKey) {\n  try {\n    const {\n      r,\n      s,\n      m,\n      P\n    } = initSchnorrVerify(signature, message, publicKey);\n    const e = finalizeSchnorrChallenge(exports.utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n    return finalizeSchnorrVerify(r, P, s, e);\n  } catch (error) {\n    return false;\n  }\n}\n\nexports.schnorr = {\n  Signature: SchnorrSignature,\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  signSync: schnorrSignSync,\n  verifySync: schnorrVerifySync\n};\n\nPoint.BASE._setWindowSize(8);\n\nconst crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nconst TAGS = {\n  challenge: 'BIP0340/challenge',\n  aux: 'BIP0340/aux',\n  nonce: 'BIP0340/nonce'\n};\nconst TAGGED_HASH_PREFIXES = {};\nexports.utils = {\n  isValidPrivateKey(privateKey) {\n    try {\n      normalizePrivateKey(privateKey);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  },\n\n  privateAdd: (privateKey, tweak) => {\n    const p = normalizePrivateKey(privateKey);\n    const t = bytesToNumber(ensureBytes(tweak));\n    return numTo32b(mod(p + t, CURVE.n));\n  },\n  privateNegate: privateKey => {\n    const p = normalizePrivateKey(privateKey);\n    return numTo32b(CURVE.n - p);\n  },\n  pointAddScalar: (p, tweak, isCompressed) => {\n    const P = Point.fromHex(p);\n    const t = bytesToNumber(ensureBytes(tweak));\n    const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n    if (!Q) throw new Error('Tweaked point at infinity');\n    return Q.toRawBytes(isCompressed);\n  },\n  pointMultiply: (p, tweak, isCompressed) => {\n    const P = Point.fromHex(p);\n    const t = bytesToNumber(ensureBytes(tweak));\n    return P.multiply(t).toRawBytes(isCompressed);\n  },\n  hashToPrivateKey: hash => {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n\n    const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n\n    return numTo32b(num);\n  },\n  randomBytes: function () {\n    let bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      const {\n        randomBytes\n      } = crypto.node;\n      return Uint8Array.from(randomBytes(bytesLength));\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: () => {\n    return exports.utils.hashToPrivateKey(exports.utils.randomBytes(40));\n  },\n  bytesToHex,\n  hexToBytes,\n  concatBytes,\n  mod,\n  invert,\n  sha256: async function () {\n    for (var _len4 = arguments.length, messages = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      messages[_key4] = arguments[_key4];\n    }\n\n    if (crypto.web) {\n      const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      const {\n        createHash\n      } = crypto.node;\n      const hash = createHash('sha256');\n      messages.forEach(m => hash.update(m));\n      return Uint8Array.from(hash.digest());\n    } else {\n      throw new Error(\"The environment doesn't have sha256 function\");\n    }\n  },\n  hmacSha256: async function (key) {\n    for (var _len5 = arguments.length, messages = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      messages[_key5 - 1] = arguments[_key5];\n    }\n\n    if (crypto.web) {\n      const ckey = await crypto.web.subtle.importKey('raw', key, {\n        name: 'HMAC',\n        hash: {\n          name: 'SHA-256'\n        }\n      }, false, ['sign']);\n      const message = concatBytes(...messages);\n      const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      const {\n        createHmac\n      } = crypto.node;\n      const hash = createHmac('sha256', key);\n      messages.forEach(m => hash.update(m));\n      return Uint8Array.from(hash.digest());\n    } else {\n      throw new Error(\"The environment doesn't have hmac-sha256 function\");\n    }\n  },\n  sha256Sync: undefined,\n  hmacSha256Sync: undefined,\n  taggedHash: async function (tag) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n\n    if (tagP === undefined) {\n      const tagH = await exports.utils.sha256(Uint8Array.from(tag, c => c.charCodeAt(0)));\n      tagP = concatBytes(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n\n    for (var _len6 = arguments.length, messages = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      messages[_key6 - 1] = arguments[_key6];\n    }\n\n    return exports.utils.sha256(tagP, ...messages);\n  },\n  taggedHashSync: function (tag) {\n    if (typeof exports.utils.sha256Sync !== 'function') throw new Error('utils.sha256Sync is undefined, you need to set it');\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n\n    if (tagP === undefined) {\n      const tagH = exports.utils.sha256Sync(Uint8Array.from(tag, c => c.charCodeAt(0)));\n      tagP = concatBytes(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n\n    for (var _len7 = arguments.length, messages = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      messages[_key7 - 1] = arguments[_key7];\n    }\n\n    return exports.utils.sha256Sync(tagP, ...messages);\n  },\n\n  precompute() {\n    let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n\n    cached._setWindowSize(windowSize);\n\n    cached.multiply(_3n);\n    return cached;\n  }\n\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","utils","schnorr","verify","signSync","sign","getSharedSecret","recoverPublicKey","getPublicKey","Signature","Point","CURVE","nodeCrypto","require","_0n","BigInt","_1n","_2n","_3n","_8n","POW_2_256","a","b","P","n","h","Gx","Gy","beta","weistrass","x","x2","mod","x3","USE_ENDOMORPHISM","JacobianPoint","constructor","y","z","fromAffine","p","TypeError","toAffineBatch","points","toInv","invertBatch","map","i","toAffine","normalizeZ","equals","other","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","A","B","C","D","E","F","X3","Y3","Z3","add","H","r","ZERO","HH","HHH","V","subtract","multiplyUnsafe","scalar","normalizeScalar","G","BASE","P0","d","k1neg","k1","k2neg","k2","splitScalarEndo","k1p","k2p","precomputeWindow","W","windows","base","window","push","wNAF","affinePoint","_WINDOW_SIZE","Error","precomputes","pointPrecomputes","get","set","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","multiply","point","fake","f1p","f2p","invZ","invert","iz1","iz2","iz3","ax","ay","zz","WeakMap","_setWindowSize","delete","fromCompressedHex","bytes","isShort","length","bytesToNumber","subarray","isValidFieldElement","y2","sqrtMod","isYOdd","isFirstByteOdd","assertValidity","fromUncompressedHex","fromHex","hex","ensureBytes","len","header","fromPrivateKey","privateKey","normalizePrivateKey","fromSignature","msgHash","signature","recovery","truncateHash","s","normalizeSignature","prefix","R","numTo32bStr","rinv","u1","u2","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","hexToBytes","toHex","toHexX","slice","toRawX","msg","left","right","aP","bQ","sum","undefined","sliceDER","parseInt","parseDERInt","data","bytesToHex","res","parseDERSignature","sBytes","rBytesLeft","fromCompact","arr","isUint8a","name","str","hexToNumber","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","concatBytes","arrays","every","reduce","result","Uint8Array","pad","hexes","Array","from","v","toString","padStart","uint8a","num","numTo32b","array","j","hexByte","byte","isNaN","isSafeInteger","pow2","power","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","number","modulo","u","q","m","gcd","nums","scratch","lastMultiplied","acc","inverted","reduceRight","divNearest","POW_2_128","k","a1","b1","a2","c1","c2","hash","byteLength","delta","HmacDrbg","fill","counter","hmac","values","hmacSha256","hmacSync","hmacSha256Sync","Promise","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","sig","key","normalizePublicKey","publicKey","error","isPub","item","privateA","publicB","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","randomBytes","e","finalizeSig","recSig","opts","canonical","der","recovered","assign","hashed","privKey","drbg","vopts","strict","sinv","finalizeSchnorrChallenge","ch","hasEvenY","SchnorrSignature","schnorrGetPublicKey","initSchnorrSigArgs","message","auxRand","d0","rand","px","initSchnorrNonce","t0h","finalizeSchnorrNonce","k0h","k0","rx","finalizeSchnorrSig","schnorrSign","t","taggedHash","TAGS","aux","nonce","challenge","isValid","schnorrVerify","schnorrSignSync","taggedHashSync","schnorrVerifySync","initSchnorrVerify","raw","finalizeSchnorrVerify","verifySync","crypto","node","web","self","TAGGED_HASH_PREFIXES","isValidPrivateKey","privateAdd","tweak","privateNegate","pointAddScalar","pointMultiply","hashToPrivateKey","bytesLength","getRandomValues","randomPrivateKey","sha256","messages","buffer","subtle","digest","createHash","forEach","update","ckey","importKey","createHmac","sha256Sync","tag","tagP","tagH","c","charCodeAt","precompute"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/@noble/secp256k1/lib/index.js"],"sourcesContent":["\"use strict\";\n/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.Signature = exports.Point = exports.CURVE = void 0;\nconst nodeCrypto = require(\"crypto\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst POW_2_256 = _2n ** BigInt(256);\nconst CURVE = {\n    a: _0n,\n    b: BigInt(7),\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n};\nexports.CURVE = CURVE;\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(B ** _2n);\n        const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E ** _2n);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H ** _2n);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r ** _2n - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar);\n        const G = JacobianPoint.BASE;\n        const P0 = JacobianPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        if (h === _0n)\n            throw new Error('Cannot recover signature: msgHash cannot be 0');\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.y & _1n ? '03' : '02';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nexports.Point = Point;\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = isUint8a(hex);\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = isUint8a(hex);\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nexports.Signature = Signature;\nfunction concatBytes(...arrays) {\n    if (!arrays.every(isUint8a))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction isUint8a(bytes) {\n    return bytes instanceof Uint8Array;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction numTo32bStr(num) {\n    if (num > POW_2_256)\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    return hexToBytes(numTo32bStr(num));\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst POW_2_128 = _2n ** BigInt(128);\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n    const b2 = a1;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return exports.utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        if (typeof exports.utils.hmacSha256Sync !== 'function')\n            throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n        const res = exports.utils.hmacSha256Sync(this.k, ...values);\n        if (res instanceof Promise)\n            throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n        return res;\n    }\n    incr() {\n        if (this.counter >= 1000) {\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        }\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (isUint8a(key)) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nfunction getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexports.getPublicKey = getPublicKey;\nfunction recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nexports.recoverPublicKey = recoverPublicKey;\nfunction isPub(item) {\n    const arr = isUint8a(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nfunction getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nexports.getSharedSecret = getSharedSecret;\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    const hex = numTo32bStr(num);\n    return hexToBytes(hex);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = exports.utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nexports.sign = sign;\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexports.signSync = signSync;\nconst vopts = { strict: true };\nfunction verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    if (h === _0n)\n        return false;\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nexports.verify = verify;\nfunction finalizeSchnorrChallenge(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nfunction hasEvenY(point) {\n    return (point.y & _1n) === _0n;\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nfunction initSchnorrSigArgs(message, privateKey, auxRand) {\n    if (message == null)\n        throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n    const m = ensureBytes(message);\n    const d0 = normalizePrivateKey(privateKey);\n    const rand = ensureBytes(auxRand);\n    if (rand.length !== 32)\n        throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    const P = Point.fromPrivateKey(d0);\n    const px = P.toRawX();\n    const d = hasEvenY(P) ? d0 : CURVE.n - d0;\n    return { m, P, px, d, rand };\n}\nfunction initSchnorrNonce(d, t0h) {\n    return numTo32b(d ^ bytesToNumber(t0h));\n}\nfunction finalizeSchnorrNonce(k0h) {\n    const k0 = mod(bytesToNumber(k0h), CURVE.n);\n    if (k0 === _0n)\n        throw new Error('sign: Creation of signature failed. k is zero');\n    const R = Point.fromPrivateKey(k0);\n    const rx = R.toRawX();\n    const k = hasEvenY(R) ? k0 : CURVE.n - k0;\n    return { R, rx, k };\n}\nfunction finalizeSchnorrSig(R, k, e, d) {\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n}\nasync function schnorrSign(message, privateKey, auxRand = exports.utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, await exports.utils.taggedHash(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(await exports.utils.taggedHash(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(await exports.utils.taggedHash(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = await schnorrVerify(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction schnorrSignSync(message, privateKey, auxRand = exports.utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, exports.utils.taggedHashSync(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(exports.utils.taggedHashSync(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(exports.utils.taggedHashSync(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = schnorrVerifySync(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !hasEvenY(R) || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(await exports.utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(exports.utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nexports.schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexports.utils = {\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    privateAdd: (privateKey, tweak) => {\n        const p = normalizePrivateKey(privateKey);\n        const t = bytesToNumber(ensureBytes(tweak));\n        return numTo32b(mod(p + t, CURVE.n));\n    },\n    privateNegate: (privateKey) => {\n        const p = normalizePrivateKey(privateKey);\n        return numTo32b(CURVE.n - p);\n    },\n    pointAddScalar: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = bytesToNumber(ensureBytes(tweak));\n        const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n        if (!Q)\n            throw new Error('Tweaked point at infinity');\n        return Q.toRawBytes(isCompressed);\n    },\n    pointMultiply: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = bytesToNumber(ensureBytes(tweak));\n        return P.multiply(t).toRawBytes(isCompressed);\n    },\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return exports.utils.hashToPrivateKey(exports.utils.randomBytes(40));\n    },\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await exports.utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return exports.utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof exports.utils.sha256Sync !== 'function')\n            throw new Error('utils.sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = exports.utils.sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return exports.utils.sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}