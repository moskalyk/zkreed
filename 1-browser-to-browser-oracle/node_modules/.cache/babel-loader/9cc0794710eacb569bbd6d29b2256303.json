{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:ping'), {\n  error: debug('libp2p:ping:err')\n});\n\nconst errCode = require('err-code');\n\nconst {\n  codes\n} = require('../errors');\n\nconst crypto = require('libp2p-crypto');\n\nconst {\n  pipe\n} = require('it-pipe'); // @ts-ignore it-buffer has no types exported\n\n\nconst {\n  toBuffer\n} = require('it-buffer');\n\nconst {\n  collect,\n  take\n} = require('streaming-iterables');\n\nconst {\n  equals\n} = require('uint8arrays/equals');\n\nconst {\n  PROTOCOL_NAME,\n  PING_LENGTH,\n  PROTOCOL_VERSION\n} = require('./constants');\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n\nclass PingService {\n  /**\n   * @param {import('../')} libp2p\n   */\n  static getProtocolStr(libp2p) {\n    return `/${libp2p._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`;\n  }\n  /**\n   * @param {Libp2p} libp2p\n   */\n\n\n  constructor(libp2p) {\n    this._libp2p = libp2p;\n  }\n  /**\n   * A handler to register with Libp2p to process ping messages\n   *\n   * @param {Object} options\n   * @param {MuxedStream} options.stream\n   */\n\n\n  handleMessage(_ref) {\n    let {\n      stream\n    } = _ref;\n    return pipe(stream, stream);\n  }\n  /**\n   * Ping a given peer and wait for its response, getting the operation latency.\n   *\n   * @param {PeerId|Multiaddr} peer\n   * @returns {Promise<number>}\n   */\n\n\n  async ping(peer) {\n    const protocol = `/${this._libp2p._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`; // @ts-ignore multiaddr might not have toB58String\n\n    log('dialing %s to %s', protocol, peer.toB58String ? peer.toB58String() : peer);\n    const connection = await this._libp2p.dial(peer);\n    const {\n      stream\n    } = await connection.newStream(protocol);\n    const start = Date.now();\n    const data = crypto.randomBytes(PING_LENGTH);\n    const [result] = await pipe([data], stream, (\n    /** @type {MuxedStream} */\n    stream) => take(1, stream), toBuffer, collect);\n    const end = Date.now();\n\n    if (!equals(data, result)) {\n      throw errCode(new Error('Received wrong ping ack'), codes.ERR_WRONG_PING_ACK);\n    }\n\n    return end - start;\n  }\n\n}\n\nmodule.exports = PingService;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errCode","codes","crypto","pipe","toBuffer","collect","take","equals","PROTOCOL_NAME","PING_LENGTH","PROTOCOL_VERSION","PingService","getProtocolStr","libp2p","_config","protocolPrefix","constructor","_libp2p","handleMessage","stream","ping","peer","protocol","toB58String","connection","dial","newStream","start","Date","now","data","randomBytes","result","end","Error","ERR_WRONG_PING_ACK","module","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/libp2p/src/ping/index.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:ping'), {\n  error: debug('libp2p:ping:err')\n})\nconst errCode = require('err-code')\nconst { codes } = require('../errors')\nconst crypto = require('libp2p-crypto')\nconst { pipe } = require('it-pipe')\n// @ts-ignore it-buffer has no types exported\nconst { toBuffer } = require('it-buffer')\nconst { collect, take } = require('streaming-iterables')\nconst { equals } = require('uint8arrays/equals')\n\nconst { PROTOCOL_NAME, PING_LENGTH, PROTOCOL_VERSION } = require('./constants')\n\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\nclass PingService {\n  /**\n   * @param {import('../')} libp2p\n   */\n  static getProtocolStr (libp2p) {\n    return `/${libp2p._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`\n  }\n\n  /**\n   * @param {Libp2p} libp2p\n   */\n  constructor (libp2p) {\n    this._libp2p = libp2p\n  }\n\n  /**\n   * A handler to register with Libp2p to process ping messages\n   *\n   * @param {Object} options\n   * @param {MuxedStream} options.stream\n   */\n  handleMessage ({ stream }) {\n    return pipe(stream, stream)\n  }\n\n  /**\n   * Ping a given peer and wait for its response, getting the operation latency.\n   *\n   * @param {PeerId|Multiaddr} peer\n   * @returns {Promise<number>}\n   */\n  async ping (peer) {\n    const protocol = `/${this._libp2p._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`\n    // @ts-ignore multiaddr might not have toB58String\n    log('dialing %s to %s', protocol, peer.toB58String ? peer.toB58String() : peer)\n\n    const connection = await this._libp2p.dial(peer)\n    const { stream } = await connection.newStream(protocol)\n\n    const start = Date.now()\n    const data = crypto.randomBytes(PING_LENGTH)\n\n    const [result] = await pipe(\n      [data],\n      stream,\n      (/** @type {MuxedStream} */ stream) => take(1, stream),\n      toBuffer,\n      collect\n    )\n    const end = Date.now()\n\n    if (!equals(data, result)) {\n      throw errCode(new Error('Received wrong ping ack'), codes.ERR_WRONG_PING_ACK)\n    }\n\n    return end - start\n  }\n}\n\nmodule.exports = PingService\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,aAAD,CAAnB,EAAoC;EAC9CK,KAAK,EAAEL,KAAK,CAAC,iBAAD;AADkC,CAApC,CAAZ;;AAGA,MAAMM,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;EAAEM;AAAF,IAAYN,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMO,MAAM,GAAGP,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAM;EAAEQ;AAAF,IAAWR,OAAO,CAAC,SAAD,CAAxB,C,CACA;;;AACA,MAAM;EAAES;AAAF,IAAeT,OAAO,CAAC,WAAD,CAA5B;;AACA,MAAM;EAAEU,OAAF;EAAWC;AAAX,IAAoBX,OAAO,CAAC,qBAAD,CAAjC;;AACA,MAAM;EAAEY;AAAF,IAAaZ,OAAO,CAAC,oBAAD,CAA1B;;AAEA,MAAM;EAAEa,aAAF;EAAiBC,WAAjB;EAA8BC;AAA9B,IAAmDf,OAAO,CAAC,aAAD,CAAhE;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMgB,WAAN,CAAkB;EAChB;AACF;AACA;EACuB,OAAdC,cAAc,CAAEC,MAAF,EAAU;IAC7B,OAAQ,IAAGA,MAAM,CAACC,OAAP,CAAeC,cAAe,IAAGP,aAAc,IAAGE,gBAAiB,EAA9E;EACD;EAED;AACF;AACA;;;EACEM,WAAW,CAAEH,MAAF,EAAU;IACnB,KAAKI,OAAL,GAAeJ,MAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEK,aAAa,OAAc;IAAA,IAAZ;MAAEC;IAAF,CAAY;IACzB,OAAOhB,IAAI,CAACgB,MAAD,EAASA,MAAT,CAAX;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACY,MAAJC,IAAI,CAAEC,IAAF,EAAQ;IAChB,MAAMC,QAAQ,GAAI,IAAG,KAAKL,OAAL,CAAaH,OAAb,CAAqBC,cAAe,IAAGP,aAAc,IAAGE,gBAAiB,EAA9F,CADgB,CAEhB;;IACAd,GAAG,CAAC,kBAAD,EAAqB0B,QAArB,EAA+BD,IAAI,CAACE,WAAL,GAAmBF,IAAI,CAACE,WAAL,EAAnB,GAAwCF,IAAvE,CAAH;IAEA,MAAMG,UAAU,GAAG,MAAM,KAAKP,OAAL,CAAaQ,IAAb,CAAkBJ,IAAlB,CAAzB;IACA,MAAM;MAAEF;IAAF,IAAa,MAAMK,UAAU,CAACE,SAAX,CAAqBJ,QAArB,CAAzB;IAEA,MAAMK,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;IACA,MAAMC,IAAI,GAAG5B,MAAM,CAAC6B,WAAP,CAAmBtB,WAAnB,CAAb;IAEA,MAAM,CAACuB,MAAD,IAAW,MAAM7B,IAAI,CACzB,CAAC2B,IAAD,CADyB,EAEzBX,MAFyB,EAGzB;IAAC;IAA2BA,MAA5B,KAAuCb,IAAI,CAAC,CAAD,EAAIa,MAAJ,CAHlB,EAIzBf,QAJyB,EAKzBC,OALyB,CAA3B;IAOA,MAAM4B,GAAG,GAAGL,IAAI,CAACC,GAAL,EAAZ;;IAEA,IAAI,CAACtB,MAAM,CAACuB,IAAD,EAAOE,MAAP,CAAX,EAA2B;MACzB,MAAMhC,OAAO,CAAC,IAAIkC,KAAJ,CAAU,yBAAV,CAAD,EAAuCjC,KAAK,CAACkC,kBAA7C,CAAb;IACD;;IAED,OAAOF,GAAG,GAAGN,KAAb;EACD;;AAxDe;;AA2DlBS,MAAM,CAACC,OAAP,GAAiB1B,WAAjB"},"metadata":{},"sourceType":"script"}