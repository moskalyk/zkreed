{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.captureError = exports.errorContext = void 0;\n\nvar config_1 = require(\"../config\");\n\nvar context = null;\n\nfunction errorContext(cb) {\n  if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n    var isRoot = !context;\n\n    if (isRoot) {\n      context = {\n        errorThrown: false,\n        error: null\n      };\n    }\n\n    cb();\n\n    if (isRoot) {\n      var _a = context,\n          errorThrown = _a.errorThrown,\n          error = _a.error;\n      context = null;\n\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    cb();\n  }\n}\n\nexports.errorContext = errorContext;\n\nfunction captureError(err) {\n  if (config_1.config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n\nexports.captureError = captureError;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA,IAAIA,OAAO,GAAgD,IAA3D;;AASA,SAAgBC,YAAhB,CAA6BC,EAA7B,EAA2C;EACzC,IAAIC,gBAAOC,qCAAX,EAAkD;IAChD,IAAMC,MAAM,GAAG,CAACL,OAAhB;;IACA,IAAIK,MAAJ,EAAY;MACVL,OAAO,GAAG;QAAEM,WAAW,EAAE,KAAf;QAAsBC,KAAK,EAAE;MAA7B,CAAV;IACD;;IACDL,EAAE;;IACF,IAAIG,MAAJ,EAAY;MACJ,SAAyBL,OAAzB;MAAA,IAAEM,WAAW,iBAAb;MAAA,IAAeC,KAAK,WAApB;MACNP,OAAO,GAAG,IAAV;;MACA,IAAIM,WAAJ,EAAiB;QACf,MAAMC,KAAN;MACD;IACF;EACF,CAbD,MAaO;IAGLL,EAAE;EACH;AACF;;AAnBDM;;AAyBA,SAAgBC,YAAhB,CAA6BC,GAA7B,EAAqC;EACnC,IAAIP,gBAAOC,qCAAP,IAAgDJ,OAApD,EAA6D;IAC3DA,OAAO,CAACM,WAAR,GAAsB,IAAtB;IACAN,OAAO,CAACO,KAAR,GAAgBG,GAAhB;EACD;AACF;;AALDF","names":["context","errorContext","cb","config_1","useDeprecatedSynchronousErrorHandling","isRoot","errorThrown","error","exports","captureError","err"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/util/errorContext.ts"],"sourcesContent":["import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}