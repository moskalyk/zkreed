{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerGlobalService = exports.registerParticleScopeService = exports.argToServiceDef = exports.userHandlerService = exports.errorHandlingService = exports.responseService = exports.injectValueService = exports.injectRelayService = void 0;\n\nvar ts_pattern_1 = require(\"ts-pattern\");\n\nvar commonTypes_1 = require(\"../../commonTypes\");\n\nvar conversions_1 = require(\"./conversions\");\n/**\n * Creates a service which injects relay's peer id into aqua space\n */\n\n\nvar injectRelayService = function (def, peer) {\n  return {\n    serviceId: def.names.getDataSrv,\n    fnName: def.names.relay,\n    handler: function () {\n      return {\n        retCode: commonTypes_1.ResultCodes.success,\n        result: peer.getStatus().relayPeerId\n      };\n    }\n  };\n};\n\nexports.injectRelayService = injectRelayService;\n/**\n * Creates a service which injects plain value into aqua space\n */\n\nvar injectValueService = function (serviceId, fnName, valueType, value) {\n  return {\n    serviceId: serviceId,\n    fnName: fnName,\n    handler: function () {\n      return {\n        retCode: commonTypes_1.ResultCodes.success,\n        result: (0, conversions_1.ts2aqua)(value, valueType)\n      };\n    }\n  };\n};\n\nexports.injectValueService = injectValueService;\n/**\n *  Creates a service which is used to return value from aqua function into typescript space\n */\n\nvar responseService = function (def, resolveCallback) {\n  return {\n    serviceId: def.names.responseSrv,\n    fnName: def.names.responseFnName,\n    handler: function (req) {\n      var userFunctionReturn = (0, conversions_1.responseServiceValue2ts)(req, def.arrow);\n      setTimeout(function () {\n        resolveCallback(userFunctionReturn);\n      }, 0);\n      return {\n        retCode: commonTypes_1.ResultCodes.success,\n        result: {}\n      };\n    }\n  };\n};\n\nexports.responseService = responseService;\n/**\n * Creates a service which is used to return errors from aqua function into typescript space\n */\n\nvar errorHandlingService = function (def, rejectCallback) {\n  return {\n    serviceId: def.names.errorHandlingSrv,\n    fnName: def.names.errorFnName,\n    handler: function (req) {\n      var _a = __read(req.args, 2),\n          err = _a[0],\n          _ = _a[1];\n\n      setTimeout(function () {\n        rejectCallback(err);\n      }, 0);\n      return {\n        retCode: commonTypes_1.ResultCodes.success,\n        result: {}\n      };\n    }\n  };\n};\n\nexports.errorHandlingService = errorHandlingService;\n/**\n * Creates a service for user-defined service function handler\n */\n\nvar userHandlerService = function (serviceId, arrowType, userHandler) {\n  var _a = __read(arrowType, 2),\n      fnName = _a[0],\n      type = _a[1];\n\n  return {\n    serviceId: serviceId,\n    fnName: fnName,\n    handler: function (req) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var args, rawResult, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              args = __spreadArray(__spreadArray([], __read((0, conversions_1.aquaArgs2Ts)(req, type)), false), [extractCallParams(req, type)], false);\n              return [4\n              /*yield*/\n              , userHandler.apply(null, args)];\n\n            case 1:\n              rawResult = _a.sent();\n              result = (0, conversions_1.returnType2Aqua)(rawResult, type);\n              return [2\n              /*return*/\n              , {\n                retCode: commonTypes_1.ResultCodes.success,\n                result: result\n              }];\n          }\n        });\n      });\n    }\n  };\n};\n\nexports.userHandlerService = userHandlerService;\n/**\n * Converts argument of aqua function to a corresponding service.\n * For arguments of non-arrow types the resulting service injects the argument into aqua space.\n * For arguments of arrow types the resulting service calls the corresponding function.\n */\n\nvar argToServiceDef = function (arg, argName, argType, names) {\n  if (argType.tag === 'arrow') {\n    return (0, exports.userHandlerService)(names.callbackSrv, [argName, argType], arg);\n  } else {\n    return (0, exports.injectValueService)(names.getDataSrv, argName, arg, argType);\n  }\n};\n\nexports.argToServiceDef = argToServiceDef;\n/**\n * Extracts call params from from call service data according to aqua type definition\n */\n\nvar extractCallParams = function (req, arrow) {\n  var names = (0, ts_pattern_1.match)(arrow.domain).with({\n    tag: 'nil'\n  }, function () {\n    return [];\n  }).with({\n    tag: 'labeledProduct'\n  }, function (x) {\n    return Object.keys(x.fields);\n  }).with({\n    tag: 'unlabeledProduct'\n  }, function (x) {\n    return x.items.map(function (_, index) {\n      return 'arg' + index;\n    });\n  }).exhaustive();\n  var tetraplets = {};\n\n  for (var i = 0; i < req.args.length; i++) {\n    if (names[i]) {\n      tetraplets[names[i]] = req.tetraplets[i];\n    }\n  }\n\n  var callParams = __assign(__assign({}, req.particleContext), {\n    tetraplets: tetraplets\n  });\n\n  return callParams;\n};\n\nvar registerParticleScopeService = function (peer, particle, service) {\n  peer.internals.regHandler.forParticle(particle.id, service.serviceId, service.fnName, service.handler);\n};\n\nexports.registerParticleScopeService = registerParticleScopeService;\n\nvar registerGlobalService = function (peer, service) {\n  peer.internals.regHandler.common(service.serviceId, service.fnName, service.handler);\n};\n\nexports.registerGlobalService = registerGlobalService;","map":{"version":3,"mappings":"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","names":["injectRelayService","def","peer","serviceId","names","getDataSrv","fnName","relay","handler","retCode","commonTypes_1","success","result","getStatus","relayPeerId","exports","injectValueService","valueType","value","responseService","resolveCallback","responseSrv","responseFnName","req","userFunctionReturn","arrow","setTimeout","errorHandlingService","rejectCallback","errorHandlingSrv","errorFnName","args","err","_","userHandlerService","arrowType","userHandler","type","extractCallParams","apply","rawResult","_a","argToServiceDef","arg","argName","argType","tag","callbackSrv","domain","with","x","Object","keys","fields","items","map","index","exhaustive","tetraplets","i","length","callParams","particleContext","registerParticleScopeService","particle","service","internals","regHandler","forParticle","id","registerGlobalService","common"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/@fluencelabs/fluence/src/internal/compilerSupport/v3impl/services.ts"],"sourcesContent":["import { SecurityTetraplet } from '@fluencelabs/avm';\nimport { match } from 'ts-pattern';\n\nimport { Particle } from '../../Particle';\nimport { CallParams, CallServiceData, GenericCallServiceHandler, ResultCodes } from '../../commonTypes';\nimport { FluencePeer } from '../../FluencePeer';\n\nimport { aquaArgs2Ts, responseServiceValue2ts, returnType2Aqua, ts2aqua } from './conversions';\nimport { ArrowWithoutCallbacks, FunctionCallConstants, FunctionCallDef, NonArrowType } from './interface';\n\nexport interface ServiceDescription {\n    serviceId: string;\n    fnName: string;\n    handler: GenericCallServiceHandler;\n}\n\n/**\n * Creates a service which injects relay's peer id into aqua space\n */\nexport const injectRelayService = (def: FunctionCallDef, peer: FluencePeer) => {\n    return {\n        serviceId: def.names.getDataSrv,\n        fnName: def.names.relay,\n        handler: () => {\n            return {\n                retCode: ResultCodes.success,\n                result: peer.getStatus().relayPeerId,\n            };\n        },\n    };\n};\n\n/**\n * Creates a service which injects plain value into aqua space\n */\nexport const injectValueService = (serviceId: string, fnName: string, valueType: NonArrowType, value: any) => {\n    return {\n        serviceId: serviceId,\n        fnName: fnName,\n        handler: () => {\n            return {\n                retCode: ResultCodes.success,\n                result: ts2aqua(value, valueType),\n            };\n        },\n    };\n};\n\n/**\n *  Creates a service which is used to return value from aqua function into typescript space\n */\nexport const responseService = (def: FunctionCallDef, resolveCallback: Function) => {\n    return {\n        serviceId: def.names.responseSrv,\n        fnName: def.names.responseFnName,\n        handler: (req: CallServiceData) => {\n            const userFunctionReturn = responseServiceValue2ts(req, def.arrow);\n\n            setTimeout(() => {\n                resolveCallback(userFunctionReturn);\n            }, 0);\n\n            return {\n                retCode: ResultCodes.success,\n                result: {},\n            };\n        },\n    };\n};\n\n/**\n * Creates a service which is used to return errors from aqua function into typescript space\n */\nexport const errorHandlingService = (def: FunctionCallDef, rejectCallback: Function) => {\n    return {\n        serviceId: def.names.errorHandlingSrv,\n        fnName: def.names.errorFnName,\n        handler: (req: CallServiceData) => {\n            const [err, _] = req.args;\n            setTimeout(() => {\n                rejectCallback(err);\n            }, 0);\n            return {\n                retCode: ResultCodes.success,\n                result: {},\n            };\n        },\n    };\n};\n\n/**\n * Creates a service for user-defined service function handler\n */\nexport const userHandlerService = (\n    serviceId: string,\n    arrowType: [string, ArrowWithoutCallbacks],\n    userHandler: (...args: Array<unknown>) => Promise<unknown>,\n) => {\n    const [fnName, type] = arrowType;\n    return {\n        serviceId,\n        fnName,\n        handler: async (req: CallServiceData) => {\n            const args = [...aquaArgs2Ts(req, type), extractCallParams(req, type)];\n            const rawResult = await userHandler.apply(null, args);\n            const result = returnType2Aqua(rawResult, type);\n\n            return {\n                retCode: ResultCodes.success,\n                result: result,\n            };\n        },\n    };\n};\n\n/**\n * Converts argument of aqua function to a corresponding service.\n * For arguments of non-arrow types the resulting service injects the argument into aqua space.\n * For arguments of arrow types the resulting service calls the corresponding function.\n */\nexport const argToServiceDef = (\n    arg: any,\n    argName: string,\n    argType: NonArrowType | ArrowWithoutCallbacks,\n    names: FunctionCallConstants,\n): ServiceDescription => {\n    if (argType.tag === 'arrow') {\n        return userHandlerService(names.callbackSrv, [argName, argType], arg);\n    } else {\n        return injectValueService(names.getDataSrv, argName, arg, argType);\n    }\n};\n\n/**\n * Extracts call params from from call service data according to aqua type definition\n */\nconst extractCallParams = (req: CallServiceData, arrow: ArrowWithoutCallbacks): CallParams<any> => {\n    const names = match(arrow.domain)\n        .with({ tag: 'nil' }, () => {\n            return [] as string[];\n        })\n        .with({ tag: 'labeledProduct' }, (x) => {\n            return Object.keys(x.fields);\n        })\n        .with({ tag: 'unlabeledProduct' }, (x) => {\n            return x.items.map((_, index) => 'arg' + index);\n        })\n        .exhaustive();\n\n    const tetraplets: Record<string, SecurityTetraplet[]> = {};\n    for (let i = 0; i < req.args.length; i++) {\n        if (names[i]) {\n            tetraplets[names[i]] = req.tetraplets[i];\n        }\n    }\n\n    const callParams = {\n        ...req.particleContext,\n        tetraplets,\n    };\n\n    return callParams;\n};\n\nexport const registerParticleScopeService = (peer: FluencePeer, particle: Particle, service: ServiceDescription) => {\n    peer.internals.regHandler.forParticle(particle.id, service.serviceId, service.fnName, service.handler);\n};\n\nexport const registerGlobalService = (peer: FluencePeer, service: ServiceDescription) => {\n    peer.internals.regHandler.common(service.serviceId, service.fnName, service.handler);\n};\n"]},"metadata":{},"sourceType":"script"}