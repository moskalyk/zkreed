{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-param-reassign */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address4 = void 0;\n\nvar common = __importStar(require(\"./common\"));\n\nvar constants = __importStar(require(\"./v4/constants\"));\n\nvar address_error_1 = require(\"./address-error\");\n\nvar jsbn_1 = require(\"jsbn\");\n\nvar sprintf_js_1 = require(\"sprintf-js\");\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\n\n\nvar Address4 =\n/** @class */\nfunction () {\n  function Address4(address) {\n    this.groups = constants.GROUPS;\n    this.parsedAddress = [];\n    this.parsedSubnet = '';\n    this.subnet = '/32';\n    this.subnetMask = 32;\n    this.v4 = true;\n    /**\n     * Returns true if the address is correct, false otherwise\n     * @memberof Address4\n     * @instance\n     * @returns {Boolean}\n     */\n\n    this.isCorrect = common.isCorrect(constants.BITS);\n    /**\n     * Returns true if the given address is in the subnet of the current address\n     * @memberof Address4\n     * @instance\n     * @returns {boolean}\n     */\n\n    this.isInSubnet = common.isInSubnet;\n    this.address = address;\n    var subnet = constants.RE_SUBNET_STRING.exec(address);\n\n    if (subnet) {\n      this.parsedSubnet = subnet[0].replace('/', '');\n      this.subnetMask = parseInt(this.parsedSubnet, 10);\n      this.subnet = \"/\" + this.subnetMask;\n\n      if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n        throw new address_error_1.AddressError('Invalid subnet mask.');\n      }\n\n      address = address.replace(constants.RE_SUBNET_STRING, '');\n    }\n\n    this.addressMinusSuffix = address;\n    this.parsedAddress = this.parse(address);\n  }\n\n  Address4.isValid = function (address) {\n    try {\n      // eslint-disable-next-line no-new\n      new Address4(address);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  /*\n   * Parses a v4 address\n   */\n\n\n  Address4.prototype.parse = function (address) {\n    var groups = address.split('.');\n\n    if (!address.match(constants.RE_ADDRESS)) {\n      throw new address_error_1.AddressError('Invalid IPv4 address.');\n    }\n\n    return groups;\n  };\n  /**\n   * Returns the correct form of an address\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  Address4.prototype.correctForm = function () {\n    return this.parsedAddress.map(function (part) {\n      return parseInt(part, 10);\n    }).join('.');\n  };\n  /**\n   * Converts a hex string to an IPv4 address object\n   * @memberof Address4\n   * @static\n   * @param {string} hex - a hex string to convert\n   * @returns {Address4}\n   */\n\n\n  Address4.fromHex = function (hex) {\n    var padded = hex.replace(/:/g, '').padStart(8, '0');\n    var groups = [];\n    var i;\n\n    for (i = 0; i < 8; i += 2) {\n      var h = padded.slice(i, i + 2);\n      groups.push(parseInt(h, 16));\n    }\n\n    return new Address4(groups.join('.'));\n  };\n  /**\n   * Converts an integer into a IPv4 address object\n   * @memberof Address4\n   * @static\n   * @param {integer} integer - a number to convert\n   * @returns {Address4}\n   */\n\n\n  Address4.fromInteger = function (integer) {\n    return Address4.fromHex(integer.toString(16));\n  };\n  /**\n   * Return an address from in-addr.arpa form\n   * @memberof Address4\n   * @static\n   * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address\n   * @returns {Adress4}\n   * @example\n   * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)\n   * address.correctForm(); // '192.0.2.42'\n   */\n\n\n  Address4.fromArpa = function (arpaFormAddress) {\n    // remove ending \".in-addr.arpa.\" or just \".\"\n    var leader = arpaFormAddress.replace(/(\\.in-addr\\.arpa)?\\.$/, '');\n    var address = leader.split('.').reverse().join('.');\n    return new Address4(address);\n  };\n  /**\n   * Converts an IPv4 address object to a hex string\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  Address4.prototype.toHex = function () {\n    return this.parsedAddress.map(function (part) {\n      return sprintf_js_1.sprintf('%02x', parseInt(part, 10));\n    }).join(':');\n  };\n  /**\n   * Converts an IPv4 address object to an array of bytes\n   * @memberof Address4\n   * @instance\n   * @returns {Array}\n   */\n\n\n  Address4.prototype.toArray = function () {\n    return this.parsedAddress.map(function (part) {\n      return parseInt(part, 10);\n    });\n  };\n  /**\n   * Converts an IPv4 address object to an IPv6 address group\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  Address4.prototype.toGroup6 = function () {\n    var output = [];\n    var i;\n\n    for (i = 0; i < constants.GROUPS; i += 2) {\n      var hex = sprintf_js_1.sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n      output.push(sprintf_js_1.sprintf('%x', parseInt(hex, 16)));\n    }\n\n    return output.join(':');\n  };\n  /**\n   * Returns the address as a BigInteger\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  Address4.prototype.bigInteger = function () {\n    return new jsbn_1.BigInteger(this.parsedAddress.map(function (n) {\n      return sprintf_js_1.sprintf('%02x', parseInt(n, 10));\n    }).join(''), 16);\n  };\n  /**\n   * Helper function getting start address.\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  Address4.prototype._startAddress = function () {\n    return new jsbn_1.BigInteger(this.mask() + '0'.repeat(constants.BITS - this.subnetMask), 2);\n  };\n  /**\n   * The first address in the range given by this address' subnet.\n   * Often referred to as the Network Address.\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  Address4.prototype.startAddress = function () {\n    return Address4.fromBigInteger(this._startAddress());\n  };\n  /**\n   * The first host address in the range given by this address's subnet ie\n   * the first address after the Network Address\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  Address4.prototype.startAddressExclusive = function () {\n    var adjust = new jsbn_1.BigInteger('1');\n    return Address4.fromBigInteger(this._startAddress().add(adjust));\n  };\n  /**\n   * Helper function getting end address.\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  Address4.prototype._endAddress = function () {\n    return new jsbn_1.BigInteger(this.mask() + '1'.repeat(constants.BITS - this.subnetMask), 2);\n  };\n  /**\n   * The last address in the range given by this address' subnet\n   * Often referred to as the Broadcast\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  Address4.prototype.endAddress = function () {\n    return Address4.fromBigInteger(this._endAddress());\n  };\n  /**\n   * The last host address in the range given by this address's subnet ie\n   * the last address prior to the Broadcast Address\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  Address4.prototype.endAddressExclusive = function () {\n    var adjust = new jsbn_1.BigInteger('1');\n    return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n  };\n  /**\n   * Converts a BigInteger to a v4 address object\n   * @memberof Address4\n   * @static\n   * @param {BigInteger} bigInteger - a BigInteger to convert\n   * @returns {Address4}\n   */\n\n\n  Address4.fromBigInteger = function (bigInteger) {\n    return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n  };\n  /**\n   * Returns the first n bits of the address, defaulting to the\n   * subnet mask\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  Address4.prototype.mask = function (mask) {\n    if (mask === undefined) {\n      mask = this.subnetMask;\n    }\n\n    return this.getBitsBase2(0, mask);\n  };\n  /**\n   * Returns the bits in the given range as a base-2 string\n   * @memberof Address4\n   * @instance\n   * @returns {string}\n   */\n\n\n  Address4.prototype.getBitsBase2 = function (start, end) {\n    return this.binaryZeroPad().slice(start, end);\n  };\n  /**\n   * Return the reversed ip6.arpa form of the address\n   * @memberof Address4\n   * @param {Object} options\n   * @param {boolean} options.omitSuffix - omit the \"in-addr.arpa\" suffix\n   * @instance\n   * @returns {String}\n   */\n\n\n  Address4.prototype.reverseForm = function (options) {\n    if (!options) {\n      options = {};\n    }\n\n    var reversed = this.correctForm().split('.').reverse().join('.');\n\n    if (options.omitSuffix) {\n      return reversed;\n    }\n\n    return sprintf_js_1.sprintf('%s.in-addr.arpa.', reversed);\n  };\n  /**\n   * Returns true if the given address is a multicast address\n   * @memberof Address4\n   * @instance\n   * @returns {boolean}\n   */\n\n\n  Address4.prototype.isMulticast = function () {\n    return this.isInSubnet(new Address4('224.0.0.0/4'));\n  };\n  /**\n   * Returns a zero-padded base-2 string representation of the address\n   * @memberof Address4\n   * @instance\n   * @returns {string}\n   */\n\n\n  Address4.prototype.binaryZeroPad = function () {\n    return this.bigInteger().toString(2).padStart(constants.BITS, '0');\n  };\n  /**\n   * Groups an IPv4 address for inclusion at the end of an IPv6 address\n   * @returns {String}\n   */\n\n\n  Address4.prototype.groupForV6 = function () {\n    var segments = this.parsedAddress;\n    return this.address.replace(constants.RE_ADDRESS, sprintf_js_1.sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>.<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n  };\n\n  return Address4;\n}();\n\nexports.Address4 = Address4;","map":{"version":3,"mappings":"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","names":["address","constants","GROUPS","common","isCorrect","BITS","isInSubnet","subnet","RE_SUBNET_STRING","exec","parsedSubnet","replace","subnetMask","parseInt","address_error_1","addressMinusSuffix","parsedAddress","parse","Address4","e","groups","split","match","RE_ADDRESS","map","part","join","hex","padded","padStart","i","h","slice","push","integer","fromHex","toString","arpaFormAddress","leader","reverse","output","sprintf_js_1","jsbn_1","n","mask","repeat","fromBigInteger","_startAddress","adjust","add","_endAddress","subtract","bigInteger","fromInteger","undefined","getBitsBase2","start","end","binaryZeroPad","options","reversed","correctForm","omitSuffix","segments","exports"],"sources":["../../../lib/ipv4.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}