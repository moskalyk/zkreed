{"ast":null,"code":"'use strict';\n/**\n * @template K\n * @template V\n */\n\nclass TrackedMap extends Map {\n  /**\n   * @param {object} options\n   * @param {string} options.system\n   * @param {string} options.component\n   * @param {string} options.metric\n   * @param {import('.')} options.metrics\n   */\n  constructor(options) {\n    super();\n    const {\n      system,\n      component,\n      metric,\n      metrics\n    } = options;\n    this._system = system;\n    this._component = component;\n    this._metric = metric;\n    this._metrics = metrics;\n\n    this._metrics.updateComponentMetric({\n      system: this._system,\n      component: this._component,\n      metric: this._metric,\n      value: this.size\n    });\n  }\n  /**\n   * @param {K} key\n   * @param {V} value\n   */\n\n\n  set(key, value) {\n    super.set(key, value);\n\n    this._metrics.updateComponentMetric({\n      system: this._system,\n      component: this._component,\n      metric: this._metric,\n      value: this.size\n    });\n\n    return this;\n  }\n  /**\n   * @param {K} key\n   */\n\n\n  delete(key) {\n    const deleted = super.delete(key);\n\n    this._metrics.updateComponentMetric({\n      system: this._system,\n      component: this._component,\n      metric: this._metric,\n      value: this.size\n    });\n\n    return deleted;\n  }\n\n  clear() {\n    super.clear();\n\n    this._metrics.updateComponentMetric({\n      system: this._system,\n      component: this._component,\n      metric: this._metric,\n      value: this.size\n    });\n  }\n\n}\n/**\n * @template K\n * @template V\n * @param {object} options\n * @param {string} [options.system]\n * @param {string} options.component\n * @param {string} options.metric\n * @param {import('.')} [options.metrics]\n * @returns {Map<K, V>}\n */\n\n\nmodule.exports = _ref => {\n  let {\n    system = 'libp2p',\n    component,\n    metric,\n    metrics\n  } = _ref;\n\n  /** @type {Map<K, V>} */\n  let map;\n\n  if (metrics) {\n    map = new TrackedMap({\n      system,\n      component,\n      metric,\n      metrics\n    });\n  } else {\n    map = new Map();\n  }\n\n  return map;\n};","map":{"version":3,"names":["TrackedMap","Map","constructor","options","system","component","metric","metrics","_system","_component","_metric","_metrics","updateComponentMetric","value","size","set","key","delete","deleted","clear","module","exports","map"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/libp2p/src/metrics/tracked-map.js"],"sourcesContent":["'use strict'\n\n/**\n * @template K\n * @template V\n */\nclass TrackedMap extends Map {\n  /**\n   * @param {object} options\n   * @param {string} options.system\n   * @param {string} options.component\n   * @param {string} options.metric\n   * @param {import('.')} options.metrics\n   */\n  constructor (options) {\n    super()\n\n    const { system, component, metric, metrics } = options\n    this._system = system\n    this._component = component\n    this._metric = metric\n    this._metrics = metrics\n\n    this._metrics.updateComponentMetric({\n      system: this._system,\n      component: this._component,\n      metric: this._metric,\n      value: this.size\n    })\n  }\n\n  /**\n   * @param {K} key\n   * @param {V} value\n   */\n  set (key, value) {\n    super.set(key, value)\n    this._metrics.updateComponentMetric({\n      system: this._system,\n      component: this._component,\n      metric: this._metric,\n      value: this.size\n    })\n    return this\n  }\n\n  /**\n   * @param {K} key\n   */\n  delete (key) {\n    const deleted = super.delete(key)\n    this._metrics.updateComponentMetric({\n      system: this._system,\n      component: this._component,\n      metric: this._metric,\n      value: this.size\n    })\n    return deleted\n  }\n\n  clear () {\n    super.clear()\n\n    this._metrics.updateComponentMetric({\n      system: this._system,\n      component: this._component,\n      metric: this._metric,\n      value: this.size\n    })\n  }\n}\n\n/**\n * @template K\n * @template V\n * @param {object} options\n * @param {string} [options.system]\n * @param {string} options.component\n * @param {string} options.metric\n * @param {import('.')} [options.metrics]\n * @returns {Map<K, V>}\n */\nmodule.exports = ({ system = 'libp2p', component, metric, metrics }) => {\n  /** @type {Map<K, V>} */\n  let map\n\n  if (metrics) {\n    map = new TrackedMap({ system, component, metric, metrics })\n  } else {\n    map = new Map()\n  }\n\n  return map\n}\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,MAAMA,UAAN,SAAyBC,GAAzB,CAA6B;EAC3B;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CAAEC,OAAF,EAAW;IACpB;IAEA,MAAM;MAAEC,MAAF;MAAUC,SAAV;MAAqBC,MAArB;MAA6BC;IAA7B,IAAyCJ,OAA/C;IACA,KAAKK,OAAL,GAAeJ,MAAf;IACA,KAAKK,UAAL,GAAkBJ,SAAlB;IACA,KAAKK,OAAL,GAAeJ,MAAf;IACA,KAAKK,QAAL,GAAgBJ,OAAhB;;IAEA,KAAKI,QAAL,CAAcC,qBAAd,CAAoC;MAClCR,MAAM,EAAE,KAAKI,OADqB;MAElCH,SAAS,EAAE,KAAKI,UAFkB;MAGlCH,MAAM,EAAE,KAAKI,OAHqB;MAIlCG,KAAK,EAAE,KAAKC;IAJsB,CAApC;EAMD;EAED;AACF;AACA;AACA;;;EACEC,GAAG,CAAEC,GAAF,EAAOH,KAAP,EAAc;IACf,MAAME,GAAN,CAAUC,GAAV,EAAeH,KAAf;;IACA,KAAKF,QAAL,CAAcC,qBAAd,CAAoC;MAClCR,MAAM,EAAE,KAAKI,OADqB;MAElCH,SAAS,EAAE,KAAKI,UAFkB;MAGlCH,MAAM,EAAE,KAAKI,OAHqB;MAIlCG,KAAK,EAAE,KAAKC;IAJsB,CAApC;;IAMA,OAAO,IAAP;EACD;EAED;AACF;AACA;;;EACEG,MAAM,CAAED,GAAF,EAAO;IACX,MAAME,OAAO,GAAG,MAAMD,MAAN,CAAaD,GAAb,CAAhB;;IACA,KAAKL,QAAL,CAAcC,qBAAd,CAAoC;MAClCR,MAAM,EAAE,KAAKI,OADqB;MAElCH,SAAS,EAAE,KAAKI,UAFkB;MAGlCH,MAAM,EAAE,KAAKI,OAHqB;MAIlCG,KAAK,EAAE,KAAKC;IAJsB,CAApC;;IAMA,OAAOI,OAAP;EACD;;EAEDC,KAAK,GAAI;IACP,MAAMA,KAAN;;IAEA,KAAKR,QAAL,CAAcC,qBAAd,CAAoC;MAClCR,MAAM,EAAE,KAAKI,OADqB;MAElCH,SAAS,EAAE,KAAKI,UAFkB;MAGlCH,MAAM,EAAE,KAAKI,OAHqB;MAIlCG,KAAK,EAAE,KAAKC;IAJsB,CAApC;EAMD;;AA/D0B;AAkE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAM,MAAM,CAACC,OAAP,GAAiB,QAAuD;EAAA,IAAtD;IAAEjB,MAAM,GAAG,QAAX;IAAqBC,SAArB;IAAgCC,MAAhC;IAAwCC;EAAxC,CAAsD;;EACtE;EACA,IAAIe,GAAJ;;EAEA,IAAIf,OAAJ,EAAa;IACXe,GAAG,GAAG,IAAItB,UAAJ,CAAe;MAAEI,MAAF;MAAUC,SAAV;MAAqBC,MAArB;MAA6BC;IAA7B,CAAf,CAAN;EACD,CAFD,MAEO;IACLe,GAAG,GAAG,IAAIrB,GAAJ,EAAN;EACD;;EAED,OAAOqB,GAAP;AACD,CAXD"},"metadata":{},"sourceType":"script"}