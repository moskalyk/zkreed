{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst errcode = require('err-code');\n\nconst {\n  codes\n} = require('../errors');\n\nconst PeerId = require('peer-id');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst log = Object.assign(debug('libp2p:peer-store:metadata-book'), {\n  error: debug('libp2p:peer-store:metadata-book:err')\n});\n/**\n * @typedef {import('./types').PeerStore} PeerStore\n * @typedef {import('./types').MetadataBook} MetadataBook\n */\n\nconst EVENT_NAME = 'change:metadata';\n/**\n * @implements {MetadataBook}\n */\n\nclass PeerStoreMetadataBook {\n  /**\n   * The MetadataBook is responsible for keeping the known supported\n   * protocols of a peer\n   *\n   * @param {PeerStore[\"emit\"]} emit\n   * @param {import('./types').Store} store\n   */\n  constructor(emit, store) {\n    this._emit = emit;\n    this._store = store;\n  }\n  /**\n   * Get the known data of a provided peer\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  async get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('get await read lock');\n    const release = await this._store.lock.readLock();\n    log('get got read lock');\n\n    try {\n      const peer = await this._store.load(peerId);\n      return peer.metadata;\n    } catch (\n    /** @type {any} */\n    err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log('get release read lock');\n      release();\n    }\n\n    return new Map();\n  }\n  /**\n   * Get specific metadata value, if it exists\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   */\n\n\n  async getValue(peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('getValue await read lock');\n    const release = await this._store.lock.readLock();\n    log('getValue got read lock');\n\n    try {\n      const peer = await this._store.load(peerId);\n      return peer.metadata.get(key);\n    } catch (\n    /** @type {any} */\n    err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log('getValue release write lock');\n      release();\n    }\n  }\n  /**\n   * @param {PeerId} peerId\n   * @param {Map<string, Uint8Array>} metadata\n   */\n\n\n  async set(peerId, metadata) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    if (!metadata || !(metadata instanceof Map)) {\n      log.error('valid metadata must be provided to store data');\n      throw errcode(new Error('valid metadata must be provided'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('set await write lock');\n    const release = await this._store.lock.writeLock();\n    log('set got write lock');\n\n    try {\n      await this._store.mergeOrCreate(peerId, {\n        metadata\n      });\n    } finally {\n      log('set release write lock');\n      release();\n    }\n\n    this._emit(EVENT_NAME, {\n      peerId,\n      metadata\n    });\n  }\n  /**\n   * Set metadata key and value of a provided peer\n   *\n   * @param {PeerId} peerId\n   * @param {string} key - metadata key\n   * @param {Uint8Array} value - metadata value\n   */\n\n\n  async setValue(peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n      log.error('valid key and value must be provided to store data');\n      throw errcode(new Error('valid key and value must be provided'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('setValue await write lock');\n    const release = await this._store.lock.writeLock();\n    log('setValue got write lock');\n    let updatedPeer;\n\n    try {\n      try {\n        const existingPeer = await this._store.load(peerId);\n        const existingValue = existingPeer.metadata.get(key);\n\n        if (existingValue != null && uint8ArrayEquals(value, existingValue)) {\n          return;\n        }\n      } catch (\n      /** @type {any} */\n      err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err;\n        }\n      }\n\n      updatedPeer = await this._store.mergeOrCreate(peerId, {\n        metadata: new Map([[key, value]])\n      });\n    } finally {\n      log('setValue release write lock');\n      release();\n    }\n\n    this._emit(EVENT_NAME, {\n      peerId,\n      metadata: updatedPeer.metadata\n    });\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  async delete(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('delete await write lock');\n    const release = await this._store.lock.writeLock();\n    log('delete got write lock');\n    let has;\n\n    try {\n      has = await this._store.has(peerId);\n\n      if (has) {\n        await this._store.patch(peerId, {\n          metadata: new Map()\n        });\n      }\n    } finally {\n      log('delete release write lock');\n      release();\n    }\n\n    if (has) {\n      this._emit(EVENT_NAME, {\n        peerId,\n        metadata: new Map()\n      });\n    }\n  }\n  /**\n   * @param {PeerId} peerId\n   * @param {string} key\n   */\n\n\n  async deleteValue(peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log('deleteValue await write lock');\n    const release = await this._store.lock.writeLock();\n    log('deleteValue got write lock');\n    let metadata;\n\n    try {\n      const peer = await this._store.load(peerId);\n      metadata = peer.metadata;\n      metadata.delete(key);\n      await this._store.patch(peerId, {\n        metadata\n      });\n    } catch (\n    /** @type {any} **/\n    err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log('deleteValue release write lock');\n      release();\n    }\n\n    if (metadata) {\n      this._emit(EVENT_NAME, {\n        peerId,\n        metadata\n      });\n    }\n  }\n\n}\n\nmodule.exports = PeerStoreMetadataBook;","map":{"version":3,"names":["debug","require","errcode","codes","PeerId","equals","uint8ArrayEquals","log","Object","assign","error","EVENT_NAME","PeerStoreMetadataBook","constructor","emit","store","_emit","_store","get","peerId","isPeerId","Error","ERR_INVALID_PARAMETERS","release","lock","readLock","peer","load","metadata","err","code","ERR_NOT_FOUND","Map","getValue","key","set","writeLock","mergeOrCreate","setValue","value","Uint8Array","updatedPeer","existingPeer","existingValue","delete","has","patch","deleteValue","module","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/libp2p/src/peer-store/metadata-book.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst { codes } = require('../errors')\nconst PeerId = require('peer-id')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\nconst log = Object.assign(debug('libp2p:peer-store:metadata-book'), {\n  error: debug('libp2p:peer-store:metadata-book:err')\n})\n\n/**\n * @typedef {import('./types').PeerStore} PeerStore\n * @typedef {import('./types').MetadataBook} MetadataBook\n */\n\nconst EVENT_NAME = 'change:metadata'\n\n/**\n * @implements {MetadataBook}\n */\nclass PeerStoreMetadataBook {\n  /**\n   * The MetadataBook is responsible for keeping the known supported\n   * protocols of a peer\n   *\n   * @param {PeerStore[\"emit\"]} emit\n   * @param {import('./types').Store} store\n   */\n  constructor (emit, store) {\n    this._emit = emit\n    this._store = store\n  }\n\n  /**\n   * Get the known data of a provided peer\n   *\n   * @param {PeerId} peerId\n   */\n  async get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('get await read lock')\n    const release = await this._store.lock.readLock()\n    log('get got read lock')\n\n    try {\n      const peer = await this._store.load(peerId)\n\n      return peer.metadata\n    } catch (/** @type {any} */ err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err\n      }\n    } finally {\n      log('get release read lock')\n      release()\n    }\n\n    return new Map()\n  }\n\n  /**\n   * Get specific metadata value, if it exists\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   */\n  async getValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('getValue await read lock')\n    const release = await this._store.lock.readLock()\n    log('getValue got read lock')\n\n    try {\n      const peer = await this._store.load(peerId)\n\n      return peer.metadata.get(key)\n    } catch (/** @type {any} */ err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err\n      }\n    } finally {\n      log('getValue release write lock')\n      release()\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Map<string, Uint8Array>} metadata\n   */\n  async set (peerId, metadata) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    if (!metadata || !(metadata instanceof Map)) {\n      log.error('valid metadata must be provided to store data')\n      throw errcode(new Error('valid metadata must be provided'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('set await write lock')\n    const release = await this._store.lock.writeLock()\n    log('set got write lock')\n\n    try {\n      await this._store.mergeOrCreate(peerId, {\n        metadata\n      })\n    } finally {\n      log('set release write lock')\n      release()\n    }\n\n    this._emit(EVENT_NAME, { peerId, metadata })\n  }\n\n  /**\n   * Set metadata key and value of a provided peer\n   *\n   * @param {PeerId} peerId\n   * @param {string} key - metadata key\n   * @param {Uint8Array} value - metadata value\n   */\n  async setValue (peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n      log.error('valid key and value must be provided to store data')\n      throw errcode(new Error('valid key and value must be provided'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('setValue await write lock')\n    const release = await this._store.lock.writeLock()\n    log('setValue got write lock')\n\n    let updatedPeer\n\n    try {\n      try {\n        const existingPeer = await this._store.load(peerId)\n        const existingValue = existingPeer.metadata.get(key)\n\n        if (existingValue != null && uint8ArrayEquals(value, existingValue)) {\n          return\n        }\n      } catch (/** @type {any} */ err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err\n        }\n      }\n\n      updatedPeer = await this._store.mergeOrCreate(peerId, {\n        metadata: new Map([[key, value]])\n      })\n    } finally {\n      log('setValue release write lock')\n      release()\n    }\n\n    this._emit(EVENT_NAME, { peerId, metadata: updatedPeer.metadata })\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  async delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('delete await write lock')\n    const release = await this._store.lock.writeLock()\n    log('delete got write lock')\n\n    let has\n\n    try {\n      has = await this._store.has(peerId)\n\n      if (has) {\n        await this._store.patch(peerId, {\n          metadata: new Map()\n        })\n      }\n    } finally {\n      log('delete release write lock')\n      release()\n    }\n\n    if (has) {\n      this._emit(EVENT_NAME, { peerId, metadata: new Map() })\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @param {string} key\n   */\n  async deleteValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log('deleteValue await write lock')\n    const release = await this._store.lock.writeLock()\n    log('deleteValue got write lock')\n\n    let metadata\n\n    try {\n      const peer = await this._store.load(peerId)\n      metadata = peer.metadata\n\n      metadata.delete(key)\n\n      await this._store.patch(peerId, {\n        metadata\n      })\n    } catch (/** @type {any} **/ err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err\n      }\n    } finally {\n      log('deleteValue release write lock')\n      release()\n    }\n\n    if (metadata) {\n      this._emit(EVENT_NAME, { peerId, metadata })\n    }\n  }\n}\n\nmodule.exports = PeerStoreMetadataBook\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}