{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firstValueFrom = void 0;\n\nvar EmptyError_1 = require(\"./util/EmptyError\");\n\nvar Subscriber_1 = require(\"./Subscriber\");\n\nfunction firstValueFrom(source, config) {\n  var hasConfig = typeof config === 'object';\n  return new Promise(function (resolve, reject) {\n    var subscriber = new Subscriber_1.SafeSubscriber({\n      next: function (value) {\n        resolve(value);\n        subscriber.unsubscribe();\n      },\n      error: reject,\n      complete: function () {\n        if (hasConfig) {\n          resolve(config.defaultValue);\n        } else {\n          reject(new EmptyError_1.EmptyError());\n        }\n      }\n    });\n    source.subscribe(subscriber);\n  });\n}\n\nexports.firstValueFrom = firstValueFrom;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AAqDA,SAAgBA,cAAhB,CAAqCC,MAArC,EAA4DC,MAA5D,EAA4F;EAC1F,IAAMC,SAAS,GAAG,OAAOD,MAAP,KAAkB,QAApC;EACA,OAAO,IAAIE,OAAJ,CAAmB,UAACC,OAAD,EAAUC,MAAV,EAAgB;IACxC,IAAMC,UAAU,GAAG,IAAIC,2BAAJ,CAAsB;MACvCC,IAAI,EAAE,UAACC,KAAD,EAAM;QACVL,OAAO,CAACK,KAAD,CAAP;QACAH,UAAU,CAACI,WAAX;MACD,CAJsC;MAKvCC,KAAK,EAAEN,MALgC;MAMvCO,QAAQ,EAAE;QACR,IAAIV,SAAJ,EAAe;UACbE,OAAO,CAACH,MAAO,CAACY,YAAT,CAAP;QACD,CAFD,MAEO;UACLR,MAAM,CAAC,IAAIS,uBAAJ,EAAD,CAAN;QACD;MACF;IAZsC,CAAtB,CAAnB;IAcAd,MAAM,CAACe,SAAP,CAAiBT,UAAjB;EACD,CAhBM,CAAP;AAiBD;;AAnBDU","names":["firstValueFrom","source","config","hasConfig","Promise","resolve","reject","subscriber","Subscriber_1","next","value","unsubscribe","error","complete","defaultValue","EmptyError_1","subscribe","exports"],"sources":["/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/node_modules/rxjs/src/internal/firstValueFrom.ts"],"sourcesContent":["import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\n\nexport interface FirstValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function firstValueFrom<T, D>(source: Observable<T>, config: FirstValueFromConfig<D>): Promise<T | D>;\nexport function firstValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * and returning a promise that will resolve as soon as the first value\n * arrives from the observable. The subscription will then be closed.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will emit at least one value,\n * *OR* complete. If the source observable does not emit one value or complete, you will\n * end up with a promise that is hung up, and potentially all of the state of an\n * async function hanging out in memory. To avoid this situation, look into adding\n * something like {@link timeout}, {@link take}, {@link takeWhile}, or {@link takeUntil}\n * amongst others.\n *\n * ## Example\n *\n * Wait for the first value from a stream and emit it from a promise in\n * an async function\n *\n * ```ts\n * import { interval, firstValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000);\n *   const firstNumber = await firstValueFrom(source$);\n *   console.log(`The first number is ${ firstNumber }`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // 'The first number is 0'\n * ```\n *\n * @see {@link lastValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function firstValueFrom<T, D>(source: Observable<T>, config?: FirstValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    const subscriber = new SafeSubscriber<T>({\n      next: (value) => {\n        resolve(value);\n        subscriber.unsubscribe();\n      },\n      error: reject,\n      complete: () => {\n        if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n    source.subscribe(subscriber);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}