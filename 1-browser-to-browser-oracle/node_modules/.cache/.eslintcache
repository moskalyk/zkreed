[{"/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/src/index.tsx":"1","/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/src/App.tsx":"2","/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/src/_aqua/getting-started.ts":"3"},{"size":220,"mtime":1657645549113,"results":"4","hashOfConfig":"5"},{"size":14497,"mtime":1660846375770,"results":"6","hashOfConfig":"7"},{"size":8254,"mtime":1660840152620,"results":"8","hashOfConfig":"7"},{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bu8d9t",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19trp0e",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/src/index.tsx",[],[],"/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/src/App.tsx",["20","21","22","23","24","25","26","27","28","29","30","31","32","33","34"],[],"/Users/mgrok/Projects/fluence-projects/examples/quickstart/1-browser-to-browser/src/_aqua/getting-started.ts",["35"],[],"/**\n *\n * This file is auto-generated. Do not edit manually: changes may be erased.\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.\n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\n * Aqua version: 0.7.2-314\n *\n */\nimport { Fluence, FluencePeer } from '@fluencelabs/fluence';\nimport {\n    CallParams,\n    callFunction,\n    registerService,\n} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';\n\n\n// Services\n\nexport interface HelloWorldDef {\n    getFortune: (callParams: CallParams<null>) => string | Promise<string>;\n    hello: (str: string, callParams: CallParams<'str'>) => void | Promise<void>;\n}\nexport function registerHelloWorld(service: HelloWorldDef): void;\nexport function registerHelloWorld(serviceId: string, service: HelloWorldDef): void;\nexport function registerHelloWorld(peer: FluencePeer, service: HelloWorldDef): void;\nexport function registerHelloWorld(peer: FluencePeer, serviceId: string, service: HelloWorldDef): void;\n       \n\nexport function registerHelloWorld(...args: any) {\n    registerService(\n        args,\n        {\n    \"defaultServiceId\" : \"hello-world\",\n    \"functions\" : {\n        \"tag\" : \"labeledProduct\",\n        \"fields\" : {\n            \"getFortune\" : {\n                \"tag\" : \"arrow\",\n                \"domain\" : {\n                    \"tag\" : \"nil\"\n                },\n                \"codomain\" : {\n                    \"tag\" : \"unlabeledProduct\",\n                    \"items\" : [\n                        {\n                            \"tag\" : \"scalar\",\n                            \"name\" : \"string\"\n                        }\n                    ]\n                }\n            },\n            \"hello\" : {\n                \"tag\" : \"arrow\",\n                \"domain\" : {\n                    \"tag\" : \"labeledProduct\",\n                    \"fields\" : {\n                        \"str\" : {\n                            \"tag\" : \"scalar\",\n                            \"name\" : \"string\"\n                        }\n                    }\n                },\n                \"codomain\" : {\n                    \"tag\" : \"nil\"\n                }\n            }\n        }\n    }\n}\n    );\n}\n      \n\n\nexport interface HelloPeerDef {\n    hello: (from: string, callParams: CallParams<'from'>) => string | Promise<string>;\n}\nexport function registerHelloPeer(service: HelloPeerDef): void;\nexport function registerHelloPeer(serviceId: string, service: HelloPeerDef): void;\nexport function registerHelloPeer(peer: FluencePeer, service: HelloPeerDef): void;\nexport function registerHelloPeer(peer: FluencePeer, serviceId: string, service: HelloPeerDef): void;\n       \n\nexport function registerHelloPeer(...args: any) {\n    registerService(\n        args,\n        {\n    \"defaultServiceId\" : \"HelloPeer\",\n    \"functions\" : {\n        \"tag\" : \"labeledProduct\",\n        \"fields\" : {\n            \"hello\" : {\n                \"tag\" : \"arrow\",\n                \"domain\" : {\n                    \"tag\" : \"labeledProduct\",\n                    \"fields\" : {\n                        \"from\" : {\n                            \"tag\" : \"scalar\",\n                            \"name\" : \"string\"\n                        }\n                    }\n                },\n                \"codomain\" : {\n                    \"tag\" : \"unlabeledProduct\",\n                    \"items\" : [\n                        {\n                            \"tag\" : \"scalar\",\n                            \"name\" : \"string\"\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n    );\n}\n      \n// Functions\n \n\nexport function getRelayTime(\n    config?: {ttl?: number}\n): Promise<number>;\n\nexport function getRelayTime(\n    peer: FluencePeer,\n    config?: {ttl?: number}\n): Promise<number>;\n\nexport function getRelayTime(...args: any) {\n\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (xor\n                        (call -relay- (\"peer\" \"timestamp_ms\") [] ts)\n                        (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                       )\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [ts])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n                    )\n    `\n    return callFunction(\n        args,\n        {\n    \"functionName\" : \"getRelayTime\",\n    \"arrow\" : {\n        \"tag\" : \"arrow\",\n        \"domain\" : {\n            \"tag\" : \"labeledProduct\",\n            \"fields\" : {\n                \n            }\n        },\n        \"codomain\" : {\n            \"tag\" : \"unlabeledProduct\",\n            \"items\" : [\n                {\n                    \"tag\" : \"scalar\",\n                    \"name\" : \"u64\"\n                }\n            ]\n        }\n    },\n    \"names\" : {\n        \"relay\" : \"-relay-\",\n        \"getDataSrv\" : \"getDataSrv\",\n        \"callbackSrv\" : \"callbackSrv\",\n        \"responseSrv\" : \"callbackSrv\",\n        \"responseFnName\" : \"response\",\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\n        \"errorFnName\" : \"error\"\n    }\n},\n        script\n    )\n}\n\n \n\nexport function tellFortune(\n    config?: {ttl?: number}\n): Promise<string>;\n\nexport function tellFortune(\n    peer: FluencePeer,\n    config?: {ttl?: number}\n): Promise<string>;\n\nexport function tellFortune(...args: any) {\n\n    let script = `\n                    (xor\n                     (seq\n                      (seq\n                       (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                       (call %init_peer_id% (\"hello-world\" \"getFortune\") [] res)\n                      )\n                      (xor\n                       (call %init_peer_id% (\"callbackSrv\" \"response\") [res])\n                       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                      )\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n                    )\n    `\n    return callFunction(\n        args,\n        {\n    \"functionName\" : \"tellFortune\",\n    \"arrow\" : {\n        \"tag\" : \"arrow\",\n        \"domain\" : {\n            \"tag\" : \"labeledProduct\",\n            \"fields\" : {\n                \n            }\n        },\n        \"codomain\" : {\n            \"tag\" : \"unlabeledProduct\",\n            \"items\" : [\n                {\n                    \"tag\" : \"scalar\",\n                    \"name\" : \"string\"\n                }\n            ]\n        }\n    },\n    \"names\" : {\n        \"relay\" : \"-relay-\",\n        \"getDataSrv\" : \"getDataSrv\",\n        \"callbackSrv\" : \"callbackSrv\",\n        \"responseSrv\" : \"callbackSrv\",\n        \"responseFnName\" : \"response\",\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\n        \"errorFnName\" : \"error\"\n    }\n},\n        script\n    )\n}\n\n \n\nexport function sayHello(\n    config?: {ttl?: number}\n): Promise<void>;\n\nexport function sayHello(\n    peer: FluencePeer,\n    config?: {ttl?: number}\n): Promise<void>;\n\nexport function sayHello(...args: any) {\n\n    let script = `\n                    (xor\n                     (seq\n                      (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n                      (call %init_peer_id% (\"hello-world\" \"hello\") [\"Hello, world!\"])\n                     )\n                     (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n                    )\n    `\n    return callFunction(\n        args,\n        {\n    \"functionName\" : \"sayHello\",\n    \"arrow\" : {\n        \"tag\" : \"arrow\",\n        \"domain\" : {\n            \"tag\" : \"labeledProduct\",\n            \"fields\" : {\n                \n            }\n        },\n        \"codomain\" : {\n            \"tag\" : \"nil\"\n        }\n    },\n    \"names\" : {\n        \"relay\" : \"-relay-\",\n        \"getDataSrv\" : \"getDataSrv\",\n        \"callbackSrv\" : \"callbackSrv\",\n        \"responseSrv\" : \"callbackSrv\",\n        \"responseFnName\" : \"response\",\n        \"errorHandlingSrv\" : \"errorHandlingSrv\",\n        \"errorFnName\" : \"error\"\n    }\n},\n        script\n    )\n}\n",[],{"ruleId":"36","severity":1,"message":"37","line":8,"column":3,"nodeType":"38","messageId":"39","endLine":8,"endColumn":11},{"ruleId":"36","severity":1,"message":"40","line":10,"column":3,"nodeType":"38","messageId":"39","endLine":10,"endColumn":14},{"ruleId":"36","severity":1,"message":"41","line":45,"column":5,"nodeType":"38","messageId":"39","endLine":45,"endColumn":9},{"ruleId":"36","severity":1,"message":"42","line":71,"column":26,"nodeType":"38","messageId":"39","endLine":71,"endColumn":41},{"ruleId":"36","severity":1,"message":"43","line":287,"column":10,"nodeType":"38","messageId":"39","endLine":287,"endColumn":14},{"ruleId":"44","severity":1,"message":"45","line":288,"column":3,"nodeType":"38","endLine":288,"endColumn":12,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":327,"column":26,"nodeType":"49","messageId":"50","endLine":327,"endColumn":28},{"ruleId":"47","severity":1,"message":"48","line":328,"column":31,"nodeType":"49","messageId":"50","endLine":328,"endColumn":33},{"ruleId":"47","severity":1,"message":"48","line":329,"column":31,"nodeType":"49","messageId":"50","endLine":329,"endColumn":33},{"ruleId":"51","severity":1,"message":"52","line":348,"column":28,"nodeType":"53","endLine":348,"endColumn":58},{"ruleId":"51","severity":1,"message":"52","line":349,"column":28,"nodeType":"53","endLine":349,"endColumn":59},{"ruleId":"51","severity":1,"message":"52","line":350,"column":28,"nodeType":"53","endLine":350,"endColumn":58},{"ruleId":"51","severity":1,"message":"52","line":353,"column":9,"nodeType":"53","endLine":353,"endColumn":211},{"ruleId":"51","severity":1,"message":"52","line":387,"column":9,"nodeType":"53","endLine":387,"endColumn":178},{"ruleId":"51","severity":1,"message":"52","line":388,"column":9,"nodeType":"53","endLine":388,"endColumn":178},{"ruleId":"36","severity":1,"message":"54","line":9,"column":10,"nodeType":"38","messageId":"39","endLine":9,"endColumn":17},"@typescript-eslint/no-unused-vars","'sayHello' is defined but never used.","Identifier","unusedVar","'tellFortune' is defined but never used.","'deck' is assigned a value but never used.","'setHelloMessage' is assigned a value but never used.","'init' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setInit'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["55"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Fluence' is defined but never used.",{"desc":"56","fix":"57"},"Add dependencies array: []",{"range":"58","text":"59"},[12689,12689],", []"]