{"version":3,"file":"FluencePeer.js","sourceRoot":"","sources":["../../src/internal/FluencePeer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Multiaddr } from 'multiaddr';\nimport { CallServiceData, CallServiceResult, GenericCallServiceHandler, ResultCodes } from './commonTypes';\nimport { PeerIdB58 } from './commonTypes';\nimport { FluenceConnection } from './FluenceConnection';\nimport { Particle, ParticleExecutionStage, ParticleQueueItem } from './Particle';\nimport { KeyPair } from './KeyPair';\nimport { throwIfNotSupported, dataToString, jsonify } from './utils';\nimport { concatMap, filter, pipe, Subject, tap } from 'rxjs';\nimport log from 'loglevel';\nimport { builtInServices } from './builtins/common';\nimport { defaultSigGuard, Sig } from './builtins/Sig';\nimport { registerSig } from './_aqua/services';\nimport Buffer from './Buffer';\nimport { FluenceAppService, loadDefaults, loadWasmFromFileSystem, loadWasmFromServer } from '@fluencelabs/marine-js';\nimport { AVM, AvmRunner } from './avm';\nimport { isBrowser, isNode } from 'browser-or-node';\nimport { InterpreterResult, LogLevel } from '@fluencelabs/avm';\n\n/**\n * Node of the Fluence network specified as a pair of node's multiaddr and it's peer id\n */\ntype Node = {\n    peerId: PeerIdB58;\n    multiaddr: string;\n};\n\n/**\n * Enum representing the log level used in Aqua VM.\n * Possible values: 'info', 'trace', 'debug', 'info', 'warn', 'error', 'off';\n */\nexport type MarineLoglevel = LogLevel;\n\nconst DEFAULT_TTL = 7000;\n\n/**\n * Configuration used when initiating Fluence Peer\n */\nexport interface PeerConfig {\n    /**\n     * Node in Fluence network to connect to.\n     * Can be in the form of:\n     * - string: multiaddr in string format\n     * - Multiaddr: multiaddr object, @see https://github.com/multiformats/js-multiaddr\n     * - Node: node structure, @see Node\n     * If not specified the will work locally and would not be able to send or receive particles.\n     */\n    connectTo?: string | Multiaddr | Node;\n\n    /**\n     * @deprecated. AVM run through marine-js infrastructure.\n     * @see debug.marineLogLevel option to configure logging level of AVM\n     */\n    avmLogLevel?: MarineLoglevel;\n\n    /**\n     * Specify the KeyPair to be used to identify the Fluence Peer.\n     * Will be generated randomly if not specified\n     */\n    KeyPair?: KeyPair;\n\n    /**\n     * When the peer established the connection to the network it sends a ping-like message to check if it works correctly.\n     * The options allows to specify the timeout for that message in milliseconds.\n     * If not specified the default timeout will be used\n     */\n    checkConnectionTimeoutMs?: number;\n\n    /**\n     * When the peer established the connection to the network it sends a ping-like message to check if it works correctly.\n     * If set to true, the ping-like message will be skipped\n     * Default: false\n     */\n    skipCheckConnection?: boolean;\n\n    /**\n     * The dialing timeout in milliseconds\n     */\n    dialTimeoutMs?: number;\n\n    /**\n     * Sets the default TTL for all particles originating from the peer with no TTL specified.\n     * If the originating particle's TTL is defined then that value will be used\n     * If the option is not set default TTL will be 7000\n     */\n    defaultTtlMs?: number;\n\n    /**\n     * @deprecated. AVM run through marine-js infrastructure.\n     * @see marineJS option to configure AVM\n     */\n    avmRunner?: AvmRunner;\n\n    /**\n     * This option allows to specify the location of various dependencies needed for marine-js.\n     * Each key specifies the location of the corresponding dependency.\n     * If Fluence peer is started inside browser the location is treated as the path to the file relative to origin.\n     * IF Fluence peer is started in nodejs the location is treated as the full path to file on the file system.\n     */\n    marineJS?: {\n        /**\n         * Configures path to the marine-js worker script.\n         */\n        workerScriptPath: string;\n\n        /**\n         * Configures the path to marine-js control wasm module\n         */\n        marineWasmPath: string;\n\n        /**\n         * Configures the path to AVM wasm module\n         */\n        avmWasmPath: string;\n    };\n\n    /**\n     * Enables\\disabled various debugging features\n     */\n    debug?: {\n        /**\n         * If set to true, newly initiated particle ids will be printed to console.\n         * Useful to see what particle id is responsible for aqua function\n         */\n        printParticleId?: boolean;\n\n        /**\n         * Log level for marine services. By default logging is turned off.\n         */\n        marineLogLevel?: LogLevel;\n    };\n}\n\n/**\n * Information about Fluence Peer connection\n */\nexport interface PeerStatus {\n    /**\n     * Is the peer initialized or not\n     */\n    isInitialized: Boolean;\n\n    /**\n     * Is the peer connected to network or not\n     */\n    isConnected: Boolean;\n\n    /**\n     * The Peer's identification in the Fluence network\n     */\n    peerId: PeerIdB58 | null;\n\n    /**\n     * The relays's peer id to which the peer is connected to\n     */\n    relayPeerId: PeerIdB58 | null;\n}\n\n/**\n * This class implements the Fluence protocol for javascript-based environments.\n * It provides all the necessary features to communicate with Fluence network\n */\nexport class FluencePeer {\n    /**\n     * Creates a new Fluence Peer instance.\n     */\n    constructor() {}\n\n    /**\n     * Checks whether the object is instance of FluencePeer class\n     * @param obj - object to check if it is FluencePeer\n     * @returns true if the object is FluencePeer false otherwise\n     */\n    static isInstance(obj: FluencePeer): boolean {\n        if (obj && obj._isFluenceAwesome) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get the peer's status\n     */\n    getStatus(): PeerStatus {\n        const hasKeyPair = this._keyPair !== undefined;\n        return {\n            // TODO:: use explicit mechanism for peer's state\n            isInitialized: hasKeyPair,\n            isConnected: this._connection !== undefined,\n            peerId: this._keyPair?.Libp2pPeerId?.toB58String() || null,\n            relayPeerId: this._relayPeerId || null,\n        };\n    }\n\n    /**\n     * Initializes the peer: starts the Aqua VM, initializes the default call service handlers\n     * and (optionally) connect to the Fluence network\n     * @param config - object specifying peer configuration\n     */\n    async start(config?: PeerConfig): Promise<void> {\n        throwIfNotSupported();\n\n        if (config?.KeyPair) {\n            this._keyPair = config!.KeyPair;\n        } else {\n            this._keyPair = await KeyPair.randomEd25519();\n        }\n\n        if (config?.debug?.printParticleId) {\n            this._printParticleId = true;\n        }\n\n        this._defaultTTL =\n            config?.defaultTtlMs !== undefined // don't miss value 0 (zero)\n                ? config?.defaultTtlMs\n                : DEFAULT_TTL;\n\n        if (config?.debug?.marineLogLevel) {\n            this._marineLogLevel = config.debug.marineLogLevel;\n        }\n\n        this._fluenceAppService = new FluenceAppService(config?.marineJS?.workerScriptPath);\n        const marineDeps = config?.marineJS\n            ? await loadMarineAndAvm(config.marineJS.marineWasmPath, config.marineJS.avmWasmPath)\n            : await loadDefaults();\n        await this._fluenceAppService.init(marineDeps.marine);\n        await this._fluenceAppService.createService(marineDeps.avm, 'avm');\n        this._avmRunner = config?.avmRunner || new AVM(this._fluenceAppService);\n        await this._avmRunner.init(config?.avmLogLevel || 'off');\n\n        if (config?.connectTo) {\n            let connectToMultiAddr: Multiaddr;\n            let fromNode = (config.connectTo as any).multiaddr;\n            if (fromNode) {\n                connectToMultiAddr = new Multiaddr(fromNode);\n            } else {\n                connectToMultiAddr = new Multiaddr(config.connectTo as string);\n            }\n\n            this._relayPeerId = connectToMultiAddr.getPeerId();\n\n            if (this._connection) {\n                await this._connection.disconnect();\n            }\n\n            this._connection = await FluenceConnection.createConnection({\n                peerId: this._keyPair.Libp2pPeerId,\n                relayAddress: connectToMultiAddr,\n                dialTimeoutMs: config.dialTimeoutMs,\n                onIncomingParticle: (p) => this._incomingParticles.next({ particle: p, onStageChange: () => {} }),\n            });\n\n            await this._connect();\n        }\n\n        registerDefaultServices(this);\n\n        this._classServices = {\n            sig: new Sig(this._keyPair),\n        };\n        this._classServices.sig.securityGuard = defaultSigGuard(this.getStatus().peerId);\n        registerSig(this, this._classServices.sig);\n        registerSig(this, this.getStatus().peerId, this._classServices.sig);\n\n        this._startParticleProcessing();\n    }\n\n    getServices() {\n        return {\n            ...this._classServices,\n        };\n    }\n\n    /**\n     * Registers marine service within the Fluence peer from wasm file.\n     * Following helper functions can be used to load wasm files:\n     * * loadWasmFromFileSystem\n     * * loadWasmFromNpmPackage\n     * * loadWasmFromServer\n     * @param wasm - buffer with the wasm file for service\n     * @param serviceId - the service id by which the service can be accessed in aqua\n     */\n    async registerMarineService(wasm: SharedArrayBuffer | Buffer, serviceId: string): Promise<void> {\n        if (this._containsService(serviceId)) {\n            throw new Error(`Service with '${serviceId}' id already exists`);\n        }\n\n        const envs = this._marineLogLevel ? { WASM_LOG: this._marineLogLevel } : undefined;\n        await this._fluenceAppService.createService(wasm, serviceId, undefined, envs);\n        this._marineServices.add(serviceId);\n    }\n\n    /**\n     * Removes the specified marine service from the Fluence peer\n     * @param serviceId - the service id to remove\n     */\n    removeMarineService(serviceId: string): void {\n        this._marineServices.delete(serviceId);\n    }\n\n    /**\n     * Un-initializes the peer: stops all the underlying workflows, stops the Aqua VM\n     * and disconnects from the Fluence network\n     */\n    async stop() {\n        this._keyPair = undefined; // This will set peer to non-initialized state and stop particle processing\n        this._relayPeerId = null;\n        this._stopParticleProcessing();\n        await this._disconnect();\n        await this._avmRunner?.terminate();\n        await this._fluenceAppService?.terminate();\n        this._avmRunner = undefined;\n        this._fluenceAppService = undefined;\n\n        this._particleSpecificHandlers.clear();\n        this._commonHandlers.clear();\n        this._marineServices.clear();\n    }\n\n    // internal api\n\n    /**\n     * Is not intended to be used manually. Subject to change\n     */\n    get internals() {\n        return {\n            /**\n             * Initiates a new particle execution starting from local peer\n             * @param particle - particle to start execution of\n             */\n            initiateParticle: (particle: Particle, onStageChange: (stage: ParticleExecutionStage) => void): void => {\n                if (!this.getStatus().isInitialized) {\n                    throw 'Cannot initiate new particle: peer is not initialized';\n                }\n\n                if (this._printParticleId) {\n                    console.log('Particle id: ', particle.id);\n                }\n\n                if (particle.initPeerId === undefined) {\n                    particle.initPeerId = this.getStatus().peerId;\n                }\n\n                if (particle.ttl === undefined) {\n                    particle.ttl = this._defaultTTL;\n                }\n\n                this._incomingParticles.next({\n                    particle: particle,\n                    onStageChange: onStageChange,\n                });\n            },\n\n            /**\n             * Register Call Service handler functions\n             */\n            regHandler: {\n                /**\n                 * Register handler for all particles\n                 */\n                common: (\n                    // force new line\n                    serviceId: string,\n                    fnName: string,\n                    handler: GenericCallServiceHandler,\n                ) => {\n                    this._commonHandlers.set(serviceFnKey(serviceId, fnName), handler);\n                },\n                /**\n                 * Register handler which will be called only for particle with the specific id\n                 */\n                forParticle: (\n                    particleId: string,\n                    serviceId: string,\n                    fnName: string,\n                    handler: GenericCallServiceHandler,\n                ) => {\n                    let psh = this._particleSpecificHandlers.get(particleId);\n                    if (psh === undefined) {\n                        psh = new Map<string, GenericCallServiceHandler>();\n                        this._particleSpecificHandlers.set(particleId, psh);\n                    }\n\n                    psh.set(serviceFnKey(serviceId, fnName), handler);\n                },\n            },\n        };\n    }\n\n    // private\n\n    /**\n     *  Used in `isInstance` to check if an object is of type FluencePeer. That's a hack to work around corner cases in JS type system\n     */\n    private _isFluenceAwesome = true;\n\n    // TODO:: make public when full connection\\disconnection cycle is implemented properly\n    private async _connect(): Promise<void> {\n        return this._connection?.connect();\n    }\n\n    // TODO:: make public when full connection\\disconnection cycle is implemented properly\n    private async _disconnect(): Promise<void> {\n        if (this._connection) {\n            return this._connection.disconnect();\n        }\n    }\n\n    // Queues for incoming and outgoing particles\n\n    private _incomingParticles = new Subject<ParticleQueueItem>();\n    private _outgoingParticles = new Subject<ParticleQueueItem>();\n\n    // Call service handler\n\n    private _marineServices = new Set<string>();\n    private _marineLogLevel?: MarineLoglevel;\n    private _particleSpecificHandlers = new Map<string, Map<string, GenericCallServiceHandler>>();\n    private _commonHandlers = new Map<string, GenericCallServiceHandler>();\n\n    private _classServices: {\n        sig: Sig;\n    };\n\n    private _containsService(serviceId: string): boolean {\n        return this._marineServices.has(serviceId) || this._commonHandlers.has(serviceId);\n    }\n\n    // Internal peer state\n\n    private _printParticleId: boolean = false;\n    private _defaultTTL: number;\n    private _relayPeerId: PeerIdB58 | null = null;\n    private _keyPair: KeyPair;\n    private _connection: FluenceConnection;\n\n    /**\n     * @deprecated. AVM run through marine-js infrastructure. This field is needed for backward compatibility with the previous API\n     */\n    private _avmRunner: AvmRunner;\n    private _fluenceAppService: FluenceAppService;\n    private _timeouts: Array<NodeJS.Timeout> = [];\n    private _particleQueues = new Map<string, Subject<ParticleQueueItem>>();\n\n    private _startParticleProcessing() {\n        this._incomingParticles\n            .pipe(\n                tap((x) => {\n                    x.particle.logTo('debug', 'particle received:');\n                }),\n                filterExpiredParticles(this._expireParticle.bind(this)),\n            )\n            .subscribe((item) => {\n                const p = item.particle;\n                let particlesQueue = this._particleQueues.get(p.id);\n\n                if (!particlesQueue) {\n                    particlesQueue = this._createParticlesProcessingQueue();\n                    this._particleQueues.set(p.id, particlesQueue);\n\n                    const timeout = setTimeout(() => {\n                        this._expireParticle(item);\n                    }, p.actualTtl());\n\n                    this._timeouts.push(timeout);\n                }\n\n                particlesQueue.next(item);\n            });\n\n        this._outgoingParticles.subscribe(async (item) => {\n            // Do not send particle after the peer has been stopped\n            if (!this.getStatus().isInitialized) {\n                return;\n            }\n\n            if (!this._connection) {\n                item.particle.logTo('error', 'cannot send particle, peer is not connected');\n                item.onStageChange({ stage: 'sendingError' });\n                return;\n            }\n            await this._connection.sendParticle(item.particle);\n            item.onStageChange({ stage: 'sent' });\n        });\n    }\n\n    private _expireParticle(item: ParticleQueueItem) {\n        const particleId = item.particle.id;\n        log.debug(\n            `particle ${particleId} has expired after ${item.particle.ttl}. Deleting particle-related queues and handlers`,\n        );\n\n        this._particleQueues.delete(particleId);\n        this._particleSpecificHandlers.delete(particleId);\n\n        item.onStageChange({ stage: 'expired' });\n    }\n\n    private _createParticlesProcessingQueue() {\n        let particlesQueue = new Subject<ParticleQueueItem>();\n        let prevData: Uint8Array = Buffer.from([]);\n\n        particlesQueue\n            .pipe(\n                // force new line\n                filterExpiredParticles(this._expireParticle.bind(this)),\n\n                concatMap(async (item) => {\n                    // Is `.stop()` was called we need to stop particle processing immediately\n                    if (!this.getStatus().isInitialized) {\n                        return null;\n                    }\n\n                    // IMPORTANT!\n                    // AVM runner execution and prevData <-> newData swapping\n                    // MUST happen sequentially (in a critical section).\n                    // Otherwise the race between runner might occur corrupting the prevData\n\n                    const result = await runAvmRunner(\n                        this.getStatus().peerId,\n                        this._avmRunner,\n                        item.particle,\n                        prevData,\n                    );\n                    const newData = Buffer.from(result.data);\n                    prevData = newData;\n\n                    return {\n                        ...item,\n                        result: result,\n                        newData: newData,\n                    };\n                }),\n            )\n            .subscribe(async (item) => {\n                // Is `.stop()` was called we need to stop particle processing immediately\n                if (!this.getStatus().isInitialized) {\n                    return;\n                }\n\n                // Do not continue if there was an error in particle interpretation\n                if (!isInterpretationSuccessful(item.result)) {\n                    item.onStageChange({ stage: 'interpreterError', errorMessage: item.result.errorMessage });\n                    return;\n                }\n\n                setTimeout(() => {\n                    item.onStageChange({ stage: 'interpreted' });\n                }, 0);\n\n                // send particle further if requested\n                if (item.result.nextPeerPks.length > 0) {\n                    const newParticle = item.particle.clone();\n                    newParticle.data = item.newData;\n                    this._outgoingParticles.next({ ...item, particle: newParticle });\n                }\n\n                // execute call requests if needed\n                // and put particle with the results back to queue\n                if (item.result.callRequests.length > 0) {\n                    for (let [key, cr] of item.result.callRequests) {\n                        const req = {\n                            fnName: cr.functionName,\n                            args: cr.arguments,\n                            serviceId: cr.serviceId,\n                            tetraplets: cr.tetraplets,\n                            particleContext: item.particle.getParticleContext(),\n                        };\n\n                        this._execSingleCallRequest(req)\n                            .catch(\n                                (err): CallServiceResult => ({\n                                    retCode: ResultCodes.error,\n                                    result: `Handler failed. fnName=\"${req.fnName}\" serviceId=\"${\n                                        req.serviceId\n                                    }\" error: ${err.toString()}`,\n                                }),\n                            )\n                            .then((res) => {\n                                const serviceResult = {\n                                    result: jsonify(res.result),\n                                    retCode: res.retCode,\n                                };\n\n                                const newParticle = item.particle.clone();\n                                newParticle.callResults = [[key, serviceResult]];\n                                newParticle.data = Buffer.from([]);\n\n                                particlesQueue.next({ ...item, particle: newParticle });\n                            });\n                    }\n                } else {\n                    item.onStageChange({ stage: 'localWorkDone' });\n                }\n            });\n\n        return particlesQueue;\n    }\n\n    private async _execSingleCallRequest(req: CallServiceData): Promise<CallServiceResult> {\n        log.debug('executing call service handler', jsonify(req));\n        const particleId = req.particleContext.particleId;\n\n        if (this._marineServices.has(req.serviceId)) {\n            const args = JSON.stringify(req.args);\n            const rawResult = await this._fluenceAppService.callService(req.serviceId, req.fnName, args, undefined);\n\n            try {\n                const result = JSON.parse(rawResult);\n                if (typeof result.error === 'string' && result.error.length > 0) {\n                    return {\n                        retCode: ResultCodes.error,\n                        result: result.error,\n                    };\n                }\n\n                if (result.result === undefined) {\n                    throw 'Call to marine-js returned no error and empty result. Original request: ' + jsonify(req);\n                }\n\n                return {\n                    retCode: ResultCodes.success,\n                    result: result.result,\n                };\n            } catch (e) {\n                throw 'Call to marine-js. Result parsing error: ' + e + ', original text: ' + rawResult;\n            }\n        }\n\n        const key = serviceFnKey(req.serviceId, req.fnName);\n        const psh = this._particleSpecificHandlers.get(particleId);\n        let handler: GenericCallServiceHandler;\n\n        // we should prioritize handler for this particle if there is one\n        // if particle-specific handlers exist for this particle try getting handler there\n        if (psh !== undefined) {\n            handler = psh.get(key);\n        }\n\n        // then try to find a common handler for all particles with this service-fn key\n        // if there is no particle-specific handler, get one from common map\n        if (handler === undefined) {\n            handler = this._commonHandlers.get(key);\n        }\n\n        // if no handler is found return useful error message to AVM\n        if (handler === undefined) {\n            return {\n                retCode: ResultCodes.error,\n                result: `No handler has been registered for serviceId='${req.serviceId}' fnName='${\n                    req.fnName\n                }' args='${jsonify(req.args)}'`,\n            };\n        }\n\n        // if we found a handler, execute it\n        const res = await handler(req);\n\n        if (res.result === undefined) {\n            res.result = null;\n        }\n\n        log.debug('executed call service handler, req and res are: ', jsonify(req), jsonify(res));\n        return res;\n    }\n\n    private _stopParticleProcessing() {\n        // do not hang if the peer has been stopped while some of the timeouts are still being executed\n        for (let item of this._timeouts) {\n            clearTimeout(item);\n        }\n        this._particleQueues.clear();\n    }\n}\n\nfunction isInterpretationSuccessful(result: InterpreterResult) {\n    return result.retCode === 0;\n}\n\nfunction serviceFnKey(serviceId: string, fnName: string) {\n    return `${serviceId}/${fnName}`;\n}\n\nfunction registerDefaultServices(peer: FluencePeer) {\n    for (let serviceId in builtInServices) {\n        for (let fnName in builtInServices[serviceId]) {\n            const h = builtInServices[serviceId][fnName];\n            peer.internals.regHandler.common(serviceId, fnName, h);\n        }\n    }\n}\n\nasync function runAvmRunner(\n    currentPeerId: PeerIdB58,\n    runner: AvmRunner,\n    particle: Particle,\n    prevData: Uint8Array,\n): Promise<InterpreterResult> {\n    particle.logTo('debug', 'Sending particle to interpreter');\n    log.debug('prevData: ', dataToString(prevData));\n    const interpreterResult = await runner.run(\n        particle.script,\n        prevData,\n        particle.data,\n        {\n            initPeerId: particle.initPeerId,\n            currentPeerId: currentPeerId,\n            timestamp: particle.timestamp,\n            ttl: particle.ttl,\n        },\n        particle.callResults,\n    );\n\n    const toLog: any = { ...interpreterResult };\n    toLog.data = dataToString(toLog.data);\n\n    if (isInterpretationSuccessful(interpreterResult)) {\n        log.debug('Interpreter result: ', jsonify(toLog));\n    } else {\n        log.error('Interpreter failed: ', jsonify(toLog));\n    }\n    return interpreterResult;\n}\n\nfunction filterExpiredParticles(onParticleExpiration: (item: ParticleQueueItem) => void) {\n    return pipe(\n        tap((item: ParticleQueueItem) => {\n            if (item.particle.hasExpired()) {\n                onParticleExpiration(item);\n            }\n        }),\n        filter((x: ParticleQueueItem) => !x.particle.hasExpired()),\n    );\n}\n\nasync function loadMarineAndAvm(\n    marinePath: string,\n    avmPath: string,\n): Promise<{\n    marine: SharedArrayBuffer | Buffer;\n    avm: SharedArrayBuffer | Buffer;\n}> {\n    let promises: [Promise<SharedArrayBuffer | Buffer>, Promise<SharedArrayBuffer | Buffer>];\n    // check if we are running inside the browser and instantiate worker with the corresponding script\n    if (isBrowser) {\n        promises = [\n            // force new line\n            loadWasmFromServer(marinePath),\n            loadWasmFromServer(avmPath),\n        ];\n    } else if (isNode) {\n        promises = [\n            // force new line\n            loadWasmFromFileSystem(marinePath),\n            loadWasmFromFileSystem(avmPath),\n        ];\n    } else {\n        throw new Error('Unknown environment');\n    }\n\n    const [marine, avm] = await Promise.all(promises);\n    return {\n        marine,\n        avm,\n    };\n}\n"]}