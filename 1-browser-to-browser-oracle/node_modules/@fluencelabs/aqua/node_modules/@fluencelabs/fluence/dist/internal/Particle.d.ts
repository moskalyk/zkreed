import { ParticleContext } from './commonTypes';
import { CallResultsArray, LogLevel } from '@fluencelabs/avm';
export declare class Particle {
    id: string;
    initPeerId: string;
    timestamp: number;
    ttl: number;
    script: string;
    signature: string;
    data: Uint8Array;
    callResults: CallResultsArray;
    static createNew(script: string, ttlMs?: number): Particle;
    static fromString(str: string): Particle;
    getParticleContext(): ParticleContext;
    actualTtl(): number;
    hasExpired(): boolean;
    clone(): Particle;
    toString(): string;
    logTo(level: LogLevel, message: string): void;
}
export declare type ParticleExecutionStage = {
    stage: 'received';
} | {
    stage: 'interpreted';
} | {
    stage: 'interpreterError';
    errorMessage: string;
} | {
    stage: 'localWorkDone';
} | {
    stage: 'sent';
} | {
    stage: 'sendingError';
} | {
    stage: 'expired';
};
export interface ParticleQueueItem {
    particle: Particle;
    onStageChange: (state: ParticleExecutionStage) => void;
}
//# sourceMappingURL=Particle.d.ts.map