import { CallServiceData, CallServiceResult, CallServiceResultType } from './commonTypes';
import { FluencePeer } from './FluencePeer';
import { ParticleExecutionStage } from './Particle';
export declare const MakeServiceCall: (fn: (args: any[]) => CallServiceResultType) => (req: CallServiceData) => CallServiceResult;
export declare const handleTimeout: (fn: Function) => (stage: ParticleExecutionStage) => void;
export declare const doNothing: (stage: ParticleExecutionStage) => void;
/**
 * Checks the network connection by sending a ping-like request to relay node
 * @param { FluenceClient } peer - The Fluence Client instance.
 */
export declare const checkConnection: (peer: FluencePeer, ttl?: number) => Promise<boolean>;
export declare function dataToString(data: Uint8Array): string;
export declare function jsonify(obj: any): string;
export declare function throwIfNotSupported(): void;
//# sourceMappingURL=utils.d.ts.map