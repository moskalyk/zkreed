import { CallServiceResult } from '@fluencelabs/avm';
export declare const builtInServices: {
    peer: {
        identify: (req: any) => CallServiceResult;
        timestamp_ms: (req: any) => CallServiceResult;
        timestamp_sec: (req: any) => CallServiceResult;
        is_connected: (req: any) => CallServiceResult;
        connect: (req: any) => CallServiceResult;
        get_contact: (req: any) => CallServiceResult;
        timeout: (req: any) => CallServiceResult | Promise<unknown>;
    };
    kad: {
        neighborhood: (req: any) => CallServiceResult;
        merge: (req: any) => CallServiceResult;
    };
    srv: {
        list: (req: any) => CallServiceResult;
        create: (req: any) => CallServiceResult;
        get_interface: (req: any) => CallServiceResult;
        resolve_alias: (req: any) => CallServiceResult;
        add_alias: (req: any) => CallServiceResult;
        remove: (req: any) => CallServiceResult;
    };
    dist: {
        add_module_from_vault: (req: any) => CallServiceResult;
        add_module: (req: any) => CallServiceResult;
        add_blueprint: (req: any) => CallServiceResult;
        make_module_config: (req: any) => CallServiceResult;
        load_module_config: (req: any) => CallServiceResult;
        default_module_config: (req: any) => CallServiceResult;
        make_blueprint: (req: any) => CallServiceResult;
        load_blueprint: (req: any) => CallServiceResult;
        list_modules: (req: any) => CallServiceResult;
        get_module_interface: (req: any) => CallServiceResult;
        list_blueprints: (req: any) => CallServiceResult;
    };
    script: {
        add: (req: any) => CallServiceResult;
        remove: (req: any) => CallServiceResult;
        list: (req: any) => CallServiceResult;
    };
    op: {
        noop: (req: any) => CallServiceResult;
        array: (req: any) => CallServiceResult;
        array_length: (req: any) => CallServiceResult;
        identity: (req: any) => CallServiceResult;
        concat: (req: any) => CallServiceResult;
        string_to_b58: (req: any) => CallServiceResult;
        string_from_b58: (req: any) => CallServiceResult;
        bytes_to_b58: (req: any) => CallServiceResult;
        bytes_from_b58: (req: any) => CallServiceResult;
        sha256_string: (req: any) => Promise<CallServiceResult>;
        concat_strings: (req: any) => CallServiceResult;
    };
    debug: {
        stringify: (req: any) => CallServiceResult;
    };
    math: {
        add: (req: any) => any;
        sub: (req: any) => any;
        mul: (req: any) => any;
        fmul: (req: any) => any;
        div: (req: any) => any;
        rem: (req: any) => any;
        pow: (req: any) => any;
        log: (req: any) => any;
    };
    cmp: {
        gt: (req: any) => any;
        gte: (req: any) => any;
        lt: (req: any) => any;
        lte: (req: any) => any;
        cmp: (req: any) => any;
    };
    array: {
        sum: (req: any) => any;
        dedup: (req: any) => any;
        intersect: (req: any) => any;
        diff: (req: any) => any;
        sdiff: (req: any) => any;
    };
};
//# sourceMappingURL=common.d.ts.map