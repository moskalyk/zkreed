{"version":3,"file":"Particle.js","sourceRoot":"","sources":["../../src/internal/Particle.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Fluence Labs Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { fromByteArray, toByteArray } from 'base64-js';\nimport log from 'loglevel';\nimport { ParticleContext } from './commonTypes';\nimport { dataToString, jsonify } from './utils';\nimport Buffer from './Buffer';\nimport { CallResultsArray, LogLevel } from '@fluencelabs/avm';\n\nexport class Particle {\n    id: string;\n    initPeerId: string;\n    timestamp: number;\n    ttl: number;\n    script: string;\n    signature: string;\n    data: Uint8Array;\n    callResults: CallResultsArray = [];\n\n    static createNew(script: string, ttlMs?: number): Particle {\n        const res = new Particle();\n        res.id = genUUID();\n        res.script = script;\n        res.ttl = ttlMs;\n        res.data = Buffer.from([]);\n        res.timestamp = Date.now();\n\n        return res;\n    }\n\n    static fromString(str: string): Particle {\n        const json = JSON.parse(str);\n        const res = new Particle();\n        res.id = json.id;\n        res.initPeerId = json.init_peer_id;\n        res.timestamp = json.timestamp;\n        res.ttl = json.ttl;\n        res.script = json.script;\n        res.signature = json.signature;\n        res.data = toByteArray(json.data);\n\n        return res;\n    }\n\n    getParticleContext(): ParticleContext {\n        return {\n            particleId: this.id,\n            initPeerId: this.initPeerId,\n            timestamp: this.timestamp,\n            ttl: this.ttl,\n            signature: this.signature,\n        };\n    }\n\n    actualTtl(): number {\n        return this.timestamp + this.ttl - Date.now();\n    }\n\n    hasExpired(): boolean {\n        return this.actualTtl() <= 0;\n    }\n\n    clone(): Particle {\n        const res = new Particle();\n        res.id = this.id;\n        res.initPeerId = this.initPeerId;\n        res.timestamp = this.timestamp;\n        res.ttl = this.ttl;\n        res.script = this.script;\n        res.signature = this.signature;\n        res.data = this.data;\n        res.callResults = this.callResults;\n        return res;\n    }\n\n    toString(): string {\n        const particle = this;\n        const payload = {\n            action: 'Particle',\n            id: particle.id,\n            init_peer_id: particle.initPeerId,\n            timestamp: particle.timestamp,\n            ttl: particle.ttl,\n            script: particle.script,\n            // TODO: copy signature from a particle after signatures will be implemented on nodes\n            signature: [],\n            data: fromByteArray(particle.data),\n        };\n\n        return JSON.stringify(payload);\n    }\n\n    logTo(level: LogLevel, message: string) {\n        let fn;\n        let data;\n        switch (level) {\n            case 'debug':\n                fn = log.debug;\n                data = dataToString(this.data);\n                break;\n            case 'error':\n                fn = log.error;\n                break;\n            case 'info':\n                fn = log.info;\n                break;\n            case 'trace':\n                fn = log.info;\n                break;\n            case 'warn':\n                fn = log.warn;\n                break;\n            default:\n                return;\n        }\n\n        fn(\n            message,\n            jsonify({\n                id: this.id,\n                init_peer_id: this.initPeerId,\n                timestamp: this.timestamp,\n                ttl: this.ttl,\n                script: this.script,\n                signature: this.signature,\n                callResults: this.callResults,\n                data: data,\n            }),\n        );\n    }\n}\n\nexport type ParticleExecutionStage =\n    | { stage: 'received' }\n    | { stage: 'interpreted' }\n    | { stage: 'interpreterError'; errorMessage: string }\n    | { stage: 'localWorkDone' }\n    | { stage: 'sent' }\n    | { stage: 'sendingError' }\n    | { stage: 'expired' };\n\nexport interface ParticleQueueItem {\n    particle: Particle;\n    onStageChange: (state: ParticleExecutionStage) => void;\n}\n\nfunction genUUID() {\n    return uuidv4();\n}\n"]}